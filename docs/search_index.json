[["index.html", "The {squidSim} R Package Vignette The {squidSim} R package", " The {squidSim} R Package Vignette Joel Pick 2022-03-10 The {squidSim} R package The squidSim R package is designed to simplify data simulation from a highly flexible set of models, including: Correlated and interacting predictor variables Non-Gaussian response variables (Poisson and binomial) Crossed and nested hierarchical structures Random intercepts and slopes Univariate and multivariate data Within level-specific residual variance (DHGLMs) Additive genetic effects (animal models) Phylogenetic effects with different models of evolution Temporal and spatial autocorrelation Missing data (MNAR, MAR and MCAR) Temporal sampling The main idea is that anything you can model using a linear mixed effect model framework (assuming underlying multivariate normality) you should be able to simulate using the squidSim package. SQuID ethos Create population and then sample from it Make Hierarchical Structure ↓ Simulate data ↓ Sample Data Why use squidSim? For people confident with programming in R, simulating data doesn’t provide a huge challenge. However, to those less confident with programming, or the process of data simulation more generally, starting with simulations can seem like a daunting task. The {squidSim} R package is designed to facilitate that transition, and to focus attention on the data structure and parameters needed for simulation, rather than the programming knowledge. {squidSim} also provides a useful tool for experienced programmers. One problematic aspect of collaborative coding (or reviewing someone else’s code) is that many people have very contrasting programming styles. Another motivation for the squidSim package is that it provides a consistent framework for simulations, which can be interpreted by many people rather than having to decipher someone’s personal code. Using the vignette If you are new to using the {squidSim} package, we recommend that you read Sections 1 and 2 to familiarise yourself with the squidSim package before moving onto the more advanced topics. The later sections assume an certain level of understanding of how the functions work. The vignette assumes that you have a working knowledge of R, in particular being comfortable using vectors, matrices and lists. Installation The squidSim package is currently only available on github: devtools::install_github(&quot;squid-group/squidSim&quot;) library(squidSim) Issues and bugs It would be great if you could report any suggestions, issues or bugs using github issues https://github.com/squid-group/squidSim/issues. It is worth checking to see if anyone else has a similar problem first, and adding comments to their issue, before starting a new one. "],["1-linearmod.html", "1 Simulating population data", " 1 Simulating population data In this section, we will look at simulating data simple data from linear models, to familiarise ourselves with how squidSim works. "],["1.1-simulate_population-function.html", "1.1 simulate_population function", " 1.1 simulate_population function The heart of the squidSim R package is the simulate_population() function, which we can use to simulate hierarchical population level data. We provide the function with a set of parameters, a hierarchical data structure (if we are simulating hierarchical data), and various other optional arguments, which are listed below. The simulate_population() function simulates predictors at each hierarchical level, using provided mean and variance-covariance (vcov) parameters, from a multivariate normal distribution. These predictors are then scaled by the beta parameters, and added together to create the response. The arguments that can be provided to the simulate_population() function (along with their defaults) are: simulate_population( data_structure, n, parameters, n_response=1, response_names, family=&quot;gaussian&quot;, link=&quot;identity&quot;, model, known_predictors, pedigree, pedigree_type, phylogeny, phylogeny_type, cov_str, sample_type, sample_param, n_pop=1 ) Each of these will be covered in more detail in the following sections. Briefly, n and data_structure refer to the size and structure of the data being simulated - data_structure is covered in more detail in Section 2. parameters is a list of parameters to be used in the simulation and is described in detail in the following parts of this section. n_response refers the number of response variable to be simulated and is covered in detail in the section on multivariate models (Section 3). response_names controls what the simulated response variables are named, and is described in the following parts of this section and Section 3. family and link refer to simulating non Gaussian response variables and are covered in Section 1.7. model allows for the specification of more complex models and is covered in Section 1.8. pedigree and pedigree_type relate to simulating genetic effects and are covered in Section 4, phylogeny and phylogeny_type, relate to simulating phylogenetic effects and are covered in Section 5and cov_str relates to simulating a general covariance structure and is covered in multiple sections, including 4, 5, 6.3 and 6.4. sample_type and sample_param relate to different sampling methods and are covered in Section 7 n_pop relates to the number of populations, or datasets, that you want to simulate for each parameter set. This is covered in Section 1.9. "],["1.2-simple-linear-model.html", "1.2 Simple Linear Model", " 1.2 Simple Linear Model We will start simulating data without any hierarchical structure, i.e. everything varies at the level of the observation. Let’s imagine a situation where body mass is affected by some environmental variables - temperature, rainfall and wind. We can write this out in the form of a linear model: \\[ y_i = \\beta_0 + \\beta_1 * x_{1,i} + \\beta_2 * x_{2,i} + \\beta_3 * x_{3,i} + \\epsilon_i \\] where our predictor variables (denoted as \\(x_1\\), \\(x_2\\), \\(x_3\\)), which vary at the level of the observation (denoted by the index \\(i\\)), affect our response variable (\\(y\\)), each with a certain magnitude and direction of their effect (effect size or slope; \\(\\beta_1\\) etc), as well as some unexplained, residual variation (\\(\\epsilon\\)), and an intercept (\\(\\beta_0\\); value of the response when the sum of the predictors is 0). These are added together to give create the response variable. We can also write this in matrix notation \\[ y = \\beta_0 + X \\beta + \\epsilon \\] where \\(X\\) is a matrix of predictors and \\(\\beta\\) is a (column) vector of slopes/effect sizes. We will use both notations in the vignette, although this matrix notation is a bit more compact and relates most easily the structure of the the simulate_population() function. If we want to simulate from this model, we can assume that these predictor variables are multivariate normally distributed, with given means (\\(\\mu\\)) and a covariance structure (\\(\\Sigma_x\\)), and the residuals are normally distributed with a given variance (\\(\\sigma^2_\\epsilon\\)) \\[ X \\sim MVN(\\mu_x,\\Sigma_x) \\] \\[ \\epsilon \\sim N(0,\\sigma^2_\\epsilon) \\] The key to simulating data using the squidSim package is correctly specifying the parameters (from the equations above that would be \\(\\beta_0\\), \\(\\beta\\), \\(\\mu\\), \\(\\Sigma_x\\), \\(\\sigma^2_\\epsilon\\)). These parameters are given to the simulate_population function as a nested list. Within the main parameter list, there are named lists corresponding to different hierarchical levels, containing the parameters for the predictors at that level - here we are just focussing on the observation level (see Section 2 for examples with hierarchical structure). Parameters for the residual must be specified, all other levels are optional. In addition to the named lists relating to hierarchical levels, a vector for intercepts and a list for interactions can be added. Intercepts are demonstrated in the examples below, and interactions in Section 1.4. Many of the components in the parameter list don’t need to be specified and default values will be created. Let’s simulate from the above model. First we can specify a sample size or data_structure. As we don’t have any hierarchical data structure yet (see Section 2), we have to specify the sample size with the n argument to the simulate_population function (e.g. 2000). simulate_population( n=2000, ... ) We can also give the response (\\(y\\)) variable a name, body_mass (this is not needed, and defaults to y if not specified). simulate_population( n=2000, response_name = &quot;body_mass&quot;, ... ) We then need to add in our parameter list: simulate_population( n=2000, response_name = &quot;body_mass&quot;, parameters = list( ... ) ) To fill in our parameter list, lets think about our model \\[ y = \\beta_0 + X \\beta + \\epsilon \\] \\[ X \\sim MVN(\\mu_x,\\Sigma_x) \\] \\[ \\epsilon \\sim N(0,\\sigma^2_\\epsilon) \\] or in words: intercept + observation + residual To simulate our environmental predictors varying at the level of the observation, we can use the observation slot in the parameter list, as well as specifying an intercept and residual variance in the intercept and residual slots, respectively. For simplicity we will ignore the intercept for now (it defaults to 0). For both observation and residual we create a list containing the respective parameters. Let’s start with the observation list. We can specify the names of these variables as a vector (these can be anything - I like giving things actual names, but could also be x_1, x_2 and x_3) and, in the simplest case, the \\(\\beta\\) values as a vector. observation = list( names = c(&quot;temperature&quot;,&quot;rainfall&quot;, &quot;wind&quot;), beta = c(0.5,-0.3, 0.4) ) By default, these predictors are simulated as i.i.d. unit normals (mean=0, var=1, cov=0). Note that the order of the names and betas has to match. We can then specify the residual variance, here as 1 (but can be anything) residual = list( vcov = 1 ) We put this together: squid_data &lt;- simulate_population( n=2000, response_name = &quot;body_mass&quot;, parameters = list( observation = list( names = c(&quot;temperature&quot;,&quot;rainfall&quot;, &quot;wind&quot;), beta = c(0.5,-0.3, 0.4) ), residual = list( vcov = 1 ) ) ) to generate a squid object, which when run returns a friendly message squid_data ## Data simulated using squid ## ## /\\ ## / \\ ## / /\\ \\ ## \\/ \\/ ## / \\ ## | | ## | | ## 0 | | 0 ## / \\____/ \\ ## { __/( )\\__ } ## \\___/__\\_\\/_/__\\___/ ## / / / / \\ \\ \\ \\ ## / / / { } \\ \\ \\ ## { { / \\ / \\ } } ## } \\ 0 0 / { ## 0_/ { \\_0 0_/ } \\_0 ## \\ / ## } { ## / \\ ## 0 0 and contains all our simulation parameters as well as the simulated data. At this point we want to be able to access the simulated data. There are then some further functions which we can use to access the data and simulation parameters. We can extract the simulated data using get_population_data() The generated response is returned as y, along with simulated predictors and the data structure (not relevant here). data &lt;- get_population_data(squid_data) head(data) ## body_mass temperature rainfall wind residual squid_pop ## 1: -2.9325450 -0.5546180 1.8204951 -0.3572327 -1.96619440 1 ## 2: -1.0666986 -1.0987684 1.0778051 -0.1673978 -0.12701380 1 ## 3: 1.0251024 0.9657612 -1.5800670 0.3902257 -0.08788857 1 ## 4: 0.5595552 0.1401419 1.1736149 1.0480271 0.42235785 1 ## 5: -2.0877287 -1.6047460 0.9101661 -2.0050184 -0.21029853 1 ## 6: -2.1794193 1.0313695 -0.5166134 -1.4391570 -2.27442527 1 Later on we will explore how to simulate data for multiple populations with the same parameters (Section 1.9). squid_pop is an identifier for the population number, but is not relavent here. We can plot what we have simulated: library(scales) par(mfrow=c(1,3)) plot(body_mass ~ temperature + rainfall + wind, data, pch=19, cex=0.5, col=alpha(1,0.5)) and run a linear model to check that we get back what we have simulated: coef(lm(body_mass ~ temperature + rainfall,data)) ## (Intercept) temperature rainfall ## -0.02208531 0.51680198 -0.34305824 We can extract the parameters we used for the simulations # get_parameters(squid_data) 1.2.1 Adding more information about the predictors We can also specify the predictors as having different means and variances, and specify a global intercept (\\(\\beta_0\\)). In the observation list, mean and vcov specify the means and covariance matrix of the predictors. If the predictors were uncorrelated, we can just specify the variances as a vector (the diagonal elements of the covariance matrix), and the function assumes the covariances are 0 (see section 1.3 for correlated predictors). The global intercept can be given by specifying an intercept vector in the parameter list (intercept=10 in the example below). So below we have three predictors, temperature, rainfall and wind, with means 10, 1 and 20 respectively, variances 1, 0.1 and 2, respectively, and betas 0.5,-3 and 0.4, a residual variance 0.8 and a global intercept of 10. squid_data &lt;- simulate_population( n=2000, response_name = &quot;body_mass&quot;, parameters=list( intercept=10, observation=list( names=c(&quot;temperature&quot;,&quot;rainfall&quot;, &quot;wind&quot;), mean = c(10,1,20), vcov =c(1,0.1,2), beta =c(0.5,-3,0.4) ), residual=list( vcov=0.8 ) ) ) data &lt;- get_population_data(squid_data) coef(lm(body_mass ~ temperature + rainfall + wind, data)) ## (Intercept) temperature rainfall wind ## 9.3432754 0.4864841 -2.9376408 0.4368472 library(scales) par(mfrow=c(1,3)) plot(body_mass ~ temperature + rainfall + wind, data, pch=19, cex=0.5, col=alpha(1,0.5)) It can be complicated to keep up with how these different values combine to give the mean and variance of the response. To help with this, the expected_variance() function calculates the expected mean and variance of the response variable, as well as breaking down the contribution of different predictors and levels to the these. expected_variance(squid_data) ## Contribution of the simulated predictors to the mean and variance in the response ## ## Expected Mean: 20 ## Expected Variance: 2.27 ## ## Contribution of different hierarchical levels to grand mean and variance: ## mean var ## intercept 10 0.00 ## observation 10 1.47 ## residual 0 0.80 ## ## ## Contribution of different predictors to grand mean and variance: ## mean var ## intercept 10 0.00 ## temperature 5 0.25 ## rainfall -3 0.90 ## wind 8 0.32 ## residual 0 0.80 "],["1.3-corpred.html", "1.3 Correlated predictors", " 1.3 Correlated predictors We can also simulate correlations between these predictors, as vcov specifies the variance/covariance matrix of the predictors. squid_data &lt;- simulate_population( n=2000, response_name = &quot;body_mass&quot;, parameters=list( intercept=10, observation=list( names=c(&quot;temperature&quot;,&quot;rainfall&quot;, &quot;wind&quot;), mean = c(10,1 ,20), vcov =matrix(c( 1, 0, 1, 0,0.1,0, 1, 0, 2 ), nrow=3 ,ncol=3), beta =c(0.5,-3,0.4) ), residual=list( vcov=1 ) ) ) data &lt;- get_population_data(squid_data) library(scales) par(mfrow=c(1,3)) plot(body_mass ~ temperature + rainfall + wind, data, pch=19, cex=0.5, col=alpha(1,0.5)) coef(lm(body_mass ~ temperature + rainfall + wind, data)) ## (Intercept) temperature rainfall wind ## 10.1508543 0.5071426 -2.9837414 0.3877572 div.blue { background-color:#fcba03; border-radius: 5px; padding: 20px;} Matrices in R To code a matrix in R we use the matrix function (see ?matrix). This takes a vector of values, and arranges then in a matrix, with dimensions specified with nrow and ncol. By default it fills the matrix by column, which can be changed by specifying byrow=TRUE. For big matrices this can be petty annoying. TheTri2M() function from the package MCMCglmm allows you to just give the lower or upper half of the matrix, and it will fill the rest out for you. For example, we can make a correlation matrix using: Tri2M(c(1,0.5,1,0.3,0.2,1), lower.tri = FALSE, diag=TRUE) ## [,1] [,2] [,3] ## [1,] 1.0 0.5 0.3 ## [2,] 0.5 1.0 0.2 ## [3,] 0.3 0.2 1.0 Instead of specifying a variance-covariance matrix (vcov), we can also specify a variance-correlation matrix (variance on the diagonals and correlations on the off-diagonals), using vcorr squid_data &lt;- simulate_population( n=2000, response_name = &quot;body_mass&quot;, parameters=list( intercept=10, observation=list( names=c(&quot;temperature&quot;,&quot;rainfall&quot;, &quot;wind&quot;), mean = c(10,1,20), vcorr =matrix(c( 1, -0.2, 0.5, -0.2, 0.1, 0.3, 0.5, 0.3, 2 ), nrow=3 ,ncol=3), beta =c(0.5,-3,0.4) ), residual=list( vcov=1 ) ) ) data &lt;- get_population_data(squid_data) cor(data[,c(&quot;temperature&quot;,&quot;rainfall&quot;, &quot;wind&quot;)]) ## temperature rainfall wind ## temperature 1.0000000 -0.2238435 0.4742474 ## rainfall -0.2238435 1.0000000 0.2952022 ## wind 0.4742474 0.2952022 1.0000000 Through simulating correlated predictors, we can also simulate more interesting phenomena. For example, we may want to simulate the effect of a correlated missing predictor. Here, rain and wind, but not temperature, affect adult body mass, but only temperature and rainfall are measured: squid_data &lt;- simulate_population( n=2000, response_name = &quot;body_mass&quot;, parameters=list( intercept=10, observation=list( names=c(&quot;temperature&quot;,&quot;rainfall&quot;, &quot;wind&quot;), mean = c(10,1 ,20), vcov =matrix(c( 1, 0, 1, 0,0.1,0, 1, 0, 2 ), nrow=3 ,ncol=3), beta =c(0.5,-3,0.4) ), residual=list( vcov=1 ) ) ) data &lt;- get_population_data(squid_data) library(scales) par(mfrow=c(1,3)) plot(body_mass ~ temperature + rainfall + wind, data, pch=19, cex=0.5, col=alpha(1,0.5)) coef(lm(body_mass ~ temperature + rainfall, data)) ## (Intercept) temperature rainfall ## 13.9311275 0.9111508 -3.0323837 coef(lm(body_mass ~ temperature + rainfall + wind, data)) ## (Intercept) temperature rainfall wind ## 9.6807476 0.5047093 -3.0048690 0.4140934 We can also use this to induce measurement error in a predictor - we can simulate the true variable with a certain affect on the response, and another correlated variable - the measured variable - with no direct effect on the response. The correlation between these two variables represents the measurement error (the repeatability of the variable is the correlation squared). "],["1.4-interactions.html", "1.4 Interactions and non-linear effects", " 1.4 Interactions and non-linear effects 1.4.1 Interactions \\[ y_i = \\beta_0 + \\beta_1 * x_{1,i} + \\beta_2 * x_{2,i} + \\beta_3 * x_{1,i}* x_{2,i} + \\epsilon_i \\] We can specify the interaction between two predictors by adding an interactions list to the parameters list. Interactions can then be specified between two named variables using “:”. Interactions can be between predictors at the same or different hierarchical level. squid_data &lt;- simulate_population( n=2000, response_name = &quot;body_mass&quot;, parameters=list( observation=list( names=c(&quot;temperature&quot;,&quot;rainfall&quot;), beta = c(0.5,0.3) ), residual=list( vcov=0.3 ), interactions=list( names=c(&quot;temperature:rainfall&quot;), beta = c(-0.1) ) ) ) data &lt;- get_population_data(squid_data) head(data) ## body_mass temperature rainfall residual temperature:rainfall ## 1: 0.03252592 1.27117267 -0.5154449 -0.513948886 -0.65521949 ## 2: 0.34057307 0.03419443 0.3595870 0.216829339 0.01229587 ## 3: -0.60356674 -1.53521629 -0.5771299 0.425782312 0.88601929 ## 4: -0.44340530 -0.43747155 0.3668314 -0.350766770 -0.16047830 ## 5: 0.09792254 -0.28500850 0.7050671 0.008811633 -0.20095013 ## 6: -1.26673078 -0.45597483 -1.3029473 -0.588448065 0.59411116 ## squid_pop ## 1: 1 ## 2: 1 ## 3: 1 ## 4: 1 ## 5: 1 ## 6: 1 coef(lm(body_mass ~ temperature * rainfall, data)) ## (Intercept) temperature rainfall ## 0.02176780 0.48733430 0.30172563 ## temperature:rainfall ## -0.09243185 1.4.2 Non-linear effects Polynomial (quadratic, cubic, etc) functions are essentially interactions with the same predictor. They can therefore be specified in the same way: squid_data &lt;- simulate_population( n=2000, response_name = &quot;body_mass&quot;, parameters=list( observation=list( names=c(&quot;temperature&quot;), beta = c(0.5) ), interactions=list( names=c(&quot;temperature:temperature&quot;), beta = c(-0.3) ), residual=list( vcov=0.3 ) ) ) data &lt;- get_population_data(squid_data) plot(body_mass ~ temperature, data, pch=19, cex=0.5, col=alpha(1,0.5)) coef(lm(body_mass ~ temperature + I(temperature^2), data)) ## (Intercept) temperature I(temperature^2) ## 0.01192661 0.50173503 -0.30366726 "],["1.5-transformations.html", "1.5 Transformations", " 1.5 Transformations We may want to simulate predictors that are not normally distributed. Although the underlying simulation procedure assumes multivariate normality, the predictors can be transformed, before they are scaled by the beta values. To do this we can provide the transformation function to the functions option of a given parameter list, as a character vector. The given function needs to be a known function in R. The below code will exponentiate rainfall (using the exp function), before it is scaled by its beta (here 2). squid_data &lt;- simulate_population( n=2000, response_name = &quot;body_mass&quot;, parameters=list( observation=list( names=c(&quot;temperature&quot;,&quot;rainfall&quot;), functions=c(NA,&quot;exp&quot;), beta = c(0.5,0.3) ), residual=list( vcov=0.3 ) ) ) data &lt;- get_population_data(squid_data) head(data) ## body_mass temperature rainfall residual squid_pop ## 1: 1.076011956 0.8576471 0.3702750 0.53610593 1 ## 2: 1.085430750 2.6919536 0.9464789 -0.54448971 1 ## 3: 2.364642626 1.0726330 0.9732510 1.53635081 1 ## 4: -0.678361933 -1.9593633 1.2486438 -0.07327343 1 ## 5: 0.003601505 -1.3636618 1.5132385 0.23146084 1 ## 6: 0.621599151 1.3329311 1.2159740 -0.40965862 1 hist(data$rainfall, breaks=100) If a covariance between variables is specified, this covariance is on the untransformed (Gaussian) scale (as the variables are simulated as multivariate normal), NOT on the transformed scale, so care should be taken with this. For example: squid_data &lt;- simulate_population( n=2000, response_name = &quot;body_mass&quot;, parameters=list( observation=list( names=c(&quot;temperature&quot;,&quot;rainfall&quot;), vcov=matrix(c(1,0.7,0.7,1), nrow=2), functions=c(NA,&quot;exp&quot;), beta = c(0.5,0.3) ), residual=list( vcov=0.3 ) ) ) data &lt;- get_population_data(squid_data) cov(data$temperature,data$rainfall) ## [1] 1.011339 cov(data$temperature,log(data$rainfall)) ## [1] 0.6913503 The simulate covariance can be recovered on the back-transformed predictor. The expected_variance() function will also no longer be accurate, as the calculations are based on variables on the untransformed scale. "],["1.6-known-predictors.html", "1.6 Known Predictors", " 1.6 Known Predictors We might have the situation where we don’t want to simulate a predictor, rather use existing data to simulate a response variable from. This has the advantage that any quirks of existing data (like a strange distribution) can be maintained. These predictors can be fed into the simulate_population() function, using the known_predictors argument. This argument takes a list, with one item, called predictors, a matrix or dataframe of predictors and one item called beta, a vector with the beta values for the respective predictors. Importantly, the predictors have to be the same length as number of observations in the simulated data. We can demonstrate this using the blue tit data set that comes with the MCMCglmm package. library(MCMCglmm) data(BTdata) head(BTdata) ## tarsus back animal dam fosternest hatchdate sex ## 1 -1.89229718 1.1464212 R187142 R187557 F2102 -0.6874021 Fem ## 2 1.13610981 -0.7596521 R187154 R187559 F1902 -0.6874021 Male ## 3 0.98468946 0.1449373 R187341 R187568 A602 -0.4279814 Male ## 4 0.37900806 0.2555847 R046169 R187518 A1302 -1.4656641 Male ## 5 -0.07525299 -0.3006992 R046161 R187528 A2602 -1.4656641 Fem ## 6 -1.13519543 1.5577219 R187409 R187945 C2302 0.3502805 Fem We can see that in this dataset there are several continuous predictors. Here we will use “hatchdate” and “tarsus”. squid_data &lt;- simulate_population( n = nrow(BTdata), response_name = &quot;body_mass&quot;, parameters = list( observation =list( names = c(&quot;temperature&quot;,&quot;rainfall&quot;), beta = c(0.5,0.3) ), residual = list( vcov = 0.3 ) ), known_predictors = list( predictors = BTdata[,c(&quot;hatchdate&quot;,&quot;tarsus&quot;)], beta = c(1,2)) ) data &lt;- get_population_data(squid_data) head(data) ## body_mass temperature rainfall residual hatchdate tarsus ## 1: -6.0722457 -1.00753202 -0.66977051 -0.8955521 -0.6874021 -1.89229718 ## 2: 2.3703313 -0.50824843 0.73995584 0.8176512 -0.6874021 1.13610981 ## 3: 2.6945093 0.71876511 0.33223514 0.6940587 -0.4279814 0.98468946 ## 4: -0.1051616 0.05652235 -0.02011871 0.5802608 -1.4656641 0.37900806 ## 5: -1.5281290 0.01708562 1.16548152 -0.2701462 -1.4656641 -0.07525299 ## 6: -2.2407914 -0.37101971 0.45637871 -0.2720848 0.3502805 -1.13519543 ## squid_pop ## 1: 1 ## 2: 1 ## 3: 1 ## 4: 1 ## 5: 1 ## 6: 1 plot(body_mass~hatchdate,data) "],["1.7-nonGaussian.html", "1.7 Non-Gaussian phenotypes", " 1.7 Non-Gaussian phenotypes To simulate non-Gaussian data, we can specify a link function and a family as arguments to the simulate_population function. Underneath the predictors are being simulated as multivariate normal, and then the resulting phenotype is transformed. \\[ y \\sim Poisson(\\hat{y}) \\] \\[ \\hat{y} = exp( \\beta_0 + X \\beta + \\epsilon ) \\] \\[ X \\sim MVN(\\mu_x,\\Sigma_x) \\] \\[ \\epsilon \\sim N(0,\\sigma^2_\\epsilon) \\] squid_data &lt;- simulate_population( parameters = list( observation = list( names = c(&quot;temperature&quot;,&quot;rainfall&quot;), beta = c(0.2,0.1) ), residual = list( mean = 1.75, vcov = 0.2 ) ), n = 2000, family = &quot;poisson&quot;, link = &quot;log&quot; ) data &lt;- get_population_data(squid_data) head(data) ## y temperature rainfall residual squid_pop ## 1: 14 1.5038225 2.6850686 2.2010047 1 ## 2: 6 2.0489942 0.5986160 1.4723851 1 ## 3: 10 0.2019298 -0.3237599 2.4521692 1 ## 4: 2 -0.1978156 1.2172776 0.8472341 1 ## 5: 3 -0.1968016 -1.4419420 1.3606087 1 ## 6: 9 -0.3248327 0.2004159 2.0413717 1 plot(table(data$y), ylab=&quot;Frequency&quot;, xlab=&quot;z&quot;) glm(y ~ temperature + rainfall, data, family=&quot;poisson&quot;) ## ## Call: glm(formula = y ~ temperature + rainfall, family = &quot;poisson&quot;, ## data = data) ## ## Coefficients: ## (Intercept) temperature rainfall ## 1.8542 0.1963 0.1046 ## ## Degrees of Freedom: 1999 Total (i.e. Null); 1997 Residual ## Null Deviance: 5336 ## Residual Deviance: 4682 AIC: 11680 "],["1.8-modeleq.html", "1.8 Model equations", " 1.8 Model equations In all the examples so far, the predictors are simulated, scaled by their respective beta value, and then added together. We may want to prevent some of this behaviour or add in additional parameters, interactions or general complexity. In isolation, the functionality outlined here might seem a bit redundant, but it becomes useful for more complex models. To introduce this increased complexity, we can specify a model formula. This explicitly tells the simulate_population function how to put the simulated predictors together to form the response variable. We can first demonstrate this with a simple linear model. squid_data &lt;- simulate_population( parameters=list( observation= list( names = c(&quot;temperature&quot;, &quot;rainfall&quot;), beta =c(0.5,0.3) ), residual = list( names=&quot;residual&quot;, vcov=1 ) ), n=2000, model = &quot;y = temperature + rainfall + residual&quot; ) data &lt;- get_population_data(squid_data) coef(lm(y ~ temperature + rainfall, data)) ## (Intercept) temperature rainfall ## -0.005735326 0.486182964 0.291958273 In the formula, we write out how the variables are added up. Everything that you want exported needs to be defined and named (e.g. y=...). By default they are all scaled by their beta values before this happens. Sometimes it is useful to prevent this (i.e. multiply two traits together without them being scaled by their respective beta) and we can do this by using I(). squid_data &lt;- simulate_population( parameters=list( observation= list( names = c(&quot;temperature&quot;, &quot;rainfall&quot;), beta =c(0.5,0.3) ), residual = list( names=&quot;residual&quot;, vcov=1 ) ), n=2000, model = &quot;y = temperature + I(rainfall) + residual&quot; ) data &lt;- get_population_data(squid_data) coef(lm(y ~ temperature + rainfall, data)) ## (Intercept) temperature rainfall ## 0.0006460971 0.5075384889 0.9822818886 We can also add extra parameters to the parameter list, which we can call from within the function. In combination with I() we can then customise the model formula a bit squid_data &lt;- simulate_population( parameters=list( observation= list( names = c(&quot;temperature&quot;, &quot;rainfall&quot;), beta =c(0.5,0.3), extra_beta = 0.1 ), residual = list( names=&quot;residual&quot;, vcov=1 ) ), n=2000, model = &quot;y = temperature + extra_beta*I(rainfall) + residual&quot; ) data &lt;- get_population_data(squid_data) coef(lm(y ~ temperature + rainfall, data)) ## (Intercept) temperature rainfall ## 0.01099725 0.50426612 0.10102721 Finally, we can use [] to index the levels of the random effects within the formula… "],["1.9-npop.html", "1.9 Simulating multiple populations", " 1.9 Simulating multiple populations We can use the simulate_population() function to generate multiple datasets (populations) form the same set of parameters (world). To do this we can specify the n_pop argument in simulate_population(). This defaults to 1. squid_data &lt;- simulate_population( parameters = list( individual = list( vcov = 0.5 ), residual = list( vcov = 0.5 ) ), data_structure = make_structure(structure = &quot;sex(2)/individual(1000)&quot;, n=2000), n_pop=5 ) By default get_population_data returns a data.table, where the squid_pop column indicates the population data &lt;- get_population_data(squid_data) head(data) ## y individual_effect residual sex individual squid_pop ## 1: 0.7840109 0.23190654 0.5521044 1 1 1 ## 2: 0.5978521 -0.09821326 0.6960653 1 2 1 ## 3: -0.7016209 0.35601426 -1.0576352 1 3 1 ## 4: -0.2581335 -0.12753745 -0.1305960 1 4 1 ## 5: -0.9819522 -0.24545511 -0.7364971 1 5 1 ## 6: 0.3315022 0.67917206 -0.3476699 1 6 1 It can also be output as a list, which might be more useful for processing many iterations of a simulation. data &lt;- get_population_data(squid_data, list=TRUE) "],["1.10-parameter-list-summary.html", "1.10 Parameter list summary", " 1.10 Parameter list summary The parameters list contains one (or more) list for each hierarchical level that you want to simulate at. A residual list is always need, specifying variances/covariances for the residual. Additionally, the parameter list can also be provided with an intercept vector and interactions list. The simplest paramter list will look something like this: parameters=list( residual=list( vcov=... ) ) We can add more complexity by adding an intercept (if not specified, is assumed to be 0): parameters=list( intercept=c(...), residual=list( vcov=... ) ) and then simulate variables that vary at the observation level: parameters=list( intercept=c(...), observation=list( beta = ... ), residual=list( vcov = ... ) ) as well as variables that vary at the other levels, for example at the level of the individual: parameters=list( intercept=c(...), individual=list( names = c(...), beta = ... ), observation=list( names = c(...), beta = ... ), residual=list( vcov = ... ) ) Finally we can add in interactions: parameters=list( intercept=c(...), individual=list( names = c(...), beta = ... ), observation=list( names = c(...), beta = ... ), interactions=list( names = c(...), beta = ... ), residual=list( vcov = ... ) ) For each item in the parameter list (excluding intercept, interactions, and residual), the following can be specified: names Vector containing the names of predictors from this list that will be output. This doesn’t not have to be specified, unless the predictors at this level are included in interactions. By default, the names will be the name of the list (e.g. ‘individual’ in the example above), appended with _effect and a sequential number if there are multiple predictors. group Character string relates the level of variation back to the data_structure. Does not have to be specified and by default is the name of the list. mean Vector of means for the predictor variables. Defaults to 0. vcov Either a vector of variances, or a variance-covariance matrix, for the predictor variables. Defaults to identity matrix. vcorr Variance-correlation matrix, can be specified instead of vcov (it is ignored if both are specified). beta Vector (or matrix with multiple responses) of effect sizes/slopes. Defaults to 1. fixed Logical, indicating whether the effects for the levels are fixed or to be simulated. If TRUE, beta represents the fixed effects. Defaults to FALSE. covariate Logical, indicating whether the indexes in the data structure are to be used as a continuous variable rather than simulating one. Defaults to FALSE. functions Vector - transformation to be applied to the response variable. Defaults to ‘identity’. "],["2-hierarchical.html", "2 Hierarchical structure", " 2 Hierarchical structure There are two parts to simulating hierarchical data. First you need to have a hierarchical data structure and second you need parameters at each of the different hierarchical levels. The data structure is essentially a data.frame (or matrix), with all the grouping factors and their levels, as we would see in a typical dataset. Lets take the blue tit dataset we explored earlier: head(BTdata) ## tarsus back animal dam fosternest hatchdate sex ## 1 -1.89229718 1.1464212 R187142 R187557 F2102 -0.6874021 Fem ## 2 1.13610981 -0.7596521 R187154 R187559 F1902 -0.6874021 Male ## 3 0.98468946 0.1449373 R187341 R187568 A602 -0.4279814 Male ## 4 0.37900806 0.2555847 R046169 R187518 A1302 -1.4656641 Male ## 5 -0.07525299 -0.3006992 R046161 R187528 A2602 -1.4656641 Fem ## 6 -1.13519543 1.5577219 R187409 R187945 C2302 0.3502805 Fem Here animal, dam, fosternest and sex make up the data structure. In this Section, we will first demonstrate how to make a simple hierarchical structure using the make_structure function. simulate_population also allows pre-existing data structures to be incorporated into simulations. The remaining part of the section details how to simulate hierarchical data once you have a hierarchical data structure. "],["2.1-makestr.html", "2.1 Making a hierarchical structure", " 2.1 Making a hierarchical structure We can use the make_structure function to create nested and crossed hierarchical data structures. The make_structure function only produces balanced data structures, but these can be made unbalanced using by sampling, which is outlined in Section 7 2.1.1 Single Factor Simplest structure - one grouping factor with multiple observations. Here we create a structure with 2 repeated observations of 5 individuals (small number are used here simply for illustration purposes). The structure contains the name of the grouping factors and their sample sizes, and repeat_obs is the number of repeated observations. make_structure(structure=&quot;individual(5)&quot;, repeat_obs=2) ## individual ## 1 1 ## 2 1 ## 3 2 ## 4 2 ## 5 3 ## 6 3 ## 7 4 ## 8 4 ## 9 5 ## 10 5 2.1.2 Nested factors If we want to have nested factors, so different hierarchical groups, where levels of one group only exist in one higher group then we can use the / symbol in the structure argument. For example, here we have 2 sexes, each with 5 individuals, with 2 repeated measurements each. make_structure(structure=&quot;sex(2)/individual(5)&quot;, repeat_obs=2) ## sex individual ## 1 1 1 ## 2 1 1 ## 3 1 2 ## 4 1 2 ## 5 1 3 ## 6 1 3 ## 7 1 4 ## 8 1 4 ## 9 1 5 ## 10 1 5 ## 11 2 6 ## 12 2 6 ## 13 2 7 ## 14 2 7 ## 15 2 8 ## 16 2 8 ## 17 2 9 ## 18 2 9 ## 19 2 10 ## 20 2 10 Note that in the nesting, the sample size for the lower group now represents the number within each level of the higher, rather than the total sample size, so overall there is 10 individuals. We can nest as much as we want: make_structure(structure=&quot;species(2)/population(2)/individual(2)&quot;, repeat_obs=2) ## species population individual ## 1 1 1 1 ## 2 1 1 1 ## 3 1 1 2 ## 4 1 1 2 ## 5 1 2 3 ## 6 1 2 3 ## 7 1 2 4 ## 8 1 2 4 ## 9 2 3 5 ## 10 2 3 5 ## 11 2 3 6 ## 12 2 3 6 ## 13 2 4 7 ## 14 2 4 7 ## 15 2 4 8 ## 16 2 4 8 2.1.3 Crossed factors We can create completely crossed factors - every combination of levels exists - using the + symbol in the structure argument make_structure(structure=&quot;treatment(2) + individual(5)&quot;, repeat_obs=1) ## treatment individual ## 1 1 1 ## 2 1 2 ## 3 1 3 ## 4 1 4 ## 5 1 5 ## 6 2 1 ## 7 2 2 ## 8 2 3 ## 9 2 4 ## 10 2 5 We can combine crossed and nested structures: make_structure(structure=&quot;treatment(2) + sex(2)/individual(5)&quot;, repeat_obs=1) ## treatment sex individual ## 1 1 1 1 ## 2 1 1 2 ## 3 1 1 3 ## 4 1 1 4 ## 5 1 1 5 ## 6 1 2 6 ## 7 1 2 7 ## 8 1 2 8 ## 9 1 2 9 ## 10 1 2 10 ## 11 2 1 1 ## 12 2 1 2 ## 13 2 1 3 ## 14 2 1 4 ## 15 2 1 5 ## 16 2 2 6 ## 17 2 2 7 ## 18 2 2 8 ## 19 2 2 9 ## 20 2 2 10 We can also output the crossed and nested using : make_structure(structure=&quot;treatment(2) + individual(5) + treatment:individual&quot;, repeat_obs=1) ## treatment individual treatment:individual ## 1 1 1 1 ## 2 1 2 2 ## 3 1 3 3 ## 4 1 4 4 ## 5 1 5 5 ## 6 2 1 6 ## 7 2 2 7 ## 8 2 3 8 ## 9 2 4 9 ## 10 2 5 10 2.1.4 Temporal structure ds &lt;- make_structure(structure=&quot;year(2)/month(12)/day(30)&quot;, repeat_obs=1) head(ds) ## year month day ## 1 1 1 1 ## 2 1 1 2 ## 3 1 1 3 ## 4 1 1 4 ## 5 1 1 5 ## 6 1 1 6 ds &lt;- make_structure(structure=&quot;year(2) + month(12) + day(30) + year:month:day&quot;, repeat_obs=1) head(ds) ## year month day year:month:day ## 1 1 1 1 1 ## 2 1 1 2 2 ## 3 1 1 3 3 ## 4 1 1 4 4 ## 5 1 1 5 5 ## 6 1 1 6 6 "],["2.2-simulating-data-at-different-hierarchical-levels.html", "2.2 Simulating data at different hierarchical levels", " 2.2 Simulating data at different hierarchical levels We can simulate predictors at different hierarchical levels. Lets take the example of a situation where we have repeated measures of individuals. The individuals have traits that are consistently expressed, whilst the environment varies between observations. We can describe variation at these different hierarchical levels as: \\[ y = \\beta_0 + \\boldsymbol Z_j \\boldsymbol\\beta_z + \\boldsymbol X_i \\boldsymbol\\beta_x + \\epsilon_{i,j} \\] \\[ \\boldsymbol X \\sim MVN(\\mu_x,\\Sigma_x) \\] \\[ \\boldsymbol Z \\sim MVN(\\mu_z,\\Sigma_z) \\] \\[ \\epsilon \\sim N(0,\\sigma^2_\\epsilon) \\] where \\(Z\\) is a matrix of predictors at the individual level, and \\(X\\) is a matrix of predictors at the observation level. In order to simulate from this model, we need a data structure and parameters for each of these levels. To do this, we can either specify a data structure generated using make_structure (outlined in the previous section 2.1), or a pre-existing data structure, to the simulate_population function. We then add in a item to the parameter list, the name of which matches on of the grouping factors in the data structure, and specify the parameters for predictors that vary at that level in the same way as outlined in the previous section (1). squid_data &lt;- simulate_population( data_structure = make_structure(structure = &quot;individual(500)&quot;, repeat_obs=2), parameters = list( individual = list( names = c(&quot;size&quot;,&quot;behaviour&quot;,&quot;physiology&quot;), beta = c(0.1,0.3,0.2) ), observation = list( names=c(&quot;temperature&quot;,&quot;rainfall&quot;), beta = c(0.2,-0.1) ), residual = list( vcov = 0.5 ) ) ) data &lt;- get_population_data(squid_data) coef(lm(y ~ size + behaviour + physiology + temperature + rainfall , data)) ## (Intercept) size behaviour physiology temperature rainfall ## 0.04341343 0.10691685 0.29493441 0.21752938 0.21177249 -0.12458160 Here, we have simulated 5 predictors, ‘size’, ‘behaviour’ and ‘physiology’ that vary at the level of the individual, and ‘temperature’ and ‘rainfall’ that vary at the level of the observation. To keep things simple, we will simulate them all as unit normal variables (mean=0 and variance=1). Note, the names of the different grouping factors in the parameter list needs to exactly match those in the data structure. The order does not, however, have to be the same. There are circumstances in which we may want to simulate two sets of effects at the same hierarchical level (for example see permanent environment effects in Section 4.1), in this case we can call them different things in the parameter list, but link them back to the grouping factor, by providing a group name. For example the following will produce the same simulation as above: squid_data &lt;- simulate_population( data_structure = make_structure(structure = &quot;individual(500)&quot;, repeat_obs=2), parameters = list( ind1 = list( group=&quot;individual&quot;, names = c(&quot;size&quot;), beta = c(0.1) ), ind2 = list( group=&quot;individual&quot;, names = c(&quot;behaviour&quot;,&quot;physiology&quot;), beta = c(0.3,0.2) ), observation = list( names=c(&quot;temperature&quot;,&quot;rainfall&quot;), beta = c(0.2,-0.1) ), residual = list( vcov = 0.5 ) ) ) It is also worth noting that predictors do not have to be simulated for every grouping factor in the data structure. 2.2.1 Simulating ‘random effects’ In essence, random effects (random intercepts) are an unobserved/latent predictor (or group of predictors), which varies at a given hierarchical level. In a mixed effect model, the effect at each level of the grouping factor is unknown, and estimated by the model (and assumed to come from a normal distribution). When simulating this, however, we can simply simulate an additional predictor at a particular level (\\(z\\)) with mean 0 and a given variance (\\(\\sigma^2_z\\)). \\[ y_{i,j} = \\beta_0 + z_j + \\epsilon_{i,j} \\] \\[ z \\sim N(0,\\sigma^2_z) \\] \\[ \\epsilon \\sim N(0,\\sigma^2_\\epsilon) \\] For example we can simulate some between-individual variation as follows: squid_data &lt;- simulate_population( data_structure = make_structure(structure = &quot;individual(500)&quot;, repeat_obs=2), parameters = list( individual = list( vcov = 0.5 ), residual = list( vcov = 0.5 ) ) ) data &lt;- get_population_data(squid_data) head(data) ## y individual_effect residual individual squid_pop ## 1: -1.6777145 -0.9419815 -0.7357329 1 1 ## 2: -1.4025959 -0.9419815 -0.4606144 1 1 ## 3: 0.7206756 1.1249739 -0.4042984 2 1 ## 4: 1.3959790 1.1249739 0.2710051 2 1 ## 5: 2.1898493 1.3680272 0.8218221 3 1 ## 6: 1.4893575 1.3680272 0.1213303 3 1 library(lme4) short_summary &lt;- function(x) print(summary(x), correlation=FALSE, show.resids=FALSE, ranef.comp = c(&quot;Variance&quot;)) short_summary(lmer(y ~ 1 + (1|individual), data)) ## Linear mixed model fit by REML [&#39;lmerMod&#39;] ## Formula: y ~ 1 + (1 | individual) ## Data: data ## ## REML criterion at convergence: 2716.2 ## ## Random effects: ## Groups Name Variance ## individual (Intercept) 0.5334 ## Residual 0.4976 ## Number of obs: 1000, groups: individual, 500 ## ## Fixed effects: ## Estimate Std. Error t value ## (Intercept) -0.02974 0.03955 -0.752 Note that here we haven’t specified any variable names. In this case the simulated predictors are named by the grouping factors (e.g. individual_effects). 2.2.2 Incorporating existing data structures We could also use an existing data structure, taking the grouping factors and levels from an existing dataset and input them to simulate_population. To demonstrate this, we can use the blue tit dataset provided with the MCMCglmm package. This is a dataset with some continuous variables (tarsus, back (coloration) and hatchdate), and some grouping factors (animal, dam, fosternest and sex), the latter providing a data structure from which to simulate. library(MCMCglmm) data(BTdata) head(BTdata) ## tarsus back animal dam fosternest hatchdate sex ## 1 -1.89229718 1.1464212 R187142 R187557 F2102 -0.6874021 Fem ## 2 1.13610981 -0.7596521 R187154 R187559 F1902 -0.6874021 Male ## 3 0.98468946 0.1449373 R187341 R187568 A602 -0.4279814 Male ## 4 0.37900806 0.2555847 R046169 R187518 A1302 -1.4656641 Male ## 5 -0.07525299 -0.3006992 R046161 R187528 A2602 -1.4656641 Fem ## 6 -1.13519543 1.5577219 R187409 R187945 C2302 0.3502805 Fem squid_data &lt;- simulate_population( data_structure = BTdata[,c(&quot;dam&quot;,&quot;fosternest&quot;)], parameters = list( dam = list( vcov = 0.2 ), fosternest = list( vcov = 0.3 ), residual = list( vcov = 0.5 ) ) ) data &lt;- get_population_data(squid_data) data ## y dam_effect fosternest_effect residual dam fosternest ## 1: 1.1672894 0.65404906 0.1073194 0.405920979 R187557 F2102 ## 2: 1.8087669 0.98628579 0.2580972 0.564383881 R187559 F1902 ## 3: -1.0786592 0.28997300 -0.9376271 -0.431005023 R187568 A602 ## 4: 0.6095347 0.09568555 -0.0146496 0.528498768 R187518 A1302 ## 5: 0.7202249 0.22261742 -0.1549762 0.652583722 R187528 A2602 ## --- ## 824: -0.8136378 -0.43020131 0.2054801 -0.588916582 K983388 H1102 ## 825: -0.4140612 -0.13307324 0.1243798 -0.405367733 R186903 H702 ## 826: 0.7183663 0.59685279 0.9701100 -0.848596488 R187535 H502 ## 827: -0.6785256 0.20706809 -0.3019021 -0.583691581 R186911 H302 ## 828: -0.5661182 0.06113824 -0.6191307 -0.008125703 R187001 H102 ## squid_pop ## 1: 1 ## 2: 1 ## 3: 1 ## 4: 1 ## 5: 1 ## --- ## 824: 1 ## 825: 1 ## 826: 1 ## 827: 1 ## 828: 1 "],["2.3-factors.html", "2.3 Factors", " 2.3 Factors So far the simulated predictors have all been continuous, but we may want to simulate factors with known or fixed effects i.e. not drawn from a normal distribution. In this case we can specify fixed = TRUE for a particular level, and then give a beta for all the different levels of that group. Lets take the example of sex. Factors can be thought of as a hierarcihc First we can create a data structure using the squid_data &lt;- simulate_population( data_structure = make_structure(structure = &quot;sex(2)/individual(500)&quot;, repeat_obs=2), parameters = list( sex=list( fixed=TRUE, names=c(&quot;female&quot;,&quot;male&quot;), beta=c(-0.5,0.5) ), residual = list( vcov = 0.5 ) ) ) data &lt;- get_population_data(squid_data) boxplot( y ~ factor(sex), data) lm( y ~ factor(sex), data) ## ## Call: ## lm(formula = y ~ factor(sex), data = data) ## ## Coefficients: ## (Intercept) factor(sex)2 ## -0.4997 0.9561 2.3.1 Fixed Factor Interactions squid_data &lt;- simulate_population( data_structure = make_structure(structure = &quot;sex(2)/individual(500)&quot;, repeat_obs=2), parameters = list( sex=list( fixed=TRUE, names=c(&quot;female&quot;,&quot;male&quot;), beta=c(-0.5,0.5) ), observation= list( names = c(&quot;environment&quot;), beta =c(0.2) ), interactions = list( names=c(&quot;environment:male&quot;), beta = 0.2 ), residual = list( names=&quot;residual&quot;, vcov = 0.1 ) ) ) data &lt;- get_population_data(squid_data) head(data) ## y female male environment environment:male residual sex ## 1: -0.6007998 1 0 -0.874737200 0 0.07414769 1 ## 2: -0.2595129 1 0 -0.411796120 0 0.32284633 1 ## 3: -0.7276224 1 0 -0.007414494 0 -0.22613952 1 ## 4: -0.3374965 1 0 0.928201717 0 -0.02313686 1 ## 5: -0.2751921 1 0 -0.346524521 0 0.29411280 1 ## 6: -0.9509419 1 0 -0.375567231 0 -0.37582847 1 ## individual squid_pop ## 1: 1 1 ## 2: 1 1 ## 3: 2 1 ## 4: 2 1 ## 5: 3 1 ## 6: 3 1 plot(y~environment,data, pch=19, col=alpha(c(1,2),0.5)[factor(data$sex)]) lm( y ~ 0 + factor(sex)*environment, data) ## ## Call: ## lm(formula = y ~ 0 + factor(sex) * environment, data = data) ## ## Coefficients: ## factor(sex)1 factor(sex)2 environment ## -0.5003 0.5020 0.2070 ## factor(sex)2:environment ## 0.1828 "],["2.4-randomslopes.html", "2.4 Random slopes", " 2.4 Random slopes Random slopes are essentially an interaction between predictors at different levels, with the random slopes being an unobserved, latent variable. \\[ y_{i,j} = \\beta_0 + \\beta_1 x_{i,j} + z_{1,j} + z_{2,j}x_{i,j} + \\epsilon_{i,j} \\] \\[ Z \\sim MVN(0,\\Sigma_{z}) \\] \\[ \\epsilon \\sim N(0,\\sigma^2_\\epsilon) \\] We can specify random slopes by simulating a slopes variable at the individual level (ind_slope - \\(z_{2,j}\\)). We can specify the mean environmental effect the slope of the environmental variable (\\(beta_1\\)). \\(z_{2,j}\\) then represents the deviations from the mean slope (this is typically how it is modelling in a linear mixed effect model). Importantly the beta parameter associated with ind_slope is specified as 0 (there is no ‘main effect’ of the slopes, just the interaction), and the beta parameter associated with interaction is 1. squid_data &lt;- simulate_population( data_structure=make_structure(&quot;individual(300)&quot;,repeat_obs=10), parameters = list( individual = list( names = c(&quot;ind_int&quot;,&quot;ind_slope&quot;), beta = c(1,0), vcov = matrix(c(1,0.3,0.3,0.5),ncol=2,nrow=2) ), observation= list( names = c(&quot;environment&quot;), beta = c(0.2) ), residual = list( vcov = c(0.5) ), interactions = list( names = c(&quot;ind_slope:environment&quot;), beta = c(1) ) ) ) data &lt;- get_population_data(squid_data) short_summary(lmer(y ~ environment + (1+environment|individual),data)) ## Linear mixed model fit by REML [&#39;lmerMod&#39;] ## Formula: y ~ environment + (1 + environment | individual) ## Data: data ## ## REML criterion at convergence: 7970.9 ## ## Random effects: ## Groups Name Variance Corr ## individual (Intercept) 0.9701 ## environment 0.4749 0.47 ## Residual 0.5048 ## Number of obs: 3000, groups: individual, 300 ## ## Fixed effects: ## Estimate Std. Error t value ## (Intercept) 0.05907 0.05848 1.010 ## environment 0.25250 0.04243 5.951 "],["3-multivariate.html", "3 Multi-response Models", " 3 Multi-response Models We can simulate multiple response variables, that covary at different hierarchical levels. In the case of a simple random effects model, we can have a covariance matrix at each level, \\[ \\boldsymbol Y_{i,j} = \\boldsymbol\\beta_0 + \\boldsymbol Z_j + \\boldsymbol E_{i,j} \\] \\[ \\boldsymbol Z \\sim MVN(0,\\Sigma_z) \\] \\[ \\boldsymbol E \\sim MVN(0,\\Sigma_\\epsilon) \\] We can indicate that there are multiple phenotypes within the parameter list in two ways. First, we can use N_response in the parameter list, and specifying the covariance matrix (vcov) at each level. In this way we can simulate covariance at each level. squid_data &lt;- simulate_population( data_structure=make_structure(structure = &quot;individual(100)&quot;,repeat_obs=10), n_response = 2, parameters=list( individual = list( vcov = matrix(c(1,0.5,0.5,1),nrow=2,ncol=2) ), residual = list( vcov = matrix(c(1,0.5,0.5,1),nrow = 2,ncol = 2) ) ) ) data &lt;- get_population_data(squid_data) head(data) ## y1 y2 individual_effect1 individual_effect2 residual1 ## 1: -0.857847149 -1.21638414 0.08636768 0.4103425 -0.94421482 ## 2: 0.726287441 -0.71556857 0.08636768 0.4103425 0.63991977 ## 3: -1.018024610 0.56055439 0.08636768 0.4103425 -1.10439229 ## 4: -0.009472518 -0.05757495 0.08636768 0.4103425 -0.09584019 ## 5: 0.981587460 0.79402401 0.08636768 0.4103425 0.89521978 ## 6: 1.125120717 -1.06645131 0.08636768 0.4103425 1.03875304 ## residual2 individual squid_pop ## 1: -1.6267266 1 1 ## 2: -1.1259110 1 1 ## 3: 0.1502119 1 1 ## 4: -0.4679174 1 1 ## 5: 0.3836815 1 1 ## 6: -1.4767938 1 1 –&gt; Second, we can build up predictors at each level that drive this covariance. Here we make beta into a matrix (\\(B\\)), with predictors as rows, and responses as columns. \\[ \\boldsymbol Y_{i,j} = \\beta_0 + \\boldsymbol Z_j B_z + \\boldsymbol X_i \\boldsymbol B_x + \\boldsymbol E_{i,j} \\] \\[ \\boldsymbol X \\sim MVN(\\mu_x,\\Sigma_x) \\] \\[ \\boldsymbol Z \\sim MVN(\\mu_z,\\Sigma_z) \\] \\[ \\boldsymbol E \\sim N(0,\\Sigma_\\epsilon) \\] The formulation above (just random effects), can be simulated in a similar way with beta as an identity matrix (i.e. a predictor for each trait). squid_data &lt;- simulate_population( data_structure= make_structure(structure = &quot;individual(100)&quot;,repeat_obs=10), n_response=2, parameters=list( individual = list( vcov =matrix(c(1,0.5,0.5,1),nrow=2,ncol=2), beta= diag(2) ), residual = list( vcov =matrix(c(1,0.5,0.5,1),nrow=2,ncol=2), beta= diag(2) ) ) ) data &lt;- get_population_data(squid_data) head(data) ## y1 y2 individual_effect1 individual_effect2 residual1 ## 1: -1.74891438 -2.1139289 -0.5804581 0.4490371 -1.1684563 ## 2: 0.08005341 1.1922726 -0.5804581 0.4490371 0.6605115 ## 3: -0.64486517 -0.3979303 -0.5804581 0.4490371 -0.0644071 ## 4: 0.77839564 2.3116404 -0.5804581 0.4490371 1.3588537 ## 5: -1.99677350 0.5050226 -0.5804581 0.4490371 -1.4163154 ## 6: 0.07621987 0.9819676 -0.5804581 0.4490371 0.6566779 ## residual2 individual squid_pop ## 1: -2.56296604 1 1 ## 2: 0.74323553 1 1 ## 3: -0.84696742 1 1 ## 4: 1.86260330 1 1 ## 5: 0.05598549 1 1 ## 6: 0.53293046 1 1 # library(MCMCglmm) # mod &lt;- MCMCglmm(cbind(y1,y2)~1,random=~us(trait):individual, rcov=~us(trait):units,data=data,family=rep(&quot;gaussian&quot;,2),verbose=FALSE) # summary(mod) Alternatively, you could also create multivariate phenotypes being affected by the same predictors. Here we have two phenotypes, affected by three predictors, and so we can create a 3x2 matrix of betas beta &lt;- matrix(c( 0.5, 0.1, 0.2, 0.2, 0.3, 0.1 ),nrow=3,ncol=2) beta ## [,1] [,2] ## [1,] 0.5 0.2 ## [2,] 0.1 0.3 ## [3,] 0.2 0.1 squid_data &lt;- simulate_population( data_structure= make_structure(structure = &quot;individual(100)&quot;,repeat_obs=20), n_response=2, parameters= list( individual = list( vcov =matrix(c(1,0.5,0.5,1),nrow=2,ncol=2) ), observation = list( names = c(&quot;temperature&quot;, &quot;rainfall&quot;, &quot;wind&quot;), beta= beta ), residual = list( vcov= matrix(c(1,0.5,0.5,1),nrow=2,ncol=2) ) ) ) data &lt;- get_population_data(squid_data) head(data) ## y1 y2 individual_effect1 individual_effect2 temperature ## 1: 1.24622376 -1.03882552 0.1862144 0.1906359 0.71962103 ## 2: 0.21785908 1.46561443 0.1862144 0.1906359 -0.07003368 ## 3: 0.07338119 -0.07461367 0.1862144 0.1906359 1.98834337 ## 4: -0.75745533 -0.84563485 0.1862144 0.1906359 -0.11030529 ## 5: 0.48057850 1.43704013 0.1862144 0.1906359 0.99479274 ## 6: -0.20076484 1.08173471 0.1862144 0.1906359 -0.82391193 ## rainfall wind residual1 residual2 individual squid_pop ## 1: -0.8571022 2.21037292 0.3438345 -1.3372923 1 1 ## 2: 1.6368511 -2.02570663 0.3081177 1.0005006 1 1 ## 3: 0.3088027 -0.33142117 -1.0716009 -0.7224170 1 1 ## 4: 0.7154096 0.43254658 -1.0465674 -1.2720872 1 1 ## 5: 1.7213688 0.00592958 -0.3763551 0.5304421 1 1 ## 6: 1.2474664 0.22719252 -0.1452084 0.6589220 1 1 # library(MCMCglmm) # mod &lt;- MCMCglmm(cbind(y1,y2)~1,random=~us(trait):individual, rcov=~us(trait):units,data=data,family=rep(&quot;gaussian&quot;,2),verbose=FALSE) # summary(mod) squid_data &lt;- simulate_population( data_structure= make_structure(structure = &quot;individual(100)&quot;,repeat_obs=20), n_response=2, parameters= list( individual = list( vcov =matrix(c(1,0.5,0.5,1),nrow=2,ncol=2) ), observation = list( names = c(&quot;temperature&quot;, &quot;rainfall&quot;, &quot;wind&quot;), beta= beta ), interactions = list( names = c(&quot;temperature:rainfall&quot;), beta=matrix(c(0.1,-0.3),ncol=2) ), residual = list( vcov= matrix(c(1,0.5,0.5,1),nrow=2,ncol=2) ) ) ) data &lt;- get_population_data(squid_data) head(data) ## y1 y2 individual_effect1 individual_effect2 temperature ## 1: -1.9937338 -0.8919817 -1.006534 0.4411749 -0.8573832 ## 2: 1.6246837 1.5495752 -1.006534 0.4411749 0.1382291 ## 3: -0.4065667 0.8145373 -1.006534 0.4411749 1.4472081 ## 4: -1.5435979 -0.1437786 -1.006534 0.4411749 0.9243052 ## 5: 0.4484037 0.4450512 -1.006534 0.4411749 0.9669904 ## 6: -1.4697709 -0.6031954 -1.006534 0.4411749 1.1058406 ## rainfall wind temperature:rainfall residual1 residual2 individual ## 1: -0.8670303 0.2363232 0.7433773 -0.5934078 -0.70219002 1 ## 2: -0.9480822 -0.5128130 -0.1310525 2.7725789 1.37714470 1 ## 3: -0.1450831 0.1443582 -0.2099655 -0.1170038 0.05002026 1 ## 4: -0.3264703 0.5306708 -0.3017582 -1.0425281 -0.81546798 1 ## 5: 1.6543508 0.2998513 1.5997413 0.5860628 -0.23588978 1 ## 6: 0.4311318 -0.2681556 0.4767631 -1.0533158 -1.22503348 1 ## squid_pop ## 1: 1 ## 2: 1 ## 3: 1 ## 4: 1 ## 5: 1 ## 6: 1 # library(MCMCglmm) # mod &lt;- MCMCglmm(cbind(y1,y2)~1,random=~us(trait):individual, rcov=~us(trait):units,data=data,family=rep(&quot;gaussian&quot;,2),verbose=FALSE) # summary(mod) "],["3.1-one-response-repeatedly-measured-the-other-not.html", "3.1 One response repeatedly measured, the other not", " 3.1 One response repeatedly measured, the other not set the beta values for the trait that is unmeasured at a particular level to 0 The other way to do this is through sampling (link and example needed) individual &lt;- list( vcov = matrix(c( 1,0.5, 0.5,1 ),nrow=2,ncol=2) ) residual &lt;- list( vcov = matrix(c( 1,0.5, 0.5,1 ),nrow = 2,ncol = 2), beta = matrix(c( 1,0, 0,0 ),nrow = 2,ncol = 2) ) squid_data &lt;- simulate_population( data_structure= make_structure(structure = &quot;individual(100)&quot;,repeat_obs=20), n_response = 2, parameters=list(individual = individual, residual = residual) ) data &lt;- get_population_data(squid_data) "],["3.2-different-distributions.html", "3.2 Different distributions", " 3.2 Different distributions individual &lt;- list( vcov = matrix(c( 1,0.5, 0.5,1 ),nrow=2,ncol=2) ) residual &lt;- list( vcov = matrix(c( 1,0.5, 0.5,1 ),nrow = 2,ncol = 2), beta = matrix(c( 1,0, 0,0 ),nrow = 2,ncol = 2) ) squid_data &lt;- simulate_population( data_structure= make_structure(structure = &quot;individual(100)&quot;,repeat_obs=20), n_response = 2, parameters=list(individual = individual, residual = residual), family=c(&quot;gaussian&quot;,&quot;binomial&quot;), link=c(&quot;identity&quot;,&quot;logit&quot;) ) data &lt;- get_population_data(squid_data) head(data,20) ## y1 y2 individual_effect1 individual_effect2 residual1 ## 1: 1.23126677 1 0.2347387 0.9475926 0.99652805 ## 2: -1.80244164 1 0.2347387 0.9475926 -2.03718036 ## 3: -1.25802610 1 0.2347387 0.9475926 -1.49276483 ## 4: -1.18612244 1 0.2347387 0.9475926 -1.42086116 ## 5: 1.94650966 1 0.2347387 0.9475926 1.71177094 ## 6: 0.15889961 0 0.2347387 0.9475926 -0.07583911 ## 7: 1.03383581 1 0.2347387 0.9475926 0.79909709 ## 8: 0.75180215 1 0.2347387 0.9475926 0.51706343 ## 9: 0.51678711 1 0.2347387 0.9475926 0.28204839 ## 10: 0.58342781 1 0.2347387 0.9475926 0.34868909 ## 11: 0.01111241 0 0.2347387 0.9475926 -0.22362631 ## 12: -1.07212634 1 0.2347387 0.9475926 -1.30686506 ## 13: -0.71441283 1 0.2347387 0.9475926 -0.94915155 ## 14: -0.83987960 1 0.2347387 0.9475926 -1.07461832 ## 15: -0.69930078 1 0.2347387 0.9475926 -0.93403950 ## 16: -0.46673970 1 0.2347387 0.9475926 -0.70147842 ## 17: 0.13063885 1 0.2347387 0.9475926 -0.10409987 ## 18: 1.61552572 0 0.2347387 0.9475926 1.38078699 ## 19: 0.98104030 0 0.2347387 0.9475926 0.74630158 ## 20: 1.15923884 0 0.2347387 0.9475926 0.92450011 ## residual2 individual squid_pop ## 1: -0.68617969 1 1 ## 2: -0.96509531 1 1 ## 3: -1.16821840 1 1 ## 4: 0.01592834 1 1 ## 5: 1.81567065 1 1 ## 6: -1.22729093 1 1 ## 7: -0.12795914 1 1 ## 8: -0.33518018 1 1 ## 9: 0.11774889 1 1 ## 10: -0.67022058 1 1 ## 11: 0.27859134 1 1 ## 12: -0.27576276 1 1 ## 13: -0.53456776 1 1 ## 14: -1.04830750 1 1 ## 15: -2.36113407 1 1 ## 16: -0.60293001 1 1 ## 17: -0.77330349 1 1 ## 18: 1.24392596 1 1 ## 19: 0.58621860 1 1 ## 20: 0.25524084 1 1 data &lt;- get_population_data(squid_data) "],["3.3-multivariate-random-slopes.html", "3.3 Multivariate Random Slopes", " 3.3 Multivariate Random Slopes Before reading this it is worth checking out how to simulate univariate random slopes in Section 2.4. individual &lt;- list( names = c(&quot;ind_int1&quot;,&quot;ind_slope1&quot;,&quot;ind_int2&quot;,&quot;ind_slope2&quot;), vcov = matrix(c( 1, 0.5, 0, 0, 0.5, 1, 0, 0, 0, 0, 1, 0.2, 0, 0, 0.2, 1 ),nrow=4,ncol=4, byrow=TRUE), beta = matrix(c( 1, 0, 1, 0, 0, 1, 0, 1 ),nrow = 4,ncol = 2, byrow=TRUE) ) observation &lt;- list( names=&quot;environment&quot;, beta=matrix(c(0.5,-0.3), ncol=2) ) residual &lt;- list( vcov = matrix(c( 1,0.5, 0.5,1 ),nrow = 2,ncol = 2) ) interactions &lt;- list( names=c(&quot;ind_slope1:environment&quot;,&quot;ind_slope2:environment&quot;), beta= matrix(c( 1,0, 0,1 ), ncol=2) ) squid_data &lt;- simulate_population( data_structure = make_structure(structure = &quot;individual(100)&quot;,repeat_obs=20), n_response = 2, parameters=list( individual = individual, observation = observation, residual = residual, interactions = interactions ) ) data &lt;- get_population_data(squid_data) head(data,20) ## y1 y2 ind_int1 ind_slope1 ind_int2 ind_slope2 ## 1: 1.251100615 -0.08321626 0.3676745 -0.1764346 -0.2411113 -1.145533 ## 2: 0.321033745 -1.19551382 0.3676745 -0.1764346 -0.2411113 -1.145533 ## 3: 1.690665184 -0.90768818 0.3676745 -0.1764346 -0.2411113 -1.145533 ## 4: 0.021882298 -1.47137256 0.3676745 -0.1764346 -0.2411113 -1.145533 ## 5: 1.070535648 -3.50159110 0.3676745 -0.1764346 -0.2411113 -1.145533 ## 6: 0.415639539 -2.95241950 0.3676745 -0.1764346 -0.2411113 -1.145533 ## 7: 0.069116142 -1.64690383 0.3676745 -0.1764346 -0.2411113 -1.145533 ## 8: 0.895390214 1.74907774 0.3676745 -0.1764346 -0.2411113 -1.145533 ## 9: 1.213832043 -5.19365898 0.3676745 -0.1764346 -0.2411113 -1.145533 ## 10: -1.719112536 -0.94348434 0.3676745 -0.1764346 -0.2411113 -1.145533 ## 11: -0.923433118 -4.05942188 0.3676745 -0.1764346 -0.2411113 -1.145533 ## 12: -0.003724258 -4.13401387 0.3676745 -0.1764346 -0.2411113 -1.145533 ## 13: -0.876274955 -0.81741626 0.3676745 -0.1764346 -0.2411113 -1.145533 ## 14: 0.193340330 -2.05922829 0.3676745 -0.1764346 -0.2411113 -1.145533 ## 15: 0.729196110 -4.26794215 0.3676745 -0.1764346 -0.2411113 -1.145533 ## 16: -0.195708033 -1.79008810 0.3676745 -0.1764346 -0.2411113 -1.145533 ## 17: -1.191515479 2.44335287 0.3676745 -0.1764346 -0.2411113 -1.145533 ## 18: 0.852095864 -2.08959322 0.3676745 -0.1764346 -0.2411113 -1.145533 ## 19: -0.892090565 -3.82690435 0.3676745 -0.1764346 -0.2411113 -1.145533 ## 20: -0.293934545 -1.05010613 0.3676745 -0.1764346 -0.2411113 -1.145533 ## environment residual1 residual2 ind_slope1:environment ## 1: -1.484800888 1.54029097 -0.84290078 0.261970180 ## 2: -0.618259939 0.32984139 -0.70258464 0.109082415 ## 3: 0.209817000 1.43153574 0.78225371 -0.037018968 ## 4: -0.128215936 -0.12787137 -0.27006850 0.022621721 ## 5: 0.578591009 0.69208368 -1.27857414 -0.102083446 ## 6: 0.847509998 -0.04982532 -0.34067122 -0.149530047 ## 7: 0.210160214 -0.19012435 0.04353418 -0.037079523 ## 8: -1.296350742 1.12360461 1.26180416 0.228721063 ## 9: 2.281847405 0.28426515 -0.50852836 -0.402596725 ## 10: -1.374986246 -1.46545441 -1.54442815 0.242595083 ## 11: 1.253631507 -1.52030487 -0.86061147 -0.221183914 ## 12: 1.604415913 -0.71409772 -0.42813296 -0.283074403 ## 13: -0.772363606 -0.81760469 -0.54724904 0.136271627 ## 14: -0.416633929 0.13690876 -1.27484202 0.073508621 ## 15: 2.321678973 -0.21325890 0.47476632 -0.409624390 ## 16: 0.811221990 -0.64943135 0.76920466 -0.143127589 ## 17: -1.874809651 -0.77613177 1.11989774 0.330781201 ## 18: 0.627235197 0.45790432 0.20374052 -0.110665961 ## 19: -0.005740061 -1.08147319 -2.44855735 0.001012745 ## 20: -0.062177564 -0.46505595 0.24665858 0.010970271 ## ind_slope2:environment individual squid_pop ## 1: 1.70088870 1 1 ## 2: 0.70823728 1 1 ## 3: -0.24035234 1 1 ## 4: 0.14687561 1 1 ## 5: -0.66279521 1 1 ## 6: -0.97085083 1 1 ## 7: -0.24074550 1 1 ## 8: 1.48501281 1 1 ## 9: -2.61393194 1 1 ## 10: 1.57509239 1 1 ## 11: -1.43607650 1 1 ## 12: -1.83791168 1 1 ## 13: 0.88476815 1 1 ## 14: 0.47726800 1 1 ## 15: -2.65956033 1 1 ## 16: -0.92928172 1 1 ## 17: 2.14765669 1 1 ## 18: -0.71851874 1 1 ## 19: 0.00657543 1 1 ## 20: 0.07122646 1 1 data &lt;- get_population_data(squid_data) "],["4-animal.html", "4 Genetic effects", " 4 Genetic effects This vignette assumes that you are generally happy with how the sim_population() function works. "],["4.1-va.html", "4.1 Additive genetics effects", " 4.1 Additive genetics effects In order to simulate breeding values (additive genetic effects), we can provide the simulate_population() function with the relatedness structure in the population. The simplest way to do this is providing a pedigree using the the pedigree argument (a genetic relatedness matrix could also be given to the cov_str argument). The input to this argument needs to be a list, and the name of the pedigree in the list links it with the item in the parameter list. When simulating breeding values, all individuals in pedigree need to be in the data_structure and vice versa. Having unsampled individuals (for example the base population) can be achieved in the sampling stage (not implemented yet). Lets start by importing a pedigree library(MCMCglmm) data(BTped) head(BTped) ## animal dam sire ## 1 R187557 &lt;NA&gt; &lt;NA&gt; ## 2 R187559 &lt;NA&gt; &lt;NA&gt; ## 3 R187568 &lt;NA&gt; &lt;NA&gt; ## 4 R187518 &lt;NA&gt; &lt;NA&gt; ## 5 R187528 &lt;NA&gt; &lt;NA&gt; ## 6 R187945 &lt;NA&gt; &lt;NA&gt; We can use this pedigree as a data_structure squid_data &lt;- simulate_population( data_structure = BTped, pedigree = list(animal=BTped), parameters =list( animal = list( vcov = 0.2 ), residual = list( vcov = 0.5 ) ) ) data &lt;- get_population_data(squid_data) head(data) ## y animal_effect residual animal dam sire squid_pop ## 1: 0.1408629 0.18759363 -0.04673068 R187557 &lt;NA&gt; &lt;NA&gt; 1 ## 2: -1.4145434 -0.17231178 -1.24223167 R187559 &lt;NA&gt; &lt;NA&gt; 1 ## 3: -0.9708503 -0.50123352 -0.46961675 R187568 &lt;NA&gt; &lt;NA&gt; 1 ## 4: -0.7059491 -0.13719967 -0.56874946 R187518 &lt;NA&gt; &lt;NA&gt; 1 ## 5: -1.2008420 -0.92193408 -0.27890794 R187528 &lt;NA&gt; &lt;NA&gt; 1 ## 6: -0.6783558 0.07772013 -0.75607594 R187945 &lt;NA&gt; &lt;NA&gt; 1 # Ainv&lt;-inverseA(BTped)$Ainv # mod &lt;- MCMCglmm(y~1, random=~ animal,data=data,ginverse=list(animal=Ainv),verbose=FALSE) # summary(mod) We might want to simulate repeated measurements to allow estimation of permanent environment effects. This is where being able to have something in the parameter list with a different name to the grouping factor is useful. In this way permanent environmental and additive genetic effects can be simulated in different parts of the parameter list, and linked to the same part of the data_structure. ## make data structure with two observations per individual ds &lt;- data.frame(individual=rep(BTped[,1], 2)) squid_data &lt;- simulate_population( data_structure = ds, pedigree=list(animal=BTped), parameters = list( individual = list( vcov = 0.3 ), animal = list( group=&quot;individual&quot;, vcov = 0.2 ), residual = list( vcov = 0.5 ) ) ) data &lt;- get_population_data(squid_data) head(data) ## y individual_effect animal_effect residual individual squid_pop ## 1: 1.1726587 0.71827348 0.483968305 -0.02958304 R187557 1 ## 2: 1.4027857 0.31345580 -0.247213444 1.33654338 R187559 1 ## 3: -1.1043061 0.27120457 -0.248661996 -1.12684872 R187568 1 ## 4: 0.8255693 0.06146464 0.185600959 0.57850366 R187518 1 ## 5: -0.5874701 -0.66204624 0.003023518 0.07155263 R187528 1 ## 6: -2.5998148 -0.50605207 -1.015211391 -1.07855130 R187945 1 # Ainv&lt;-inverseA(BTped)$Ainv # data$animal_id &lt;- data$individual # mod &lt;- MCMCglmm(y~1, random=~ individual + animal_id,data=data,ginverse=list(animal_id=Ainv),verbose=FALSE) # summary(mod) "],["4.2-multivariate-genetic-effects.html", "4.2 Multivariate genetic effects", " 4.2 Multivariate genetic effects We can simulate genetic effects affecting multiple phenotypes and the covariance between them, by specifying the number of response variables, and a covariance matrix, instead of only a variance. squid_data &lt;- simulate_population( data_structure = BTped, pedigree = list(animal = BTped), n_response=2, parameters = list( animal = list( vcov = diag(2) ), residual = list( vcov = diag(2) ) ) ) data &lt;- get_population_data(squid_data) head(data) ## y1 y2 animal_effect1 animal_effect2 residual1 residual2 ## 1: -1.0041511 -1.0682369 -1.8688863 -0.4341758 0.8647351 -0.6340612 ## 2: 0.4345338 1.5004907 0.8591029 0.3019427 -0.4245691 1.1985481 ## 3: 2.1671894 1.4252700 1.1645133 -1.4609371 1.0026761 2.8862071 ## 4: -0.5225477 0.9487797 -0.2563262 1.4625563 -0.2662215 -0.5137766 ## 5: 0.7410148 -1.0330190 1.2406837 0.1668495 -0.4996689 -1.1998685 ## 6: 0.8597063 1.4691817 1.5911279 0.1944140 -0.7314216 1.2747678 ## animal dam sire squid_pop ## 1: R187557 &lt;NA&gt; &lt;NA&gt; 1 ## 2: R187559 &lt;NA&gt; &lt;NA&gt; 1 ## 3: R187568 &lt;NA&gt; &lt;NA&gt; 1 ## 4: R187518 &lt;NA&gt; &lt;NA&gt; 1 ## 5: R187528 &lt;NA&gt; &lt;NA&gt; 1 ## 6: R187945 &lt;NA&gt; &lt;NA&gt; 1 # Ainv&lt;-inverseA(BTped)$Ainv # mod &lt;- MCMCglmm(cbind(y1,y2)~1,random=~us(trait):animal, rcov=~us(trait):units,data=data,family=rep(&quot;gaussian&quot;,2),verbose=FALSE,ginverse=list(animal=Ainv)) # summary(mod) "],["4.3-sex-specific-genetic-variance-and-inter-sexual-genetic-correlations.html", "4.3 Sex specific genetic variance and inter-sexual genetic correlations", " 4.3 Sex specific genetic variance and inter-sexual genetic correlations ds &lt;- data.frame(animal=BTped[,&quot;animal&quot;],sex=sample(c(&quot;Female&quot;,&quot;Male&quot;),nrow(BTped), replace=TRUE)) squid_data &lt;- simulate_population( parameters = list( sex=list( fixed=TRUE, names=c(&quot;female&quot;,&quot;male&quot;), beta=c(-0.5,0.5) ), animal= list( names = c(&quot;G_female&quot;,&quot;G_male&quot;), vcov =matrix(c(0.1,-0.1,-0.1,0.4), nrow=2, ncol=2 ) ), residual = list( names=&quot;residual&quot;, vcov = 0.1 ) ), data_structure = ds, pedigree = list(animal=BTped), model = &quot;y = female + male + I(female)*G_female + I(male)*G_male + residual&quot; ) data &lt;- get_population_data(squid_data) head(data) ## intercept y female male G_female G_male residual animal ## 1: 0 -0.9336040 1 0 0.05924150 0.2335180 -0.4928455 R187557 ## 2: 0 1.7286799 0 1 -1.01574952 0.9183649 0.3103150 R187559 ## 3: 0 -1.1554429 1 0 -0.30677496 0.4380414 -0.3486680 R187568 ## 4: 0 0.4142330 1 0 0.76309143 -0.5875831 0.1511416 R187518 ## 5: 0 0.7402681 0 1 -0.07007911 0.4170136 -0.1767454 R187528 ## 6: 0 -0.4045501 1 0 0.23932004 -1.2377542 -0.1438701 R187945 ## sex squid_pop ## 1: Female 1 ## 2: Male 1 ## 3: Female 1 ## 4: Female 1 ## 5: Male 1 ## 6: Female 1 par(mfrow=c(1,2)) boxplot(y~factor(sex),data) plot(G_female~G_male,data) "],["4.4-gxe.html", "4.4 GxE", " 4.4 GxE squid_data &lt;- simulate_population( parameters = list( animal = list( names = c(&quot;G_int&quot;,&quot;G_slope&quot;), mean =c(0,0.2), vcov =matrix(c(1,0.3,0.3,0.5),ncol=2,nrow=2) ), observation= list( names = c(&quot;environment&quot;), vcov =c(1) ), residual = list( names = c(&quot;residual&quot;), vcov =c(0.5) ) ), data_structure=rbind(BTped,BTped,BTped,BTped,BTped), pedigree = list(animal=BTped), model=&quot;y = G_int + G_slope * environment + residual&quot; ) data &lt;- get_population_data(squid_data) library(lme4) short_summary &lt;- function(x) print(summary(x), correlation=FALSE, show.resids=FALSE, ranef.comp = c(&quot;Variance&quot;)) short_summary(lmer(y ~ environment + (1+environment|animal),data)) ## Linear mixed model fit by REML [&#39;lmerMod&#39;] ## Formula: y ~ environment + (1 + environment | animal) ## Data: data ## ## REML criterion at convergence: 15122.6 ## ## Random effects: ## Groups Name Variance Corr ## animal (Intercept) 1.0274 ## environment 0.4765 0.44 ## Residual 0.5115 ## Number of obs: 5200, groups: animal, 1040 ## ## Fixed effects: ## Estimate Std. Error t value ## (Intercept) 0.01543 0.03331 0.463 ## environment 0.19493 0.02506 7.777 "],["4.5-indirect-genetic-effects.html", "4.5 Indirect Genetic Effects", " 4.5 Indirect Genetic Effects Indirect genetic effects are a bit more difficult to code.Lets take the example of maternal genetic effects. The maternal genetic effect that affects an individual’s phenotype, is that of its mother, not itself. Here we can use [] to index the levels of the random effects within the formula. This means that we can simulate the direct genetic and maternal genetic effects that an individual has (and the covariance between them), as well as generating an individual’s phenotype from its own direct genetic effects, and its mother’s maternal genetic effect. squid_data &lt;- simulate_population( parameters=list( animal = list( names=c(&quot;direct&quot;,&quot;maternal&quot;), vcov = matrix(c(1,0.3,0.3,0.5),2,2) ), residual = list( names=&quot;residual&quot;, vcov = 0.5 ) ), data_structure=BTped, pedigree=list(animal=BTped), model = &quot;y = direct + maternal[dam] + residual&quot; ) data &lt;- get_population_data(squid_data) head(data) ## intercept y direct maternal residual animal dam sire squid_pop ## 1: 0 NA 0.9775614 0.3973414 -0.44727491 R187557 &lt;NA&gt; &lt;NA&gt; 1 ## 2: 0 NA -0.3865421 -0.7894429 0.08105887 R187559 &lt;NA&gt; &lt;NA&gt; 1 ## 3: 0 NA -1.2738258 -0.8837323 -1.12222958 R187568 &lt;NA&gt; &lt;NA&gt; 1 ## 4: 0 NA 1.8690869 -0.1561064 -0.46703524 R187518 &lt;NA&gt; &lt;NA&gt; 1 ## 5: 0 NA -1.1896121 0.1512157 0.26023475 R187528 &lt;NA&gt; &lt;NA&gt; 1 ## 6: 0 NA -0.1136479 -0.3258738 0.46057431 R187945 &lt;NA&gt; &lt;NA&gt; 1 "],["4.6-dominance.html", "4.6 Dominance", " 4.6 Dominance Here we can make use of the dominance relatedness matrices that can be generated in the nadiv package NOTE: not working fully yet!!! library(nadiv) D &lt;- makeD(BTped,invertD = FALSE, returnA = FALSE, det=FALSE)$D ## starting to make D....done ds &lt;- data.frame(animal=BTped[,&quot;animal&quot;],animal2=BTped[,&quot;animal&quot;]) squid_data &lt;- simulate_population( parameters=list( animal = list( vcov = 0.3 ), animal2 = list( vcov = 0.2 ), residual = list( vcov = 0.5 ) ), data_structure=ds, pedigree=list(animal=BTped), cov_str=list(animal2=D) ) data &lt;- get_population_data(squid_data) head(data) ## y animal_effect animal2_effect residual animal animal2 squid_pop ## 1: 0.6651706 0.305011760 -0.12201184 0.4821707 R187557 R187557 1 ## 2: 0.9147188 0.341896991 0.09144875 0.4813730 R187559 R187559 1 ## 3: 2.9823265 0.004309875 0.62703255 2.3509841 R187568 R187568 1 ## 4: -1.1815955 -0.348235357 -0.23650717 -0.5968530 R187518 R187518 1 ## 5: 1.2711007 0.232879851 -0.30527420 1.3434951 R187528 R187528 1 ## 6: -0.7735268 -0.121949572 0.30411041 -0.9556876 R187945 R187945 1 "],["4.7-inbreeding-depression.html", "4.7 Inbreeding depression", " 4.7 Inbreeding depression Coming soon… "],["4.8-genetic-groups.html", "4.8 Genetic Groups", " 4.8 Genetic Groups Coming soon… "],["5-phylogenetic.html", "5 Phylogenetic Effects ", " 5 Phylogenetic Effects "],["5.1-brownian-motion.html", "5.1 Brownian motion", " 5.1 Brownian motion library(ape) data(bird.families) squid_dat &lt;- simulate_population( data_structure=data.frame(taxon=bird.families$tip.label), parameters=list( taxon=list( vcov=1 ), residual=list( vcov=1 ) ), phylogeny=list(taxon=bird.families) ) pop_dat &lt;- get_population_data(squid_dat) var(pop_dat$taxon_effect) ## [1] 1.135483 library(MCMCglmm) Ainv&lt;-inverseA(bird.families)$Ainv prior&lt;-list( R=list(V=1, nu=0.002), G=list(G1=list(V=1, nu=0.002))) model2&lt;-MCMCglmm(y~1, random=~taxon, ginverse=list(taxon=Ainv), data=pop_dat, prior=prior, verbose=FALSE, nitt=13000, burnin=3000, thin=10) summary(model2) ## ## Iterations = 3001:12991 ## Thinning interval = 10 ## Sample size = 1000 ## ## DIC: 492.3177 ## ## G-structure: ~taxon ## ## post.mean l-95% CI u-95% CI eff.samp ## taxon 0.02692 0.0002335 0.1185 55.97 ## ## R-structure: ~units ## ## post.mean l-95% CI u-95% CI eff.samp ## units 2.087 1.642 2.577 912.1 ## ## Location effects: y ~ 1 ## ## post.mean l-95% CI u-95% CI eff.samp pMCMC ## (Intercept) 0.03224 -0.21330 0.32140 1000 0.822 "],["5.2-ornsteinuhlenbeck-process.html", "5.2 Ornstein–Uhlenbeck Process", " 5.2 Ornstein–Uhlenbeck Process Coming Soon :D "],["6-temporal-and-spatial-effects.html", "6 Temporal and Spatial Effects ", " 6 Temporal and Spatial Effects "],["6.1-simple-temporal-effects.html", "6.1 Simple Temporal Effects", " 6.1 Simple Temporal Effects We might have measured a variable over the course of a certain time period (e.g. 20 years). We might expect that there is stochastic year-to-year variation, which we can simulate already. However we might also want to simulate patterns in that temporal data. We can treat the levels associated with a particular grouping factor (e.g. year) as both a factor and continuous. To treat a grouping factor as continuous, we use covariate=TRUE in the parameter list. In this way we can simulate a linear effect of year: squid_data &lt;- simulate_population( data_structure= make_structure(structure = &quot;year(20) + sex(2)/individual(50)&quot;,repeat_obs=20), parameters=list( year_cont = list( group=&quot;year&quot;, names= &quot;year_cont&quot;, covariate=TRUE, beta=0.3 ), year = list( vcov = 0.8 ), residual=list( vcov = 1 ) ) ) note we have specified group in the parameter list. This enables us to link a set of parameters to the grouping factor in the data structure. This doesn’t have to be specified and defaults to the name of the list item. data &lt;- get_population_data(squid_data) head(data) ## y year_cont year_effect residual year sex individual squid_pop ## 1: 0.50697256 1 -0.490787 0.69775958 1 1 1 1 ## 2: -0.15318608 1 -0.490787 0.03760093 1 1 1 1 ## 3: -0.03179253 1 -0.490787 0.15899448 1 1 1 1 ## 4: 0.66940022 1 -0.490787 0.86018723 1 1 1 1 ## 5: -0.08174843 1 -0.490787 0.10903858 1 1 1 1 ## 6: 0.93317181 1 -0.490787 1.12395882 1 1 1 1 plot(y ~ year_cont, data) Here we can see there is within year variation, year to year variation, as well as a linear directional year effect. lmer(y ~ year_cont + (1|year), data) ## Linear mixed model fit by REML [&#39;lmerMod&#39;] ## Formula: y ~ year_cont + (1 | year) ## Data: data ## REML criterion at convergence: 113874.8 ## Random effects: ## Groups Name Std.Dev. ## year (Intercept) 0.7215 ## Residual 1.0027 ## Number of obs: 40000, groups: year, 20 ## Fixed Effects: ## (Intercept) year_cont ## -0.7832 0.3263 In a similar way we can also simulate a quadratic effect of time. squid_data &lt;- simulate_population( data_structure = make_structure(structure = &quot;year(20) + sex(2)/individual(50)&quot;,repeat_obs=20), parameters=list( year_cont = list( group=&quot;year&quot;, names= c(&quot;year_cont&quot;), covariate=TRUE, beta=c(0.3) ), interactions=list( names= c(&quot;year_cont:year_cont&quot;), beta=c(-0.05) ), year = list( vcov = 1 ), residual=list( vcov = 0.8 ) ) ) data &lt;- get_population_data(squid_data) plot(y~year_cont,data) "],["6.2-cyclical-temporal-effects.html", "6.2 Cyclical Temporal Effects", " 6.2 Cyclical Temporal Effects squidR uses the sinusoidal equation to implement cyclical temporal effects \\[ y = A sin(B(x - C)) + D \\] where A is the amplitude, \\(B/2\\pi\\) is the period \\(C/B\\) is the horizontal shift and D is the vertical shift. We can visualise this time &lt;- 1:20 amplitude &lt;- 10 # |A| = the amplitude period &lt;- 10 h_shift &lt;- 3 v_shift &lt;- 5 B &lt;- (2*pi) / abs(period) # 2pi/|B| = the period cyclic_effect &lt;- amplitude*sin(B*time - B^2*h_shift ) + v_shift plot(cyclic_effect~time) We can include this complexity into the model part of the simulate_population, adding the extra parameters for the cyclical effects into the year_cont part of the list. squid_data &lt;- simulate_population( parameters=list( year_cont = list( group=&quot;year&quot;, names= &quot;linear_effect&quot;, covariate=TRUE, beta=0.3, amplitude = 2, # |A| = the amplitude period = 10, h_shift = 3, v_shift = 5 ), year = list( vcov = 1.2 ), residual=list( vcov = 1 ) ), data_structure= make_structure(structure = &quot;year(20) + sex(2)/individual(50)&quot;,N=1000), model=&quot; B =(2*pi) / abs(period); cyclic_effect = amplitude*sin(B*I(linear_effect) - B^2*h_shift ) + v_shift; y = linear_effect + cyclic_effect + year_effect + residual&quot; ) data &lt;- get_population_data(squid_data) plot(y~year,data) "],["6.3-temporalauto.html", "6.3 Temporal Autocorrelation", " 6.3 Temporal Autocorrelation "],["6.4-spatialauto.html", "6.4 Spatial Autocorrelation", " 6.4 Spatial Autocorrelation "],["7-sampling.html", "7 Sampling", " 7 Sampling To create different sampling schemes, we can use the sample arguments in the simulate_population() function, for example: sample_type = &quot;nested&quot;, sample_param = cbind(individual=c(10, 15),observation=c(10, 5)), There are three different types of sampling ‘nested’, ‘missing’ and ‘temporal’, each of which are outlined below. The sample arguments create different datasets for each population that has been simulated, and you can then use the function get_sample_data() to extract the sampled data. "],["7.1-nested.html", "7.1 Nested", " 7.1 Nested Nested sampling assumes that you have a nested structure, and allows you to sample different numbers at each hierarchical level. The param input is a matrix with (named) columns. The rows of this matrix represent different sampling sets. This is most easily put together using the cbind() (column bind) function, specifying the names. The number of repeat observations for a higher level can be specified using name ‘observation’ (this doesn’t have to exist in the data structure). For example cbind(individual=c(10, 15),observation=c(10, 5)) ## individual observation ## [1,] 10 10 ## [2,] 15 5 would represent sampling the data structure above, the first set having 10 individuals each with 10 observations Note this sampling procedure only produces balanced sampling designs. For unbalanced designs see ‘missing data’ below. 7.1.1 Worked example 1 We want to see how the number of repeat measurements on individuals affects power. In order to vary the number of observations of an individual, we could specify: param &lt;- cbind(nest=10,individual=10,observation=c(20, 10, 5, 2)) pop_data &lt;- simulate_population( data_structure = make_structure(&quot;nest(10)/individual(20)&quot;,repeat_obs=20), parameters = list( individual = list( vcov = 0.1 ), observation= list( names = c(&quot;environment&quot;), beta =c(0.5) ), residual = list( vcov = 0.8 ) ), sample_type = &quot;nested&quot;, sample_param = param ) To extract the sampled data we can then use get_sample_data() specifying which sample set we want, for example the second set 10 nests, each with 10 individuals with 10 observations: sample_data &lt;- get_sample_data(pop_data, sample_set=2) length(unique(sample_data$nest)) ## [1] 10 length(unique(sample_data$individual)) ## [1] 100 nrow(sample_data) ## [1] 1000 "],["7.2-missing-data.html", "7.2 Missing data", " 7.2 Missing data The missing data methods allows generation of unbalanced data. Missing data is generated through creating probabilities of being sampled using logistic regression. Missingness can then either be random, or a function of any of the simulated variables. This methods allows the different classes of missing data to be generated: Missing Completely At Random (MCAR) All observations have an equal probability of being sampled Missing At Random (MAR) Probability of missingness is dependent on variables correlated with the response variable (i.e. a predictor variable) Missing Not At Random (MNAR) Probability of missingness is dependent on the response variable itself 7.2.1 MCAR Missing completely at random occurs when the probability of missingness is not dependent on anything. This can be implemented through a logistic regression, where only the intercept is specified: \\[ logit(p) = beta_0 \\] Note this intercept is on the logit scale, so 0 is equivalent to 0.5. pop_data &lt;- simulate_population( data_structure = make_structure(&quot;individual(100)&quot;,repeat_obs=5), parameters = list( individual = list( vcov = 0.1 ), observation= list( names = c(&quot;environment&quot;), beta =c(0.5) ), residual = list( vcov = 0.8 ) ), sample_type = &quot;missing&quot;, sample_param = &quot;0&quot; ) sample_data &lt;- get_sample_data(pop_data) nrow(sample_data) ## [1] 250 7.2.2 MAR Missing at random occurs when the probability of missingness is dependent on a predictor variable (or a variables correlated with y). This can be implemented through a logistic regression, where the predictor variable(s) is a predictor(s) of y: \\[ logit(p) = beta_0 + beta_1*environment \\] pop_data &lt;- simulate_population( data_structure = make_structure(&quot;individual(100)&quot;,repeat_obs=5), parameters = list( individual = list( vcov = 0.1 ), observation= list( names = c(&quot;environment&quot;), beta =c(0.5) ), residual = list( vcov = 0.8 ) ), sample_type = &quot;missing&quot;, sample_param = &quot;0.5*environment&quot; ) sample_data &lt;- get_sample_data(pop_data) nrow(sample_data) ## [1] 279 The predictor variables are scaled (mean 0, variance 1), so the slopes are directly comparable across traits, and intercept represents the mean (on the logit scale). 7.2.3 MNAR Missing not at random occurs when the probability of missingness is dependent on the response variable itself variable (i.e. y). This can be implemented through a logistic regression, where the predictor variable is y: \\[ logit(p) = beta_0 + beta_1*y \\] Again y is scaled. pop_data &lt;- simulate_population( data_structure = make_structure(&quot;individual(100)&quot;,repeat_obs=5), parameters = list( individual = list( vcov = 0.8 ), observation= list( names = c(&quot;environment&quot;), beta =c(0.1) ), residual = list( vcov = 0.5 ) ), sample_type = &quot;missing&quot;, sample_param = &quot;0.5*y&quot; ) sample_data &lt;- get_sample_data(pop_data) nrow(sample_data) ## [1] 252 Lets try and visualise this. We know there is lots f between individual variation, and we know sampling is based on phenotype, so we would expect an association between number of observations and phenotype: ind_data &lt;- data.frame( n=as.vector(table(sample_data$individual)), mean=tapply(sample_data$y,sample_data$individual,mean) ) boxplot(mean~n,ind_data) "],["7.3-temporal-sampling.html", "7.3 Temporal Sampling", " 7.3 Temporal Sampling In the parameters we specify a list, with the temporal variable time, the grouping variable with which the temporal sampling occurs group, the between group variance (as a proportion) in sampling times variance and the within group sample size n: pop_data &lt;- simulate_population( data_structure = make_structure(&quot;day(100) + individual(100)&quot;,repeat_obs=1), parameters = list( individual = list( vcov = 0.1 ), day=list( covariate=TRUE, beta=0.4 ), residual = list( vcov = 0.8 ) ), sample_type = &quot;temporal&quot;, sample_param = list( time = c(&quot;day&quot;), group = c(&quot;individual&quot;), variance = c(0.1,0.2), n=4), ) sample_data &lt;- get_sample_data(pop_data) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
