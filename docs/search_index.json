[["index.html", "The {squidSim} R Package Vignette The {squidSim} R package", " The {squidSim} R Package Vignette Joel Pick 2022-09-21 The {squidSim} R package The {squidSim} R package is designed to simplify data simulation from a highly flexible set of models, including: Correlated and interacting predictor variables Non-Gaussian response variables (Poisson and binomial) Crossed and nested hierarchical structures Random intercepts and slopes Univariate and multivariate data Within level-specific residual variance (DHGLMs) Additive genetic effects (animal models) Phylogenetic effects with different models of evolution Temporal and spatial autocorrelation Missing data (MNAR, MAR and MCAR) Temporal sampling The main idea is that anything you can model using a linear mixed effect model framework (assuming underlying multivariate normality) you can simulate using the {squidSim} package. Why use {squidSim}? For people confident with programming in R, simulating data doesn’t provide a huge challenge. However, to those less confident with programming, or the process of data simulation more generally, starting with simulations can seem like a daunting task. The {squidSim} R package is designed to facilitate that transition, and to focus attention on the data structure and parameters needed for simulation, rather than the programming knowledge. {squidSim} also provides a useful tool for experienced programmers. One problematic aspect of collaborative coding (or reviewing someone else’s code) is that many people have very contrasting programming styles. Another motivation for the {squidSim} package is that it provides a consistent framework for simulations, which can be interpreted by many people rather than having to decipher someone’s personal code. Using the vignette If you are new to using the {squidSim} package, we recommend that you read Sections 1 and 2 to familiarise yourself with the {squidSim} package before moving onto the more advanced topics. The later sections assume an certain level of understanding of how the functions work. The vignette assumes that you have a working knowledge of R, in particular being comfortable using vectors, matrices and lists. Installation The {squidSim} package is currently only available on github: devtools::install_github(&quot;squidgroup/squidSim&quot;) library(squidSim) Issues and bugs It would be great if you could report any suggestions, issues or bugs; here for issues relating to the package, and herefor issues relating to this vignette. It is worth checking to see if anyone else has a similar problem first, and adding comments to their issue, before starting a new one. "],["simulate_population-function.html", "simulate_population function", " simulate_population function The heart of the {squidSim} R package is the simulate_population() function, which we can use to simulate hierarchical, population level data. We provide the function with a set of parameters, a hierarchical data structure (if we are simulating hierarchical data), and various other optional arguments, which are listed below. The simulate_population() function simulates predictors at each hierarchical level, using provided mean and variance-covariance (vcov) parameters, from a multivariate normal distribution. These predictors are then scaled by the beta parameters, and added together to create the response. The arguments that can be provided to the simulate_population() function (along with their defaults) are: simulate_population( data_structure, n, parameters, n_response=1, response_names, family=&quot;gaussian&quot;, link=&quot;identity&quot;, model, known_predictors, pedigree, pedigree_type, phylogeny, phylogeny_type, cov_str, sample_type, sample_param, n_pop=1 ) Each of these will be covered in more detail in the following sections. Briefly, n and data_structure refer to the size and structure of the data being simulated - data_structure is covered in more detail in Section 2. parameters is a list of parameters to be used in the simulation and is described in detail in Section 1. n_response refers the number of response variable to be simulated and is covered in detail in the section on multivariate models (Section 0.0.5). response_names controls what the simulated response variables are named, and is described in Sections 1 and 0.0.5. family and link refer to simulating non Gaussian response variables and are covered in Section 1.6. model allows for the specification of more complex models and is covered in Section 1.7. known_predictors allows for existing data to be incorporated into the simulations and is covered in 1.5. pedigree and pedigree_type relate to simulating genetic effects and are covered in Section 4, phylogeny and phylogeny_type, relate to simulating phylogenetic effects and are covered in Section 5 and cov_str relates to simulating a general covariance structure and is covered in multiple sections, including 4, 5, 6.3 and 6.4. sample_type and sample_param relate to different sampling methods and are covered in Section 7 n_pop relates to the number of populations, or datasets, that you want to simulate for each parameter set. This is covered in Section 1.8. "],["vignette-notation.html", "Vignette Notation", " Vignette Notation We try to use a consistent notation in equations throughout the manuscript, which we try to explain as we go. For the sake of clarity we have outlined everything here. 0.0.1 General rules Small letters (e.g. \\(x\\)) denote scalars Bold, small letters (e.g. \\(\\boldsymbol{x}\\)) denote vectors Capital letters (e.g. \\(X\\)) denote matrices Letter/Symbol Usage \\(\\sigma\\) standard deviation \\(\\Sigma\\) covariance matrix \\(\\Sigma_{x_1x_2}\\) covariance between variables x and y \\(\\mu\\) mean \\(\\epsilon\\) residual \\(\\beta\\) slope \\(x\\) predictor variable \\(y\\) response variable 0.0.2 Notation for a linear mixed model There are several ways to write out an equation for a linear model. First we can write out all the different variables: \\(y_i = \\beta_0 + \\beta_1 x_{1,i} + \\beta_2 x_{2,i} + \\beta_3 x_{3,i} + \\epsilon_i\\) where each observation (denoted by the index \\(i\\)) of our response variable (\\(y_i\\)) is the sum of an intercept (\\(\\beta_0\\); value of the response when the predictor variables are all 0), the associated value of our predictor variables (\\(x_{1i}\\), \\(x_{2i}\\), \\(x_{3i}\\); which also vary at the level of the observation), each with a certain magnitude and direction of their effect (effect size or slope; \\(\\beta_1\\) etc), and some unexplained, residual variation (\\(\\epsilon_i\\)). We can also write this in matrix notation: \\(\\boldsymbol{y} = X\\boldsymbol{\\beta} + \\boldsymbol{\\epsilon}\\) where \\(X\\) is a matrix of predictors and \\(\\boldsymbol{\\beta}\\) is a (column) vector of slopes/effect sizes. This matrix notation is a bit more compact and relates most easily the structure of the simulate_population() function. However it becomes more complex when we have things varying at different levels, as we have to start getting design matrices for the random effects involved e.g. \\(\\boldsymbol{y} = X\\boldsymbol{\\beta} + Z\\boldsymbol{u} + \\boldsymbol{\\epsilon}\\) which we would rather avoid here as it has little relation to the squidSim code. We can therefore combine the index and matrix notation. This is maybe a little more complex, but it’s compact and flexible and relates well to the simulate_population() function. \\(y_{i} = \\beta_0 + \\boldsymbol{x}_{i} \\boldsymbol{\\beta} + \\epsilon_{i}\\) where \\(\\boldsymbol{x}_{i}\\) is the \\(i\\)th row of \\(X\\). I have deliberately separated the intercept (\\(\\beta_0\\)) out here, for the purpose of comparing with the structure of simulate_population(). Then for models that have predictors vary at different levels we can have \\(y_{ij} = \\beta_0 + \\boldsymbol{x}_{i} \\boldsymbol{\\beta}_x + \\boldsymbol{u}_j \\boldsymbol{\\beta}_u + \\epsilon_{ij}\\) Instead of having predictors at different levels, we might have ‘random effects’ \\(y_{ij} = \\beta_0 + \\boldsymbol{x}_{i} \\boldsymbol{\\beta}_x + u_j + \\epsilon_{ij}\\) at multiple levels \\(y_{ijk} = \\beta_0 + \\boldsymbol{x}_{i} \\boldsymbol{\\beta}_x + u_j + w_k + \\epsilon_{ijk}\\) 0.0.3 Distributions We can write distribution equations as: \\(x_{1i} \\sim \\mathcal{N}(\\mu, \\sigma^2)\\) or \\(\\boldsymbol{x}_i \\sim \\mathcal{N}(\\boldsymbol{\\mu}_x, \\Sigma_x)\\) 0.0.4 Interactions / Random regression \\(y_{ij} = \\beta_0 + \\beta_1x_{i} + u_{1j} + x_{i}u_{2j} + \\epsilon_{ij}\\) \\(x_{i} \\sim \\mathcal{N}(\\mu_x, \\sigma^2_x)\\) \\(\\boldsymbol{u}_i \\sim \\mathcal{N}(0, \\Sigma_u)\\) \\(\\epsilon_{i} \\sim \\mathcal{N}(0, \\sigma^2_{\\epsilon})\\) 0.0.5 Multivariate \\(\\boldsymbol{y}_{ij} = \\boldsymbol{\\beta}_0 + \\boldsymbol{x}_{i} B_x + \\boldsymbol{u}_j + \\boldsymbol{\\epsilon}_{ij}\\) \\(\\boldsymbol{x}_i \\sim \\mathcal{N}(\\boldsymbol{\\mu}_x, \\Sigma_x)\\) \\(\\boldsymbol{u}_i \\sim \\mathcal{N}(0, \\Sigma_u)\\) \\(\\boldsymbol{\\epsilon}_{i} \\sim \\mathcal{N}(0, \\Sigma_{\\epsilon})\\) where \\(\\boldsymbol{\\beta}_0\\) is a vector of intercepts of length q (number of responses) \\(B\\) is a \\(p*q\\) (p - number of predictors) matrix of \\(\\beta\\)s "],["1-linearmod.html", "1 Simulating from linear models", " 1 Simulating from linear models In this section, we will look at simulating data simple data from linear models, to familiarise ourselves with how {squidSim} works. "],["1.1-simple-linear-model.html", "1.1 Simple Linear Model", " 1.1 Simple Linear Model We will start simulating data without any hierarchical structure, i.e. everything varies at the level of the observation. Let’s imagine a situation where body mass is affected by some environmental variables - temperature, rainfall and wind. We can write this out in the form of a linear model: \\[ y_i = \\beta_0 + \\beta_1 x_{1i} + \\beta_2 x_{2i} + \\beta_3 x_{3i} + \\epsilon_i \\] where each observation (denoted by the index \\(i\\)) of our response variable (\\(y_i\\)) is the sum of an intercept (\\(\\beta_0\\); value of the response when the predictor variables are all 0), the associated value of our predictor variables (\\(x_{1i}\\), \\(x_{2i}\\), \\(x_{3i}\\); which also vary at the level of the observation), each with a certain magnitude and direction of their effect (effect size or slope; \\(\\beta_1\\) etc), and some unexplained, residual variation (\\(\\epsilon_i\\)). We can write this in more compact notation, \\[ y_{i} = \\beta_0 + \\boldsymbol{x}_{i} \\boldsymbol{\\beta} + \\epsilon_{i} \\] where \\(\\boldsymbol{x}_{i}\\) is a (row) vector of \\(x_{1i}\\), \\(x_{2i}\\) \\(x_{3i}\\) etc, or equivalently row \\(i\\) in the matrix of predictors \\(X\\), \\[ \\boldsymbol{x}_{i} = \\begin{bmatrix} x_{1i} &amp; x_{2i} &amp; x_{3i} \\end{bmatrix} \\] and \\(\\boldsymbol{\\beta}\\) is a (column) vector of slopes/effect sizes \\[ \\boldsymbol{\\beta} = \\begin{bmatrix} \\beta_1 \\\\ \\beta_2 \\\\ \\beta_3 \\end{bmatrix} \\] We will use this notation in the vignette, as it is a bit more compact, relates most easily the structure of the simulate_population() function, and can incorporate the flexibility needed for the different model structures. If we want to simulate from this model, we can assume that these predictor variables are multivariate normally distributed, with given means (\\(\\mu\\)) and a covariance structure (\\(\\Sigma_x\\)), and the residuals are normally distributed with a given variance (\\(\\sigma^2_\\epsilon\\)) \\[ \\boldsymbol{x}_i \\sim \\mathcal{N}(\\boldsymbol{\\mu}_x, \\Sigma_x) \\] \\[ \\epsilon_i \\sim N(0,\\sigma^2_\\epsilon) \\] where \\[ \\boldsymbol{\\mu}_x = \\begin{bmatrix} \\mu_{x_1} \\\\ \\mu_{x_2} \\\\ \\mu_{x_3} \\end{bmatrix} , \\Sigma_x = \\begin{bmatrix} \\sigma^2_{x_1} &amp; \\sigma_{x_1x_2} &amp; \\sigma_{x_1x_3}\\\\ \\sigma_{x_1x_2} &amp; \\sigma^2_{x_2} &amp; \\sigma_{x_2x_3}\\\\ \\sigma_{x_1x_3} &amp; \\sigma_{x_2x_3} &amp; \\sigma^2_{x_3} \\end{bmatrix} \\] The key to simulating data using the squidSim package is correctly specifying the parameters (from the equations above that would be \\(\\beta_0\\), \\(\\boldsymbol{\\beta}\\), \\(\\boldsymbol{\\mu}_x\\), \\(\\Sigma_x\\), \\(\\sigma^2_\\epsilon\\)). These parameters are given to the simulate_population function as a nested list. Within the main parameter list, there are named lists corresponding to different hierarchical levels, containing the parameters for the predictors at that level - here we are just focussing on the observation level (see Section 2 for examples with hierarchical structure). Parameters for the residual must be specified, all other levels are optional. In addition to the named lists relating to hierarchical levels, a vector for intercepts and a list for interactions can be added. Intercepts are demonstrated in the examples below, and interactions in Section 1.3. Many of the components in the parameter list don’t need to be specified and default values will be created. Let’s simulate from the above model. First we can specify a sample size or data_structure. As we don’t have any hierarchical data structure yet (see Section 2), we have to specify the sample size with the n argument to the simulate_population function (e.g. 2000). simulate_population( n=2000, ... ) We can also give the response (\\(y\\)) variable a name, body_mass (this is not needed, and defaults to y if not specified). simulate_population( n=2000, response_name = &quot;body_mass&quot;, ... ) We then need to add in our parameter list: simulate_population( n=2000, response_name = &quot;body_mass&quot;, parameters = list( ... ) ) To fill in our parameter list, lets think about our model \\[ y_{i} = \\color{red}{\\beta_0}+ \\color{blue}{\\boldsymbol{x}_{i} \\boldsymbol{\\beta}} + \\color{orange}{\\epsilon_{i}} \\] \\[ \\boldsymbol{x}_i \\sim \\mathcal{N}(\\boldsymbol{\\mu}_x, \\Sigma_x) \\] \\[ \\epsilon_i \\sim N(0,\\sigma^2_\\epsilon) \\] or in words: intercept + observation level predictors + residual These names correspond to names in our parameter list. To simulate our environmental predictors that vary at the level of the observation, we can use the observation slot in the parameter list, as well as specifying an intercept and residual variance in the intercept and residual slots, respectively. The global intercept (\\(\\beta_0\\)) is given by specifying an intercept vector in the parameter list e.g. intercept=10 For both observation and residual we create a list containing the respective parameters. For the observation list, we can specify the names of these variables as a vector (these can be anything - I like giving things actual names, but could also be x1, x2 and x3) and, in the simplest case, the \\(\\beta\\) values as a vector. observation = list( names = c(&quot;temperature&quot;,&quot;rainfall&quot;, &quot;wind&quot;), beta = c(0.5,-0.3, 0.4) ) By default, these predictors are simulated as i.i.d. unit normals (mean=0, var=1, cov=0), so \\[ \\boldsymbol{\\mu}_x = \\begin{bmatrix} 0 \\\\ 0 \\\\ 0 \\end{bmatrix} , \\Sigma_x = \\begin{bmatrix} 1 &amp; 0 &amp; 0\\\\ 0 &amp; 1 &amp; 0\\\\ 0 &amp; 0 &amp; 1 \\end{bmatrix} \\] Note that the order of the names and betas has to match. We can then specify the residual variance, here as 1 (but can be anything). vcov refers to the variance-covariance matrix, which for the residuals is only a single variance until we have multiple response variables (Section 0.0.5). residual = list( vcov = 1 ) We can then put this all together: squid_data &lt;- simulate_population( n=2000, response_name = &quot;body_mass&quot;, parameters = list( intercept=10, observation = list( names = c(&quot;temperature&quot;,&quot;rainfall&quot;, &quot;wind&quot;), beta = c(0.5,-0.3, 0.4) ), residual = list( vcov = 1 ) ) ) Let’s compare the code back to the model: \\[ y_{i} = \\color{red}{\\beta_0}+ \\color{blue}{\\boldsymbol{x}_{i} \\boldsymbol{\\beta}} + \\color{orange}{\\epsilon_{i}} \\] \\[ \\boldsymbol{x}_i \\sim \\mathcal{N}(\\boldsymbol{\\mu}_x, \\Sigma_x) \\] \\[ \\epsilon_i \\sim N(0,\\sigma^2_\\epsilon) \\] This generates a squid object, which when run returns a friendly message: squid_data ## Data simulated using squid ## ## /\\ ## / \\ ## / /\\ \\ ## \\/ \\/ ## / \\ ## | | ## | | ## 0 | | 0 ## / \\____/ \\ ## { __/( )\\__ } ## \\___/__\\_\\/_/__\\___/ ## / / / / \\ \\ \\ \\ ## / / / { } \\ \\ \\ ## { { / \\ / \\ } } ## } \\ 0 0 / { ## 0_/ { \\_0 0_/ } \\_0 ## \\ / ## } { ## / \\ ## 0 0 and contains all our simulation parameters as well as the simulated data. At this point we want to be able to access the simulated data. There are then some further functions which we can use to access the data and simulation parameters. We can extract the simulated data using get_population_data() The generated response is returned, along with simulated predictors and the data structure (not relevant here). data &lt;- get_population_data(squid_data) head(data) ## body_mass temperature rainfall wind residual squid_pop ## 1 7.573840 -0.2306292 0.3793662 -1.621588 -1.5484005 1 ## 2 7.651136 -0.8841745 -0.7383195 -0.787488 -1.8132771 1 ## 3 12.199631 0.9715341 0.5082774 1.591818 1.2296201 1 ## 4 10.786125 0.1834473 -0.1029349 -0.544928 0.8814921 1 ## 5 11.769145 1.6707325 2.0234161 1.895537 0.7825892 1 ## 6 8.987414 -2.2209488 0.8709182 1.206219 -0.1233233 1 Later on we will explore how to simulate data for multiple populations with the same parameters (Section 1.8). squid_pop is an identifier for the population number, but is not relevant here. We can plot what we have simulated: library(scales) par(mfrow=c(1,3)) plot(body_mass ~ temperature + rainfall + wind, data, pch=19, cex=0.5, col=alpha(1,0.5)) and run a linear model to check that we get back the betas that we simulated: coef(lm(body_mass ~ temperature + rainfall + wind,data)) ## (Intercept) temperature rainfall wind ## 9.9608924 0.5259708 -0.3262004 0.3885865 We can also check the means and variances of the predictors predictors &lt;- data[,c(&quot;temperature&quot;,&quot;rainfall&quot;,&quot;wind&quot;)] colMeans(predictors) ## temperature rainfall wind ## 0.012155934 0.004824320 -0.004908366 cov(predictors) ## temperature rainfall wind ## temperature 0.994203543 0.001712154 0.01044419 ## rainfall 0.001712154 1.050196516 -0.01773955 ## wind 0.010444186 -0.017739548 1.04555048 Its worth noting that these values are not exactly what we simulated. That is to be expected - simulation involves randomly generating data, which means that here will be stochasticity in the simulated sample, and in our estimates of the underlying parameters. 1.1.1 Adding more information about the predictors We can also specify the predictors as having different means and variances. In the observation list, mean and vcov specify the means and covariance matrix of the predictors. If the predictors were uncorrelated, we can just specify the variances as a vector (the diagonal elements of the covariance matrix), and the function assumes the covariances are 0 (see section 1.2 for correlated predictors). Below we have three predictors, temperature, rainfall and wind, with means 10, 1 and 20 respectively, variances 1, 0.1 and 2, respectively, and betas 0.5,-3 and 0.4, a residual variance 0.8 and a global intercept of 10: \\[ y_{i} = beta_0+ \\boldsymbol{x}_{i} \\boldsymbol{\\beta} + \\epsilon_{i} \\] \\[ \\boldsymbol{x}_i \\sim \\mathcal{N}(\\boldsymbol{\\mu}_x, \\Sigma_x) \\] \\[ \\epsilon_i \\sim N(0,\\sigma^2_\\epsilon) \\] \\[ \\color{red}{\\\\beta_0=10} , \\color{blue}{\\boldsymbol{\\mu}_x = \\begin{bmatrix} 10 \\\\ 1 \\\\ 20 \\end{bmatrix}} , \\color{CornflowerBlue}{\\Sigma_x = \\begin{bmatrix} 1 &amp; 0 &amp; 0\\\\ 0 &amp; 0.1 &amp; 0\\\\ 0 &amp; 0 &amp; 2 \\end{bmatrix}} , \\color{purple}{\\boldsymbol{\\beta} = \\begin{bmatrix} 0.5 \\\\ -3 \\\\ 0.4 \\end{bmatrix}} , \\color{orange}{\\sigma^2_\\epsilon=0.8} \\] data &lt;- get_population_data(squid_data) coef(lm(body_mass ~ temperature + rainfall + wind, data)) ## (Intercept) temperature rainfall wind ## 10.1958870 0.5141206 -3.1041906 0.3899635 library(scales) par(mfrow=c(1,3)) plot(body_mass ~ temperature + rainfall + wind, data, pch=19, cex=0.5, col=alpha(1,0.5)) Again, we can check that the means and variances of the predictors are being simulated as we think they should be predictors &lt;- data[,c(&quot;temperature&quot;,&quot;rainfall&quot;,&quot;wind&quot;)] colMeans(predictors) ## temperature rainfall wind ## 10.0376901 0.9913311 19.9980632 cov(predictors) ## temperature rainfall wind ## temperature 1.000964250 0.007210948 0.01717880 ## rainfall 0.007210948 0.098615850 0.01599828 ## wind 0.017178798 0.015998285 2.06563781 It can be complicated to keep up with how these different values combine to give the mean and variance of the response. To help with this, the simulated_variance() function calculates the expected mean and variance of the response variable, as well as breaking down the contribution of different predictors and hierarchical levels to the these. simulated_variance(squid_data) ## Contribution of the simulated predictors to the mean and variance in the response ## ## Simulated Mean: 20 ## Simulated Variance: 2.27 ## ## Contribution of different hierarchical levels to grand mean and variance: ## mean var ## intercept 10 0.00 ## observation 10 1.47 ## residual 0 0.80 ## ## ## Contribution of different predictors to grand mean and variance: ## mean var ## intercept 10 0.00 ## temperature 5 0.25 ## rainfall -3 0.90 ## wind 8 0.32 ## residual 0 0.80 "],["1.2-corpred.html", "1.2 Correlated predictors", " 1.2 Correlated predictors We can also simulate correlations between these predictors, as vcov specifies the variance/covariance matrix of the predictors. squid_data &lt;- simulate_population( n=2000, response_name = &quot;body_mass&quot;, parameters=list( intercept=10, observation=list( names=c(&quot;temperature&quot;,&quot;rainfall&quot;, &quot;wind&quot;), mean = c(10,1 ,20), vcov =matrix(c( 1, 0, 1, 0,0.1,0, 1, 0, 2 ), nrow=3 ,ncol=3,byrow=TRUE), beta =c(0.5,-3,0.4) ), residual=list( vcov=1 ) ) ) data &lt;- get_population_data(squid_data) library(scales) par(mfrow=c(1,3)) plot(body_mass ~ temperature + rainfall + wind, data, pch=19, cex=0.5, col=alpha(1,0.5)) coef(lm(body_mass ~ temperature + rainfall + wind, data)) ## (Intercept) temperature rainfall wind ## 9.7745865 0.4847876 -2.9889811 0.4172907 div.blue { background-color:#fcba03; border-radius: 5px; padding: 20px;} Matrices in R To code a matrix in R we use the matrix function (see ?matrix). This takes a vector of values, and arranges then in a matrix, with dimensions specified with nrow and ncol. By default it fills the matrix by column, which can be changed by specifying byrow=TRUE. For big matrices this can be petty annoying. TheTri2M() function from the package MCMCglmm allows you to just give the lower or upper half of the matrix, and it will fill the rest out for you. For example, we can make a correlation matrix using: Tri2M(c(1,0.5,1,0.3,0.2,1), lower.tri = FALSE, diag=TRUE) ## [,1] [,2] [,3] ## [1,] 1.0 0.5 0.3 ## [2,] 0.5 1.0 0.2 ## [3,] 0.3 0.2 1.0 Instead of specifying a variance-covariance matrix (vcov), we can also specify a variance-correlation matrix (variance on the diagonals and correlations on the off-diagonals), using vcorr squid_data &lt;- simulate_population( n=2000, response_name = &quot;body_mass&quot;, parameters=list( intercept=10, observation=list( names=c(&quot;temperature&quot;,&quot;rainfall&quot;, &quot;wind&quot;), mean = c(10,1,20), vcorr =matrix(c( 1, -0.2, 0.5, -0.2, 0.1, 0.3, 0.5, 0.3, 2 ), nrow=3 ,ncol=3,byrow=TRUE), beta =c(0.5,-3,0.4) ), residual=list( vcov=1 ) ) ) data &lt;- get_population_data(squid_data) cor(data[,c(&quot;temperature&quot;,&quot;rainfall&quot;, &quot;wind&quot;)]) ## temperature rainfall wind ## temperature 1.0000000 -0.1812635 0.5176010 ## rainfall -0.1812635 1.0000000 0.2617843 ## wind 0.5176010 0.2617843 1.0000000 Through simulating correlated predictors, we can also simulate more interesting phenomena. For example, we may want to simulate the effect of a correlated missing predictor. Here, rain and wind, but not temperature, affect adult body mass, but only temperature and rainfall are measured: squid_data &lt;- simulate_population( n=2000, response_name = &quot;body_mass&quot;, parameters=list( intercept=10, observation=list( names=c(&quot;temperature&quot;,&quot;rainfall&quot;, &quot;wind&quot;), mean = c(10,1 ,20), vcov =matrix(c( 1, 0, 1, 0,0.1,0, 1, 0, 2 ), nrow=3 ,ncol=3,byrow=TRUE), beta =c(0.5,-3,0.4) ), residual=list( vcov=1 ) ) ) data &lt;- get_population_data(squid_data) library(scales) par(mfrow=c(1,3)) plot(body_mass ~ temperature + rainfall + wind, data, pch=19, cex=0.5, col=alpha(1,0.5)) coef(lm(body_mass ~ temperature + rainfall, data)) ## (Intercept) temperature rainfall ## 13.8936511 0.9148843 -3.0592937 coef(lm(body_mass ~ temperature + rainfall + wind, data)) ## (Intercept) temperature rainfall wind ## 10.2631334 0.5509808 -3.0467600 0.3633353 We can also use this to induce measurement error in a predictor - we can simulate the true variable with a certain affect on the response, and another correlated variable - the measured variable - with no direct effect on the response. The correlation between these two variables represents the measurement error (the repeatability of the variable is the correlation squared). "],["1.3-interactions.html", "1.3 Interactions and non-linear effects", " 1.3 Interactions and non-linear effects 1.3.1 Interactions \\[ y_i = \\beta_0 + \\beta_1 * x_{1,i} + \\beta_2 * x_{2,i} + \\beta_3 * x_{1,i}* x_{2,i} + \\epsilon_i \\] We can specify the interaction between two predictors by adding an interactions list to the parameters list. Interactions can then be specified between two named variables using “:”. Interactions can be between predictors at the same or different hierarchical level. squid_data &lt;- simulate_population( n=2000, response_name = &quot;body_mass&quot;, parameters=list( observation=list( names=c(&quot;temperature&quot;,&quot;rainfall&quot;), beta = c(0.5,0.3) ), residual=list( vcov=0.3 ), interactions=list( names=c(&quot;temperature:rainfall&quot;), beta = c(-0.1) ) ) ) data &lt;- get_population_data(squid_data) head(data) ## body_mass temperature rainfall residual temperature:rainfall squid_pop ## 1 0.3684694 1.933232214 0.19203892 -0.61863284 0.3712558292 1 ## 2 -0.4730299 0.081011530 -1.32092129 -0.12796029 -0.1070098551 1 ## 3 -1.1576776 0.088942791 -0.70727428 -0.99625744 -0.0629069479 1 ## 4 0.1311283 0.004136626 -0.08379699 0.15416441 -0.0003466369 1 ## 5 0.1344398 0.296427406 -0.27937107 0.06175613 -0.0828132420 1 ## 6 -1.4594139 0.555758164 -1.15559295 -1.45483810 -0.6422302156 1 coef(lm(body_mass ~ temperature * rainfall, data)) ## (Intercept) temperature rainfall ## 0.01175390 0.50865026 0.33617972 ## temperature:rainfall ## -0.09533579 1.3.2 Non-linear effects Polynomial (quadratic, cubic, etc) functions are essentially interactions with the same predictor. They can therefore be specified in the same way: squid_data &lt;- simulate_population( n=2000, response_name = &quot;body_mass&quot;, parameters=list( observation=list( names=c(&quot;temperature&quot;), beta = c(0.5) ), interactions=list( names=c(&quot;temperature:temperature&quot;), beta = c(-0.3) ), residual=list( vcov=0.3 ) ) ) data &lt;- get_population_data(squid_data) plot(body_mass ~ temperature, data, pch=19, cex=0.5, col=alpha(1,0.5)) coef(lm(body_mass ~ temperature + I(temperature^2), data)) ## (Intercept) temperature I(temperature^2) ## -0.002908256 0.516327302 -0.291477043 "],["1.4-transformations.html", "1.4 Transformations", " 1.4 Transformations We may want to simulate predictors that are not normally distributed. Although the underlying simulation procedure assumes multivariate normality, the predictors can be transformed, before they are scaled by the beta values. To do this we can provide the transformation function to the functions option of a given parameter list, as a character vector. The given function needs to be a known function in R. The below code will exponentiate rainfall (using the exp function), before it is scaled by its beta (here 2). squid_data &lt;- simulate_population( n=2000, response_name = &quot;body_mass&quot;, parameters=list( observation=list( names=c(&quot;temperature&quot;,&quot;rainfall&quot;), functions=c(NA,&quot;exp&quot;), beta = c(0.5,0.3) ), residual=list( vcov=0.3 ) ) ) data &lt;- get_population_data(squid_data) head(data) ## body_mass temperature rainfall residual squid_pop ## 1 0.8808384 0.9661316 1.7834867 -0.1372734 1 ## 2 0.2263617 -0.3593466 1.8415211 -0.1464213 1 ## 3 0.3550851 1.5984683 0.2318093 -0.5136918 1 ## 4 1.4382651 -1.5338100 4.4990114 0.8554666 1 ## 5 0.6630719 2.1241124 0.9072182 -0.6711498 1 ## 6 0.6877911 -0.9466144 0.9671257 0.8709606 1 hist(data$rainfall, breaks=100) If a covariance between variables is specified, this covariance is on the untransformed (Gaussian) scale (as the variables are simulated as multivariate normal), NOT on the transformed scale, so care should be taken with this. For example: squid_data &lt;- simulate_population( n=2000, response_name = &quot;body_mass&quot;, parameters=list( observation=list( names=c(&quot;temperature&quot;,&quot;rainfall&quot;), vcov=matrix(c(1,0.7,0.7,1), nrow=2,byrow=TRUE), functions=c(NA,&quot;exp&quot;), beta = c(0.5,0.3) ), residual=list( vcov=0.3 ) ) ) data &lt;- get_population_data(squid_data) cov(data$temperature,data$rainfall) ## [1] 1.132242 cov(data$temperature,log(data$rainfall)) ## [1] 0.6947967 The simulate covariance can be recovered on the back-transformed predictor. The simulated_variance() function will also no longer be accurate, as the calculations are based on variables on the untransformed scale. "],["1.5-knownpreds.html", "1.5 Known Predictors", " 1.5 Known Predictors We might have the situation where we don’t want to simulate a predictor, rather use existing data to simulate a response variable from. This has the advantage that any quirks of existing data (like a strange distribution) can be maintained. These predictors can be fed into the simulate_population() function, using the known_predictors argument. This argument takes a list, with one item, called predictors, a matrix or dataframe of predictors and one item called beta, a vector with the beta values for the respective predictors. Importantly, the predictors have to be the same length as number of observations in the simulated data. We can demonstrate this using the blue tit data set that comes with the MCMCglmm package. library(MCMCglmm) data(BTdata) head(BTdata) ## tarsus back animal dam fosternest hatchdate sex ## 1 -1.89229718 1.1464212 R187142 R187557 F2102 -0.6874021 Fem ## 2 1.13610981 -0.7596521 R187154 R187559 F1902 -0.6874021 Male ## 3 0.98468946 0.1449373 R187341 R187568 A602 -0.4279814 Male ## 4 0.37900806 0.2555847 R046169 R187518 A1302 -1.4656641 Male ## 5 -0.07525299 -0.3006992 R046161 R187528 A2602 -1.4656641 Fem ## 6 -1.13519543 1.5577219 R187409 R187945 C2302 0.3502805 Fem We can see that in this dataset there are several continuous predictors. Here we will use “hatchdate” and “tarsus”. squid_data &lt;- simulate_population( n = nrow(BTdata), response_name = &quot;body_mass&quot;, parameters = list( observation =list( names = c(&quot;temperature&quot;,&quot;rainfall&quot;), beta = c(0.5,0.3) ), residual = list( vcov = 0.3 ) ), known_predictors = list( predictors = BTdata[,c(&quot;hatchdate&quot;,&quot;tarsus&quot;)], beta = c(1,2)) ) data &lt;- get_population_data(squid_data) head(data) ## body_mass temperature rainfall residual hatchdate tarsus ## 1 -4.286821 0.5290832 0.375800507 -0.192105859 -0.6874021 -1.89229718 ## 2 1.858944 0.3625056 0.002274996 0.092191340 -0.6874021 1.13610981 ## 3 1.638961 -0.1032856 0.492434356 0.001475751 -0.4279814 0.98468946 ## 4 -1.182909 0.3381428 1.479198475 -1.088091557 -1.4656641 0.37900806 ## 5 -3.318436 -2.4582996 -0.693746732 -0.264992183 -1.4656641 -0.07525299 ## 6 -1.858113 1.6906011 -0.309655352 -0.690406667 0.3502805 -1.13519543 ## squid_pop ## 1 1 ## 2 1 ## 3 1 ## 4 1 ## 5 1 ## 6 1 plot(body_mass~hatchdate,data) "],["1.6-nonGaussian.html", "1.6 Non-Gaussian phenotypes", " 1.6 Non-Gaussian phenotypes To simulate non-Gaussian data, we can specify a link function and a family as arguments to the simulate_population function. Underneath the predictors are being simulated as multivariate normal, and then the resulting phenotype is transformed. \\[ y \\sim Poisson(\\hat{y}) \\] \\[ \\hat{y} = exp( \\beta_0 + X \\beta + \\epsilon ) \\] \\[ X \\sim MVN(\\mu_x,\\Sigma_x) \\] \\[ \\epsilon \\sim N(0,\\sigma^2_\\epsilon) \\] squid_data &lt;- simulate_population( parameters = list( observation = list( names = c(&quot;temperature&quot;,&quot;rainfall&quot;), beta = c(0.2,0.1) ), residual = list( mean = 1.75, vcov = 0.2 ) ), n = 2000, family = &quot;poisson&quot;, link = &quot;log&quot; ) data &lt;- get_population_data(squid_data) head(data) ## y temperature rainfall residual squid_pop ## 1 0 0.2490819 0.18108147 0.8249614 1 ## 2 3 -0.3059614 -0.01854387 1.0974162 1 ## 3 3 -1.9080617 -0.10657783 1.4348215 1 ## 4 5 -0.3827834 -0.63354609 2.0413375 1 ## 5 5 2.1639215 0.02263793 0.8399427 1 ## 6 4 -0.2962397 -0.14766836 1.6809449 1 plot(table(data$y), ylab=&quot;Frequency&quot;, xlab=&quot;z&quot;) glm(y ~ temperature + rainfall, data, family=&quot;poisson&quot;) ## ## Call: glm(formula = y ~ temperature + rainfall, family = &quot;poisson&quot;, ## data = data) ## ## Coefficients: ## (Intercept) temperature rainfall ## 1.8545 0.1857 0.1124 ## ## Degrees of Freedom: 1999 Total (i.e. Null); 1997 Residual ## Null Deviance: 5169 ## Residual Deviance: 4537 AIC: 11550 "],["1.7-modeleq.html", "1.7 Model equations", " 1.7 Model equations In all the examples so far, the predictors are simulated, scaled by their respective beta value, and then added together. We may want to prevent some of this behaviour or add in additional parameters, interactions or general complexity. In isolation, the functionality outlined here might seem a bit redundant, but it becomes useful for more complex models. To introduce this increased complexity, we can specify a model formula. This explicitly tells the simulate_population function how to put the simulated predictors together to form the response variable. We can first demonstrate this with a simple linear model. squid_data &lt;- simulate_population( parameters=list( observation= list( names = c(&quot;temperature&quot;, &quot;rainfall&quot;), beta =c(0.5,0.3) ), residual = list( names=&quot;residual&quot;, vcov=1 ) ), n=2000, model = &quot;y = temperature + rainfall + residual&quot; ) data &lt;- get_population_data(squid_data) coef(lm(y ~ temperature + rainfall, data)) ## (Intercept) temperature rainfall ## 0.004605396 0.506914670 0.288952532 In the formula, we write out how the variables are added up. Everything that you want exported needs to be defined and named (e.g. y=...). By default they are all scaled by their beta values before this happens. Sometimes it is useful to prevent this (i.e. multiply two traits together without them being scaled by their respective beta) and we can do this by using I(). squid_data &lt;- simulate_population( parameters=list( observation= list( names = c(&quot;temperature&quot;, &quot;rainfall&quot;), beta =c(0.5,0.3) ), residual = list( names=&quot;residual&quot;, vcov=1 ) ), n=2000, model = &quot;y = temperature + I(rainfall) + residual&quot; ) data &lt;- get_population_data(squid_data) coef(lm(y ~ temperature + rainfall, data)) ## (Intercept) temperature rainfall ## -0.004985291 0.495841550 0.960772034 We can also add extra parameters to the parameter list, which we can call from within the function. In combination with I() we can then customise the model formula a bit squid_data &lt;- simulate_population( parameters=list( observation= list( names = c(&quot;temperature&quot;, &quot;rainfall&quot;), beta =c(0.5,0.3), extra_beta = 0.1 ), residual = list( names=&quot;residual&quot;, vcov=1 ) ), n=2000, model = &quot;y = temperature + extra_beta*I(rainfall) + residual&quot; ) data &lt;- get_population_data(squid_data) coef(lm(y ~ temperature + rainfall, data)) ## (Intercept) temperature rainfall ## -0.000221756 0.481460783 0.085752465 Finally, we can use [] to index the levels of the random effects within the formula… "],["1.8-npop.html", "1.8 Simulating multiple populations", " 1.8 Simulating multiple populations We can use the simulate_population() function to generate multiple datasets (populations) form the same set of parameters (world). To do this we can specify the n_pop argument in simulate_population(). This defaults to 1. squid_data &lt;- simulate_population( n=2000, response_name = &quot;body_mass&quot;, parameters=list( intercept=10, observation=list( names=c(&quot;temperature&quot;,&quot;rainfall&quot;, &quot;wind&quot;), beta =c(0.5,-0.3,0.4) ), residual=list( vcov=0.8 ) ), n_pop=5 ) By default get_population_data returns a data.frame, where the squid_pop column indicates the population data &lt;- get_population_data(squid_data) head(data) ## body_mass temperature rainfall wind residual squid_pop ## 1 9.963488 -0.87042429 0.08123816 -1.46160423 1.00771338 1 ## 2 11.679887 0.54596251 -1.35020676 0.44824010 0.82254729 1 ## 3 10.205083 0.05409334 -0.59114054 0.30053533 -0.11952024 1 ## 4 9.957851 -1.73773422 -0.62630133 -0.38115588 0.79129050 1 ## 5 10.547339 1.61947126 0.76155388 -0.05519906 -0.01185064 1 ## 6 10.196599 0.68431346 0.65455707 -2.19404168 0.92842638 1 It can also be output as a list, which might be more useful for processing many iterations of a simulation. data &lt;- get_population_data(squid_data, list=TRUE) "],["1.9-parameter-list-summary.html", "1.9 Parameter list summary", " 1.9 Parameter list summary The parameters list contains one (or more) list for each hierarchical level that you want to simulate at. A residual list is always need, specifying variances/covariances for the residual. Additionally, the parameter list can also be provided with an intercept vector and interactions list. The simplest paramter list will look something like this: parameters=list( residual=list( vcov=... ) ) We can add more complexity by adding an intercept (if not specified, is assumed to be 0): parameters=list( intercept=c(...), residual=list( vcov=... ) ) and then simulate variables that vary at the observation level: parameters=list( intercept=c(...), observation=list( beta = ... ), residual=list( vcov = ... ) ) as well as variables that vary at the other levels, for example at the level of the individual: parameters=list( intercept=c(...), individual=list( names = c(...), beta = ... ), observation=list( names = c(...), beta = ... ), residual=list( vcov = ... ) ) Finally we can add in interactions: parameters=list( intercept=c(...), individual=list( names = c(...), beta = ... ), observation=list( names = c(...), beta = ... ), interactions=list( names = c(...), beta = ... ), residual=list( vcov = ... ) ) For each item in the parameter list (excluding intercept, interactions, and residual), the following can be specified: names Vector containing the names of predictors from this list that will be output. This doesn’t not have to be specified, unless the predictors at this level are included in interactions. By default, the names will be the name of the list (e.g. ‘individual’ in the example above), appended with _effect and a sequential number if there are multiple predictors. group Character string relates the level of variation back to the data_structure. Does not have to be specified and by default is the name of the list. mean Vector of means for the predictor variables. Defaults to 0. vcov Either a vector of variances, or a variance-covariance matrix, for the predictor variables. Defaults to identity matrix. vcorr Variance-correlation matrix, can be specified instead of vcov (it is ignored if both are specified). beta Vector (or matrix with multiple responses) of effect sizes/slopes. Defaults to 1. fixed Logical, indicating whether the effects for the levels are fixed or to be simulated. If TRUE, beta represents the fixed effects. Defaults to FALSE. covariate Logical, indicating whether the indexes in the data structure are to be used as a continuous variable rather than simulating one. Defaults to FALSE. functions Vector - transformation to be applied to the response variable. Defaults to ‘identity’. "],["2-hierarchical.html", "2 Hierarchical structure", " 2 Hierarchical structure There are two parts to simulating hierarchical data. First you need to have a hierarchical data structure and second you need parameters at each of the different hierarchical levels. The data structure is essentially a data.frame (or matrix), with all the grouping factors and their levels, as we would see in a typical dataset. Lets take the blue tit dataset we explored earlier: data(BTdata) head(BTdata) ## tarsus back animal dam fosternest hatchdate sex ## 1 -1.89229718 1.1464212 R187142 R187557 F2102 -0.6874021 Fem ## 2 1.13610981 -0.7596521 R187154 R187559 F1902 -0.6874021 Male ## 3 0.98468946 0.1449373 R187341 R187568 A602 -0.4279814 Male ## 4 0.37900806 0.2555847 R046169 R187518 A1302 -1.4656641 Male ## 5 -0.07525299 -0.3006992 R046161 R187528 A2602 -1.4656641 Fem ## 6 -1.13519543 1.5577219 R187409 R187945 C2302 0.3502805 Fem Here animal, dam, fosternest and sex make up the data structure. In this Section, we will first demonstrate how to make a simple hierarchical structure using the make_structure function. simulate_population also allows pre-existing data structures to be incorporated into simulations. The remaining part of the section details how to simulate hierarchical data once you have a hierarchical data structure. "],["2.1-makestr.html", "2.1 Making a hierarchical structure", " 2.1 Making a hierarchical structure We can use the make_structure function to create nested and crossed hierarchical data structures. The make_structure function only produces balanced data structures, but these can be made unbalanced by sampling, which is outlined in Section 7 2.1.1 Single Factor Simplest structure - one grouping factor with multiple observations. Here we create a structure with 2 repeated observations of 5 individuals (small number are used here simply for illustration purposes). The structure contains the name of the grouping factors and their sample sizes, and repeat_obs is the number of repeated observations. make_structure(structure=&quot;individual(5)&quot;, repeat_obs=2) ## individual ## 1 1 ## 2 1 ## 3 2 ## 4 2 ## 5 3 ## 6 3 ## 7 4 ## 8 4 ## 9 5 ## 10 5 2.1.2 Nested factors If we want to have nested factors, so different hierarchical groups, where levels of one group only exist in one higher group then we can use the / symbol in the structure argument. For example, here we have 2 sexes, each with 5 individuals, with 2 repeated measurements each. make_structure(structure=&quot;sex(2)/individual(5)&quot;, repeat_obs=2) ## sex individual ## 1 1 1 ## 2 1 1 ## 3 1 2 ## 4 1 2 ## 5 1 3 ## 6 1 3 ## 7 1 4 ## 8 1 4 ## 9 1 5 ## 10 1 5 ## 11 2 6 ## 12 2 6 ## 13 2 7 ## 14 2 7 ## 15 2 8 ## 16 2 8 ## 17 2 9 ## 18 2 9 ## 19 2 10 ## 20 2 10 Note that in the nesting, the sample size for the lower group now represents the number within each level of the higher, rather than the total sample size, so overall there is 10 individuals. We can nest as much as we want: make_structure(structure=&quot;species(2)/population(2)/individual(2)&quot;, repeat_obs=2) ## species population individual ## 1 1 1 1 ## 2 1 1 1 ## 3 1 1 2 ## 4 1 1 2 ## 5 1 2 3 ## 6 1 2 3 ## 7 1 2 4 ## 8 1 2 4 ## 9 2 3 5 ## 10 2 3 5 ## 11 2 3 6 ## 12 2 3 6 ## 13 2 4 7 ## 14 2 4 7 ## 15 2 4 8 ## 16 2 4 8 2.1.3 Crossed factors We can create completely crossed factors - every combination of levels exists - using the + symbol in the structure argument make_structure(structure=&quot;treatment(2) + individual(5)&quot;, repeat_obs=1) ## treatment individual ## 1 1 1 ## 2 1 2 ## 3 1 3 ## 4 1 4 ## 5 1 5 ## 6 2 1 ## 7 2 2 ## 8 2 3 ## 9 2 4 ## 10 2 5 We can combine crossed and nested structures: make_structure(structure=&quot;treatment(2) + sex(2)/individual(5)&quot;, repeat_obs=1) ## treatment sex individual ## 1 1 1 1 ## 2 1 1 2 ## 3 1 1 3 ## 4 1 1 4 ## 5 1 1 5 ## 6 1 2 6 ## 7 1 2 7 ## 8 1 2 8 ## 9 1 2 9 ## 10 1 2 10 ## 11 2 1 1 ## 12 2 1 2 ## 13 2 1 3 ## 14 2 1 4 ## 15 2 1 5 ## 16 2 2 6 ## 17 2 2 7 ## 18 2 2 8 ## 19 2 2 9 ## 20 2 2 10 We can also output the crossed and nested using : make_structure(structure=&quot;treatment(2) + individual(5) + treatment:individual&quot;, repeat_obs=1) ## treatment individual treatment_individual ## 1 1 1 1 ## 2 1 2 2 ## 3 1 3 3 ## 4 1 4 4 ## 5 1 5 5 ## 6 2 1 6 ## 7 2 2 7 ## 8 2 3 8 ## 9 2 4 9 ## 10 2 5 10 2.1.4 Temporal structure ds &lt;- make_structure(structure=&quot;year(2)/month(12)/day(30)&quot;, repeat_obs=1) head(ds) ## year month day ## 1 1 1 1 ## 2 1 1 2 ## 3 1 1 3 ## 4 1 1 4 ## 5 1 1 5 ## 6 1 1 6 ds &lt;- make_structure(structure=&quot;year(2) + month(12) + day(30) + year:month:day&quot;, repeat_obs=1) head(ds) ## year month day year_month_day ## 1 1 1 1 1 ## 2 1 1 2 2 ## 3 1 1 3 3 ## 4 1 1 4 4 ## 5 1 1 5 5 ## 6 1 1 6 6 2.1.5 Naming factor levels Rather than just outputting 1 - N levels for the levels names of each factor, we might want to assign names. This can be done for all or some of the grouping factors, using the level_names argument. We can input a list, with an item in the list for each grouping factor we want to assign names, and then a vector of their names, which is the same length of the number of levels in that grouping factor. For example, below we just assign names to the two sexes: make_structure(structure=&quot;sex(2)/individual(5)&quot;, repeat_obs=2, level_names=list(sex=c(&quot;female&quot;,&quot;male&quot;))) ## sex individual ## 1 female 1 ## 2 female 1 ## 3 female 2 ## 4 female 2 ## 5 female 3 ## 6 female 3 ## 7 female 4 ## 8 female 4 ## 9 female 5 ## 10 female 5 ## 11 male 6 ## 12 male 6 ## 13 male 7 ## 14 male 7 ## 15 male 8 ## 16 male 8 ## 17 male 9 ## 18 male 9 ## 19 male 10 ## 20 male 10 And then to the individuals and the sexes make_structure(structure=&quot;sex(2)/individual(5)&quot;, repeat_obs=2, level_names=list(sex=c(&quot;female&quot;,&quot;male&quot;),individual=paste0(&quot;ind_&quot;,1:10))) ## sex individual ## 1 female ind_1 ## 2 female ind_1 ## 3 female ind_2 ## 4 female ind_2 ## 5 female ind_3 ## 6 female ind_3 ## 7 female ind_4 ## 8 female ind_4 ## 9 female ind_5 ## 10 female ind_5 ## 11 male ind_6 ## 12 male ind_6 ## 13 male ind_7 ## 14 male ind_7 ## 15 male ind_8 ## 16 male ind_8 ## 17 male ind_9 ## 18 male ind_9 ## 19 male ind_10 ## 20 male ind_10 "],["2.2-factors.html", "2.2 Factors", " 2.2 Factors In the first sections, we just simulated continuous predictors, varying at the level of the observation. However, we may want to simulate factors with known or fixed effects (i.e. not variables drawn randomly from a particular distribution) at different levels, such as sex or treatment effects. The first thing we want to do is specify a simple data structure, for example 100 observations for each of two sexes: ds &lt;- make_structure(structure=&quot;sex(2)&quot;, repeat_obs=100, level_names=list(sex=c(&quot;female&quot;,&quot;male&quot;))) Then we feed this data structure into the simulate_population() function using the data_structure argument. Note that we no longer need to specify the sample size (n), as this is taken from the number of rows in the data_structure. squid_data &lt;- simulate_population( data_structure = ds, parameters = ... ) In order to tell the parameter list we have effects that vary at different hierarchical levels, we can create additional slots in the parameter list for the grouping factors, so now it will look something like: squid_data &lt;- simulate_population( data_structure = ds, parameters = list( intercept = ..., sex = list( ... ), observation = list( ... ), residual = list( ... ) ) ) The names in the parameter list that relate to the different grouping factors either need to match the name in the data structure exactly (as above) or a ‘group’ argument needs to be given e.g. squid_data &lt;- simulate_population( data_structure = ds, parameters = list( intercept = ..., anything = list( group=&quot;sex,&quot; ... ), observation = list( ... ), residual = list( ... ) ) ) We then need to tell the parameters list that we have fixed effects for this grouping factor, in other words we know the difference in body size between the sexes is 0.5, for example. To do this we specify fixed = TRUE. squid_data &lt;- simulate_population( data_structure = ds, parameters = list( intercept = ..., anything = list( group=&quot;sex,&quot; ... ), observation = list( ... ), residual = list( ... ) ) ) We can then give a beta for all the different levels of that group. Note that there are two ways to specify this, as there also is in linear models in R. First, we can specify an intercept, and contrasts, equivalent to the output of lm(body_mass~sex), which involves specifying the beta for the first level as 0 to make it the baseline level (or any other level that you would like to be the baseline). squid_data &lt;- simulate_population( data_structure = ds, parameters = list( intercept= 10, sex=list( fixed=TRUE, beta=c(0,0.5) ), residual = list( vcov = 0.5 ) ) ) data &lt;- get_population_data(squid_data) boxplot( y ~ factor(sex), data) lm( y ~ factor(sex), data) ## ## Call: ## lm(formula = y ~ factor(sex), data = data) ## ## Coefficients: ## (Intercept) factor(sex)male ## 10.0947 0.4615 Alternately, we can specify no intercept (which defaults to 0), and the means for the two levels as betas( equivalent to lm(body_mass~0+sex)): squid_data &lt;- simulate_population( data_structure = ds, parameters = list( sex=list( fixed=TRUE, beta=c(10,10.5) ), residual = list( vcov = 0.5 ) ) ) data &lt;- get_population_data(squid_data) boxplot( y ~ factor(sex), data) lm( y ~ factor(sex), data) ## ## Call: ## lm(formula = y ~ factor(sex), data = data) ## ## Coefficients: ## (Intercept) factor(sex)male ## 10.100 0.521 lm( y ~ 0+factor(sex), data) ## ## Call: ## lm(formula = y ~ 0 + factor(sex), data = data) ## ## Coefficients: ## factor(sex)female factor(sex)male ## 10.10 10.62 We would recommend the former methods, as this makes things clearer if other factors are simulated. Finally We can also name the levels: THIS SECTION NEEDS TO BE COMPLETED AS THERE IS A POTENTIAL BUG HERE Lets take the example of sex. Factors can be thought of as a hierarchical structure. First we can create a data structure using the squid_data &lt;- simulate_population( data_structure = make_structure(structure = &quot;sex(2)/individual(500)&quot;, repeat_obs=2), parameters = list( intercept= 10, sex=list( fixed=TRUE, names=c(&quot;female&quot;,&quot;male&quot;), beta=c(0,0.5) ), residual = list( vcov = 0.5 ) ) ) data &lt;- get_population_data(squid_data) boxplot( y ~ factor(sex), data) lm( y ~ factor(sex), data) ## ## Call: ## lm(formula = y ~ factor(sex), data = data) ## ## Coefficients: ## (Intercept) factor(sex)2 ## 10.0190 0.4506 2.2.1 Fixed Factor Interactions We might want to simulate an interaction between a continuous predictor and a factor, for example the effect of the environment varying between two sexes. Specifying this using simulate_population() is similar to interactions between two continuous predictors that we have previously encountered (Section 1.3). In the interaction part of the parameter list, we now specify the contrasts between the slopes for environment, using the names that we have assigned the different levels. In the simulation below, males are larger, and have a larger environment slope: squid_data &lt;- simulate_population( data_structure = make_structure(structure = &quot;sex(2)&quot;, repeat_obs=1000), parameters = list( intercept=10, sex=list( fixed=TRUE, names=c(&quot;female&quot;,&quot;male&quot;), beta=c(0,0.5) ), observation= list( names = c(&quot;environment&quot;), beta =c(0.2) ), interactions = list( names=c(&quot;environment:male&quot;), beta = 0.4 ), residual = list( names=&quot;residual&quot;, vcov = 0.1 ) ) ) data &lt;- get_population_data(squid_data) head(data) ## y female male environment residual environment:male sex squid_pop ## 1 9.799118 1 0 -1.5484005 0.10879792 0 1 1 ## 2 9.786182 1 0 -1.8132771 0.14883754 0 1 1 ## 3 10.452793 1 0 1.2296201 0.20686871 0 1 1 ## 4 9.711346 1 0 0.8814921 -0.46495227 0 1 1 ## 5 10.103115 1 0 0.7825892 -0.05340255 0 1 1 ## 6 9.662286 1 0 -0.1233233 -0.31304958 0 1 1 plot(y~environment,data, pch=19, col=scales::alpha(c(1,2),0.5)[factor(data$sex)]) lm( y ~ 0 + factor(sex)*environment, data) ## ## Call: ## lm(formula = y ~ 0 + factor(sex) * environment, data = data) ## ## Coefficients: ## factor(sex)1 factor(sex)2 environment ## 10.0106 10.4914 0.1816 ## factor(sex)2:environment ## 0.4257 "],["2.3-simulating-predictors-at-different-hierarchical-levels.html", "2.3 Simulating predictors at different hierarchical levels", " 2.3 Simulating predictors at different hierarchical levels As well as simulating continuous predictors at the level of the observation, we can also simulate predictors at different hierarchical levels. Lets take the example of a situation where we have repeated measures of individuals. The individuals have traits that are consistently expressed, whilst the environment varies between observations. We can describe variation at these different hierarchical levels as: \\[ y_i = \\beta_0 + Z_j beta_Z + X_i \\beta_X + \\epsilon_{i} \\] \\[ X \\sim MVN(\\mu_X,\\Sigma_X) \\] \\[ Z \\sim MVN(\\mu_Z,\\Sigma_Z) \\] \\[ \\epsilon \\sim N(0,\\sigma^2_\\epsilon) \\] where \\(Z\\) is a matrix of predictors that vary at the individual level (denoted by the subscript \\(j\\)), and \\(X\\) is a matrix of predictors at the observation level (denoted by the index \\(i\\)). In order to simulate from this model, we need a data structure and parameters for each of these levels. To do this, we can either specify a data structure generated using make_structure (outlined previously in Section 2.1), or a pre-existing data structure, to the simulate_population function. We then add in a item to the parameter list, the name of which matches on of the grouping factors in the data structure, and specify the parameters for predictors that vary at that level in the same way as outlined in the previous section (1). This is similar to the fixed factors above, but we are now assuming that the variable is drawn randomly from a distribution, rather than the effects at each level being fixed. Lets imagine that we simulate behaviour, that is a functions of an individual’s size and physiology, and also varies in response to the environment, here temperature and rainfall: squid_data &lt;- simulate_population( data_structure = make_structure(structure = &quot;individual(500)&quot;, repeat_obs=2), parameters = list( individual = list( names = c(&quot;size&quot;,&quot;physiology&quot;), beta = c(0.1,0.2) ), observation = list( names=c(&quot;temperature&quot;,&quot;rainfall&quot;), beta = c(0.2,-0.1) ), residual = list( vcov = 0.5 ) ), response_names=&quot;behaviour&quot; ) data &lt;- get_population_data(squid_data) coef(lm(behaviour ~ size + physiology + temperature + rainfall , data)) ## (Intercept) size physiology temperature rainfall ## 0.005296299 0.120019589 0.188344404 0.212606370 -0.093389838 Here, we have simulated 4 predictors, ‘size’ and ‘physiology’ that vary at the level of the individual, and ‘temperature’ and ‘rainfall’ that vary at the level of the observation. To keep things simple, we will simulate them all as unit normal variables (mean=0 and variance=1). Note, the names of the different grouping factors in the parameter list needs to exactly match those in the data structure. The order does not, however, have to be the same. There are circumstances in which we may want to simulate two sets of effects at the same hierarchical level (for example see permanent environment effects in Section 4.1), in this case we can call them different things in the parameter list, but link them back to the grouping factor, by providing a group name. For example the following will produce the same simulation as above: squid_data &lt;- simulate_population( data_structure = make_structure(structure = &quot;individual(500)&quot;, repeat_obs=2), parameters = list( ind1 = list( group=&quot;individual&quot;, names = c(&quot;size&quot;), beta = c(0.1) ), ind2 = list( group=&quot;individual&quot;, names = c(&quot;physiology&quot;), beta = c(0.2) ), observation = list( names=c(&quot;temperature&quot;,&quot;rainfall&quot;), beta = c(0.2,-0.1) ), residual = list( vcov = 0.5 ) ), response_names=&quot;behaviour&quot; ) It is also worth noting that predictors do not have to be simulated for every grouping factor in the data structure - in this way no variation at that level can be simulated. 2.3.1 Simulating ‘random’ effects In essence, random effects (random intercepts) represent an unobserved/latent predictor (or group of predictors), which varies at a given hierarchical level. In a mixed effect model, the effect at each level of the grouping factor is unknown, and estimated by the model (and assumed to come from a normal distribution). When simulating this, however, we can simply simulate an additional predictor at a particular hierarchical level (\\(z\\)) with mean 0 and a given variance (\\(\\sigma^2_z\\)). \\[ y_{i} = \\beta_0 + z_j + \\epsilon_{i} \\] \\[ z \\sim N(0,\\sigma^2_z) \\] \\[ \\epsilon \\sim N(0,\\sigma^2_\\epsilon) \\] For example we can simulate some between-individual variation as follows: squid_data &lt;- simulate_population( data_structure = make_structure(structure = &quot;individual(500)&quot;, repeat_obs=2), parameters = list( individual = list( vcov = 0.5 ), residual = list( vcov = 0.5 ) ) ) data &lt;- get_population_data(squid_data) head(data) ## y individual_effect residual individual squid_pop ## 1 -1.1813234 -0.7677547 -0.4135688 1 1 ## 2 -1.4279304 -0.7677547 -0.6601757 1 1 ## 3 -1.3035418 -1.0342190 -0.2693228 2 1 ## 4 -1.7798070 -1.0342190 -0.7455880 2 1 ## 5 0.3476342 0.1313052 0.2163291 3 1 ## 6 0.7404912 0.1313052 0.6091861 3 1 library(lme4) short_summary &lt;- function(x) print(summary(x), correlation=FALSE, show.resids=FALSE, ranef.comp = c(&quot;Variance&quot;)) short_summary(lmer(y ~ 1 + (1|individual), data)) ## Linear mixed model fit by REML [&#39;lmerMod&#39;] ## Formula: y ~ 1 + (1 | individual) ## Data: data ## ## REML criterion at convergence: 2641.1 ## ## Random effects: ## Groups Name Variance ## individual (Intercept) 0.4510 ## Residual 0.4834 ## Number of obs: 1000, groups: individual, 500 ## ## Fixed effects: ## Estimate Std. Error t value ## (Intercept) -0.04167 0.03722 -1.119 Note that here we haven’t specified any variable names. In this case the simulated predictors are named by the grouping factors (e.g. individual_effects). 2.3.2 Incorporating existing data structures We could also use an existing data structure, taking the grouping factors and levels from an existing dataset and input them to simulate_population. To demonstrate this, we can use the blue tit dataset provided with the MCMCglmm package. This is a dataset with some continuous variables (tarsus, back (coloration) and hatchdate), and some grouping factors (animal, dam, fosternest and sex), the latter providing a data structure from which to simulate. library(MCMCglmm) data(BTdata) head(BTdata) ## tarsus back animal dam fosternest hatchdate sex ## 1 -1.89229718 1.1464212 R187142 R187557 F2102 -0.6874021 Fem ## 2 1.13610981 -0.7596521 R187154 R187559 F1902 -0.6874021 Male ## 3 0.98468946 0.1449373 R187341 R187568 A602 -0.4279814 Male ## 4 0.37900806 0.2555847 R046169 R187518 A1302 -1.4656641 Male ## 5 -0.07525299 -0.3006992 R046161 R187528 A2602 -1.4656641 Fem ## 6 -1.13519543 1.5577219 R187409 R187945 C2302 0.3502805 Fem squid_data &lt;- simulate_population( data_structure = BTdata[,c(&quot;dam&quot;,&quot;fosternest&quot;)], parameters = list( dam = list( vcov = 0.2 ), fosternest = list( vcov = 0.3 ), residual = list( vcov = 0.5 ) ) ) data &lt;- get_population_data(squid_data) data ## y dam_effect fosternest_effect residual dam fosternest ## 1 -2.937132252 -0.982664335 -3.369690e-01 -1.617498916 R187557 F2102 ## 2 1.414182957 0.022756979 5.412567e-01 0.850169241 R187559 F1902 ## 3 2.040544026 0.892728225 1.073317e-01 1.040484108 R187568 A602 ## 4 0.715975602 0.386024758 1.541644e-01 0.175786429 R187518 A1302 ## 5 0.077983528 0.361800106 -3.422724e-01 0.058455838 R187528 A2602 ## 6 0.752056591 -0.173178282 -3.917243e-01 1.316959138 R187945 C2302 ## 7 0.456474289 0.036229458 -3.471748e-02 0.454962309 Fem3 C1902 ## 8 0.868601536 0.248413969 -5.256845e-02 0.672756021 R187030 C1302 ## 9 -0.268376270 -0.146184125 -7.226241e-02 -0.049929739 R187517 C602 ## 10 -0.741499455 -0.039892840 -6.555561e-01 -0.046050513 R187523 B2202 ## 11 -0.002989776 -0.124938541 4.263142e-01 -0.304365408 R186902 B1402 ## 12 -1.070423839 -0.175564335 -5.836288e-01 -0.311230677 R187400 B1002 ## 13 1.053414806 0.065516733 1.842842e-01 0.803613894 R187932 B502 ## 14 1.787736591 1.415221654 -4.957488e-01 0.868263760 R187582 D1202 ## 15 -0.868889415 -0.145919293 4.260833e-02 -0.765578457 R187545 D1002 ## 16 -0.307742593 0.938121654 3.380675e-01 -1.583931701 R187546 D902 ## 17 -0.431797538 -0.151925666 -6.170898e-01 0.337217967 R187590 D202 ## 18 -0.683371139 -0.181501147 -6.246746e-01 0.122804655 R187548 E902 ## 19 -0.135775375 0.686098434 2.836684e-01 -1.105542246 R187594 E302 ## 20 1.783725832 0.425324012 2.033010e-01 1.155100828 R187588 F2402 ## 21 -0.610615163 -0.982664335 -3.369690e-01 0.709018174 R187557 F2102 ## 22 0.160064784 0.022756979 5.412567e-01 -0.403948932 R187559 F1902 ## 23 0.173875183 -0.334173152 -3.499673e-01 0.858015663 R187531 F1702 ## 24 1.331645707 0.239392559 7.321282e-02 1.019040325 R187592 F1102 ## 25 -1.281063606 -0.876682015 -1.914134e-01 -0.212968204 R187575 F902 ## 26 -0.717739185 0.304848134 -2.195240e-01 -0.803063360 R186912 F102 ## 27 0.448101687 -0.375169748 2.800177e-01 0.543253722 R187914 G1202 ## 28 0.671300134 -0.020467939 -3.181055e-02 0.723578620 R187955 G602 ## 29 -0.978620217 0.038522236 -2.907063e-01 -0.726436198 R187535 G102 ## 30 1.724819354 0.039776425 1.131053e-01 1.571937626 K983388 H1302 ## 31 1.226132073 0.085882416 5.906709e-01 0.549578725 Fem20 H1102 ## 32 -1.747105421 -0.081413940 -3.681970e-01 -1.297494449 R187086 H502 ## 33 0.782712747 0.453441059 -1.279603e-01 0.457231980 R187539 A102 ## 34 1.551881747 -0.538415732 6.787530e-01 1.411544505 R187566 A302 ## 35 0.121292088 -0.369207963 -2.520280e-01 0.742528048 R187569 A502 ## 36 1.970204701 0.892728225 1.073317e-01 0.970144783 R187568 A602 ## 37 -0.293021776 0.440057320 -6.186328e-01 -0.114446257 R187537 A1002 ## 38 -0.057782667 0.386024758 1.541644e-01 -0.597971839 R187518 A1302 ## 39 -0.048599247 0.425198918 6.175613e-02 -0.535554296 R187916 A1602 ## 40 -0.938620716 0.248542607 5.423939e-05 -1.187217562 R186903 A18B02 ## 41 0.133083762 0.214894964 4.088018e-01 -0.490612979 R187512 A2202 ## 42 0.860467034 0.079167406 -1.149872e-01 0.896286781 R187562 A2302 ## 43 -0.615176030 0.361800106 -3.422724e-01 -0.634703721 R187528 A2602 ## 44 2.246240287 -0.233946327 7.635800e-01 1.716606628 R187563 A2702 ## 45 -1.507335458 0.376116263 -8.046107e-01 -1.078841057 R187571 C2602 ## 46 0.292980446 -0.173178282 -3.917243e-01 0.857882992 R187945 C2302 ## 47 0.823243191 0.036229458 -3.471748e-02 0.821731211 Fem3 C1902 ## 48 0.588924191 0.248413969 -5.256845e-02 0.393078676 R187030 C1302 ## 49 -0.940201027 -0.146184125 -7.226241e-02 -0.721754496 R187517 C602 ## 50 -0.513205321 -0.039892840 -6.555561e-01 0.182243621 R187523 B2202 ## 51 -0.724626482 -0.124938541 4.263142e-01 -1.026002114 R186902 B1402 ## 52 0.788641724 -0.363432761 1.240342e-01 1.028040283 R187958 B1302 ## 53 -0.481008389 0.201981526 -9.498330e-01 0.266843071 R187953 B902 ## 54 0.619980295 0.065516733 1.842842e-01 0.370179383 R187932 B502 ## 55 0.142952180 0.149434231 -4.190192e-01 0.412537105 R187547 B202 ## 56 -0.800568524 -0.734358660 1.962683e-01 -0.262478177 R187947 D1302 ## 57 1.159748881 1.415221654 -4.957488e-01 0.240276050 R187582 D1202 ## 58 -1.252448741 -0.145919293 4.260833e-02 -1.149137782 R187545 D1002 ## 59 1.669705003 0.938121654 3.380675e-01 0.393515896 R187546 D902 ## 60 -0.269082616 0.017471981 -2.561387e-01 -0.030415891 R187239 D802 ## 61 0.391039192 -0.151925666 -6.170898e-01 1.160054696 R187590 D202 ## 62 -0.526375568 -0.326022177 7.147631e-01 -0.915116445 R187521 E2002 ## 63 1.346694408 0.037134065 6.110632e-01 0.698497094 R187931 E1902 ## 64 -0.149922174 -0.237309580 -3.344377e-01 0.421825088 R187577 E1802 ## 65 -1.500895026 -0.257246243 -5.394855e-01 -0.704163299 R187292 E1602 ## 66 -0.356710797 -0.350022472 9.163182e-02 -0.098320145 R187516 E1402 ## 67 -0.562635783 -0.084123415 1.344880e-01 -0.613000380 R187166 E1202 ## 68 -0.169576091 0.400590810 -1.345142e-01 -0.435652655 R187579 E1102 ## 69 -2.372321188 -0.181501147 -6.246746e-01 -1.566145394 R187548 E902 ## 70 -0.036150728 0.622141753 -1.363224e-01 -0.521970047 R187155 E702 ## 71 1.342692208 0.686098434 2.836684e-01 0.372925337 R187594 E302 ## 72 0.541019541 0.425324012 2.033010e-01 -0.087605464 R187588 F2402 ## 73 -1.573540467 -0.982664335 -3.369690e-01 -0.253907130 R187557 F2102 ## 74 1.045758766 0.022756979 5.412567e-01 0.481745051 R187559 F1902 ## 75 0.543877690 -0.334173152 -3.499673e-01 1.228018169 R187531 F1702 ## 76 0.880165692 -0.247280664 -8.681709e-02 1.214263446 R187963 F1502 ## 77 1.634840229 0.239392559 7.321282e-02 1.322234847 R187592 F1102 ## 78 -2.068716426 -0.876682015 -1.914134e-01 -1.000621023 R187575 F902 ## 79 0.313900248 -0.590733962 1.203352e-01 0.784298982 Fem5 F202 ## 80 0.819986077 -0.004697426 4.617048e-01 0.362978668 R187930 G2202 ## 81 -2.287492752 -0.423573302 -6.551589e-01 -1.208760557 R187598 G1602 ## 82 0.895199949 -0.375169748 2.800177e-01 0.990351983 R187914 G1202 ## 83 -1.642309037 -0.875575586 -3.104208e-01 -0.456312697 R187957 G702 ## 84 -0.608937280 -0.020467939 -3.181055e-02 -0.556658795 R187955 G602 ## 85 -0.989782734 -0.369995911 2.715435e-01 -0.891330328 R187552 G502 ## 86 -0.250258545 0.038522236 -2.907063e-01 0.001925474 R187535 G102 ## 87 -1.659502534 -0.449565527 -4.419478e-01 -0.767989177 R187527 H3602 ## 88 0.994310678 0.397638724 8.962073e-01 -0.299535392 R187595 H3202 ## 89 1.426822399 -0.316302672 6.816448e-01 1.061480251 P322402 H2802 ## 90 0.598234355 0.039776425 1.131053e-01 0.445352628 K983388 H1302 ## 91 0.706140985 0.085882416 5.906709e-01 0.029587638 Fem20 H1102 ## 92 -0.378139457 -0.081413940 -3.681970e-01 0.071471515 R187086 H502 ## 93 1.592235677 0.453441059 -1.279603e-01 1.266754910 R187539 A102 ## 94 0.591948143 -0.538415732 6.787530e-01 0.451610902 R187566 A302 ## 95 -0.532076144 -0.369207963 -2.520280e-01 0.089159816 R187569 A502 ## 96 2.279468757 0.892728225 1.073317e-01 1.279408839 R187568 A602 ## 97 0.416060518 0.440057320 -6.186328e-01 0.594636037 R187537 A1002 ## 98 0.782163287 0.386024758 1.541644e-01 0.241974115 R187518 A1302 ## 99 -0.884604939 0.425198918 6.175613e-02 -1.371559988 R187916 A1602 ## 100 -2.062477437 0.212233413 -1.454838e+00 -0.819872745 R187515 A1802 ## 101 0.066195859 0.248542607 5.423939e-05 -0.182400987 R186903 A18B02 ## 102 0.693769002 0.214894964 4.088018e-01 0.070072260 R187512 A2202 ## 103 -1.003912315 0.079167406 -1.149872e-01 -0.968092567 R187562 A2302 ## 104 0.387215893 0.361800106 -3.422724e-01 0.367688202 R187528 A2602 ## 105 0.839978699 -0.233946327 7.635800e-01 0.310345040 R187563 A2702 ## 106 -1.330893656 0.376116263 -8.046107e-01 -0.902399255 R187571 C2602 ## 107 0.095431479 0.330987175 1.789974e-01 -0.414553142 R187553 C2402 ## 108 -1.970901465 -0.173178282 -3.917243e-01 -1.405998919 R187945 C2302 ## 109 -0.714741408 0.036229458 -3.471748e-02 -0.716253388 Fem3 C1902 ## 110 1.068510694 0.248413969 -5.256845e-02 0.872665179 R187030 C1302 ## 111 0.341424854 -0.146184125 -7.226241e-02 0.559871384 R187517 C602 ## 112 -0.839386421 -0.037475154 -1.203438e-01 -0.681567503 R046109 C402 ## 113 1.474705045 0.055995214 8.575211e-01 0.561188757 R187920 C202 ## 114 -0.436060396 -0.516796877 2.087507e-01 -0.128014195 R186907 C102 ## 115 -1.374437664 0.225592756 -1.018603e+00 -0.581427892 R187541 B2502 ## 116 -1.942779910 -0.039892840 -6.555561e-01 -1.247330968 R187523 B2202 ## 117 0.545225105 -0.493691357 3.004287e-01 0.738487811 R187927 B2102 ## 118 -0.163127014 -0.111398129 -1.521776e-01 0.100448761 R187942 B1902 ## 119 0.595807497 -0.334349430 6.143428e-01 0.315814101 R187937 B1802 ## 120 -1.911887898 -0.669975872 -8.278828e-01 -0.414029185 R187824 B1702 ## 121 -0.914958273 0.137175200 -8.455448e-01 -0.206588669 R186908 B1602 ## 122 1.713516833 -0.124938541 4.263142e-01 1.412141201 R186902 B1402 ## 123 -0.532409354 -0.363432761 1.240342e-01 -0.293010795 R187958 B1302 ## 124 1.263905104 0.296251502 3.544193e-01 0.613234270 R187944 B1202 ## 125 -2.180773535 -0.175564335 -5.836288e-01 -1.421580373 R187400 B1002 ## 126 -0.986064429 0.201981526 -9.498330e-01 -0.238212969 R187953 B902 ## 127 -0.324835330 0.065516733 1.842842e-01 -0.574636241 R187932 B502 ## 128 0.747923904 0.149434231 -4.190192e-01 1.017508829 R187547 B202 ## 129 -1.474786582 -0.734358660 1.962683e-01 -0.936696235 R187947 D1302 ## 130 0.681896714 1.415221654 -4.957488e-01 -0.237576117 R187582 D1202 ## 131 -0.119157718 0.542002940 -4.820973e-01 -0.179063383 R187964 D1102 ## 132 0.028629910 -0.145919293 4.260833e-02 0.131940869 R187545 D1002 ## 133 1.179785603 0.938121654 3.380675e-01 -0.096403504 R187546 D902 ## 134 0.550410422 0.017471981 -2.561387e-01 0.789077147 R187239 D802 ## 135 0.061851112 -0.379178095 8.386089e-01 -0.397579691 R187940 D402 ## 136 -0.380647201 -0.151925666 -6.170898e-01 0.388368303 R187590 D202 ## 137 -0.097576315 -0.309613254 1.407537e-01 0.071283285 R187524 D102 ## 138 1.213315964 -0.326022177 7.147631e-01 0.824575087 R187521 E2002 ## 139 1.007836522 0.037134065 6.110632e-01 0.359639207 R187931 E1902 ## 140 -0.087389811 -0.237309580 -3.344377e-01 0.484357452 R187577 E1802 ## 141 -0.131630468 0.356110860 -1.518256e-01 -0.335915701 R188000 E1702 ## 142 0.206457936 -0.257246243 -5.394855e-01 1.003189663 R187292 E1602 ## 143 -0.003632720 -0.350022472 9.163182e-02 0.254757933 R187516 E1402 ## 144 0.610734207 1.072797611 -1.287072e-02 -0.449192681 R187999 E1302 ## 145 0.483382341 -0.084123415 1.344880e-01 0.433017744 R187166 E1202 ## 146 -0.324898361 -0.181501147 -6.246746e-01 0.481277433 R187548 E902 ## 147 -0.591142613 -0.576615256 6.632146e-02 -0.080848820 R187961 E802 ## 148 -0.638753630 0.622141753 -1.363224e-01 -1.124572949 R187155 E702 ## 149 -0.471034879 0.083747423 -3.856264e-01 -0.169155911 R187399 E402 ## 150 0.301602327 0.686098434 2.836684e-01 -0.668164543 R187594 E302 ## 151 0.434152770 0.425324012 2.033010e-01 -0.194472234 R187588 F2402 ## 152 -1.592213464 -0.982664335 -3.369690e-01 -0.272580127 R187557 F2102 ## 153 0.801077065 0.022756979 5.412567e-01 0.237063349 R187559 F1902 ## 154 -0.621540900 -0.334173152 -3.499673e-01 0.062599580 R187531 F1702 ## 155 -0.939823309 -0.247280664 -8.681709e-02 -0.605725555 R187963 F1502 ## 156 -0.124791547 0.239392559 7.321282e-02 -0.437396929 R187592 F1102 ## 157 -1.250366543 -0.876682015 -1.914134e-01 -0.182271141 R187575 F902 ## 158 0.289135744 -0.590733962 1.203352e-01 0.759534478 Fem5 F202 ## 159 -0.015018318 0.304848134 -2.195240e-01 -0.100342493 R186912 F102 ## 160 -0.118994312 -0.004697426 4.617048e-01 -0.576001721 R187930 G2202 ## 161 -1.002347238 -0.928240870 2.811892e-01 -0.355295603 R187513 G1902 ## 162 0.196308459 -0.423573302 -6.551589e-01 1.275040654 R187598 G1602 ## 163 -0.681343842 -0.108818088 -1.759891e-01 -0.396536611 R187918 G1302 ## 164 -1.044310104 -0.875575586 -3.104208e-01 0.141686236 R187957 G702 ## 165 0.563677136 -0.020467939 -3.181055e-02 0.615955621 R187955 G602 ## 166 0.453043817 -0.369995911 2.715435e-01 0.551496224 R187552 G502 ## 167 0.026423124 0.038522236 -2.907063e-01 0.278607143 R187535 G102 ## 168 -0.197169514 -0.449565527 -4.419478e-01 0.694343843 R187527 H3602 ## 169 0.329665133 0.397638724 8.962073e-01 -0.964180937 R187595 H3202 ## 170 -1.279226267 0.575374376 -8.700445e-01 -0.984556162 R187925 H3102 ## 171 1.314900778 0.365151761 -7.693727e-03 0.957442744 R187936 H3002 ## 172 1.818693201 -0.316302672 6.816448e-01 1.453351052 P322402 H2802 ## 173 1.032006910 0.039776425 1.131053e-01 0.879125182 K983388 H1302 ## 174 0.315331498 0.085882416 5.906709e-01 -0.361221849 Fem20 H1102 ## 175 0.705021107 0.864567730 -1.448539e-01 -0.014692746 Fem2 H702 ## 176 -2.086427147 -0.081413940 -3.681970e-01 -1.636816175 R187086 H502 ## 177 0.680301914 0.453441059 -1.279603e-01 0.354821148 R187539 A102 ## 178 0.980121786 -0.538415732 6.787530e-01 0.839784545 R187566 A302 ## 179 -0.001926666 -0.369207963 -2.520280e-01 0.619309294 R187569 A502 ## 180 -0.238075510 0.892728225 1.073317e-01 -1.238135428 R187568 A602 ## 181 -2.072555600 0.440057320 -6.186328e-01 -1.893980081 R187537 A1002 ## 182 1.144192755 0.386024758 1.541644e-01 0.604003583 R187518 A1302 ## 183 0.499572574 0.425198918 6.175613e-02 0.012617525 R187916 A1602 ## 184 -1.425903810 0.212233413 -1.454838e+00 -0.183299118 R187515 A1802 ## 185 -0.563237774 0.248542607 5.423939e-05 -0.811834620 R186903 A18B02 ## 186 0.606688051 0.214894964 4.088018e-01 -0.017008690 R187512 A2202 ## 187 0.186841588 -0.406819566 9.762541e-03 0.583898614 R187343 A22B02 ## 188 -0.657405408 0.079167406 -1.149872e-01 -0.621585660 R187562 A2302 ## 189 1.426246572 -0.134111951 3.439330e-01 1.216425482 R186911 A2502 ## 190 0.399701198 0.361800106 -3.422724e-01 0.380173508 R187528 A2602 ## 191 0.176904129 -0.233946327 7.635800e-01 -0.352729531 R187563 A2702 ## 192 -0.291097121 0.376116263 -8.046107e-01 0.137397280 R187571 C2602 ## 193 1.040624439 0.330987175 1.789974e-01 0.530639817 R187553 C2402 ## 194 -1.664067804 -0.173178282 -3.917243e-01 -1.099165258 R187945 C2302 ## 195 -0.330881217 0.036229458 -3.471748e-02 -0.332393197 Fem3 C1902 ## 196 1.357047775 0.248413969 -5.256845e-02 1.161202260 R187030 C1302 ## 197 -0.540963858 -0.146184125 -7.226241e-02 -0.322517327 R187517 C602 ## 198 0.288243710 -0.037475154 -1.203438e-01 0.446062628 R046109 C402 ## 199 0.482098940 0.055995214 8.575211e-01 -0.431417348 R187920 C202 ## 200 0.979860049 -0.516796877 2.087507e-01 1.287906249 R186907 C102 ## 201 0.242774638 0.225592756 -1.018603e+00 1.035784410 R187541 B2502 ## 202 -0.517425662 -0.039892840 -6.555561e-01 0.178023279 R187523 B2202 ## 203 -0.258254653 -0.111398129 -1.521776e-01 0.005321121 R187942 B1902 ## 204 0.610627853 -0.334349430 6.143428e-01 0.330634457 R187937 B1802 ## 205 -0.067086193 -0.669975872 -8.278828e-01 1.430772520 R187824 B1702 ## 206 -0.104185109 0.137175200 -8.455448e-01 0.604184495 R186908 B1602 ## 207 0.838007890 -0.124938541 4.263142e-01 0.536632258 R186902 B1402 ## 208 -1.229554420 -0.363432761 1.240342e-01 -0.990155860 R187958 B1302 ## 209 1.257400508 0.296251502 3.544193e-01 0.606729674 R187944 B1202 ## 210 -1.301031096 -0.876060326 2.540586e-01 -0.679029418 R187902 B1102 ## 211 -1.791121144 -0.175564335 -5.836288e-01 -1.031927982 R187400 B1002 ## 212 -1.022511539 0.201981526 -9.498330e-01 -0.274660080 R187953 B902 ## 213 -0.500287628 0.065516733 1.842842e-01 -0.750088540 R187932 B502 ## 214 -0.678124789 0.149434231 -4.190192e-01 -0.408539864 R187547 B202 ## 215 -1.037625252 -0.734358660 1.962683e-01 -0.499534905 R187947 D1302 ## 216 0.344298208 1.415221654 -4.957488e-01 -0.575174623 R187582 D1202 ## 217 -1.603424714 0.542002940 -4.820973e-01 -1.663330378 R187964 D1102 ## 218 0.449808462 -0.145919293 4.260833e-02 0.553119421 R187545 D1002 ## 219 1.654302628 0.938121654 3.380675e-01 0.378113520 R187546 D902 ## 220 0.164596744 0.017471981 -2.561387e-01 0.403263469 R187239 D802 ## 221 1.239506560 -0.379178095 8.386089e-01 0.780075757 R187940 D402 ## 222 -0.668808548 -0.151925666 -6.170898e-01 0.100206956 R187590 D202 ## 223 -0.992063424 -0.309613254 1.407537e-01 -0.823203824 R187524 D102 ## 224 0.398613581 -0.326022177 7.147631e-01 0.009872704 R187521 E2002 ## 225 1.240293036 0.037134065 6.110632e-01 0.592095721 R187931 E1902 ## 226 0.293872019 -0.237309580 -3.344377e-01 0.865619282 R187577 E1802 ## 227 0.115290801 0.356110860 -1.518256e-01 -0.088994432 R188000 E1702 ## 228 -0.646430163 -0.257246243 -5.394855e-01 0.150301564 R187292 E1602 ## 229 -0.221625227 -0.350022472 9.163182e-02 0.036765426 R187516 E1402 ## 230 1.909693689 1.072797611 -1.287072e-02 0.849766801 R187999 E1302 ## 231 -0.184572069 -0.084123415 1.344880e-01 -0.234936666 R187166 E1202 ## 232 0.806066697 0.400590810 -1.345142e-01 0.539990133 R187579 E1102 ## 233 1.194563768 -0.181501147 -6.246746e-01 2.000739562 R187548 E902 ## 234 -0.696388786 -0.576615256 6.632146e-02 -0.186094994 R187961 E802 ## 235 -0.073135982 0.622141753 -1.363224e-01 -0.558955301 R187155 E702 ## 236 -0.561685874 0.083747423 -3.856264e-01 -0.259806907 R187399 E402 ## 237 -0.193927126 0.686098434 2.836684e-01 -1.163693997 R187594 E302 ## 238 1.513019409 -0.210478672 1.911573e+00 -0.188075248 R187948 F2702 ## 239 1.414114039 0.425324012 2.033010e-01 0.785489034 R187588 F2402 ## 240 -0.362445916 -0.982664335 -3.369690e-01 0.957187420 R187557 F2102 ## 241 -0.406386716 0.022756979 5.412567e-01 -0.970400432 R187559 F1902 ## 242 -0.981652775 -0.334173152 -3.499673e-01 -0.297512296 R187531 F1702 ## 243 0.332558939 -0.247280664 -8.681709e-02 0.666656693 R187963 F1502 ## 244 1.609485585 0.239392559 7.321282e-02 1.296880203 R187592 F1102 ## 245 -2.194685296 -0.876682015 -1.914134e-01 -1.126589894 R187575 F902 ## 246 -0.416498571 -0.590733962 1.203352e-01 0.053900163 Fem5 F202 ## 247 0.237631796 0.304848134 -2.195240e-01 0.152307621 R186912 F102 ## 248 0.086965367 -0.004697426 4.617048e-01 -0.370042042 R187930 G2202 ## 249 -0.797155222 -0.928240870 2.811892e-01 -0.150103587 R187513 G1902 ## 250 0.775905023 0.875401762 -2.371332e-01 0.137636444 R187000 G1802 ## 251 -0.467949731 -0.108818088 -1.759891e-01 -0.183142499 R187918 G1302 ## 252 -0.295114779 -0.375169748 2.800177e-01 -0.199962745 R187914 G1202 ## 253 -1.717771969 -0.875575586 -3.104208e-01 -0.531775629 R187957 G702 ## 254 -0.894049911 -0.020467939 -3.181055e-02 -0.841771426 R187955 G602 ## 255 -0.419652733 -0.369995911 2.715435e-01 -0.321200327 R187552 G502 ## 256 -0.200082953 0.038522236 -2.907063e-01 0.052101065 R187535 G102 ## 257 -0.742573150 -0.449565527 -4.419478e-01 0.148940208 R187527 H3602 ## 258 1.017527112 0.397638724 8.962073e-01 -0.276318958 R187595 H3202 ## 259 -0.393065757 0.575374376 -8.700445e-01 -0.098395652 R187925 H3102 ## 260 1.281698615 0.365151761 -7.693727e-03 0.924240582 R187936 H3002 ## 261 0.167160132 -0.316302672 6.816448e-01 -0.198182016 P322402 H2802 ## 262 -0.971316083 -0.162437927 -2.714420e-01 -0.537436156 R186918 H2502 ## 263 0.093342863 -0.487332603 -9.592929e-02 0.676604759 R187637 H1802 ## 264 0.691428388 0.039776425 1.131053e-01 0.538546661 K983388 H1302 ## 265 1.600680888 0.085882416 5.906709e-01 0.924127540 Fem20 H1102 ## 266 -0.391744404 0.864567730 -1.448539e-01 -1.111458258 Fem2 H702 ## 267 -0.109795105 -0.081413940 -3.681970e-01 0.339815866 R187086 H502 ## 268 0.267362282 0.453441059 -1.279603e-01 -0.058118484 R187539 A102 ## 269 0.234990030 -0.538415732 6.787530e-01 0.094652789 R187566 A302 ## 270 -0.685531128 -0.369207963 -2.520280e-01 -0.064295168 R187569 A502 ## 271 0.160917426 0.892728225 1.073317e-01 -0.839142491 R187568 A602 ## 272 -0.546757519 0.440057320 -6.186328e-01 -0.368182001 R187537 A1002 ## 273 0.499428739 0.386024758 1.541644e-01 -0.040760433 R187518 A1302 ## 274 1.949712294 0.425198918 6.175613e-02 1.462757246 R187916 A1602 ## 275 -1.481830090 0.212233413 -1.454838e+00 -0.239225398 R187515 A1802 ## 276 0.264554939 0.248542607 5.423939e-05 0.015958093 R186903 A18B02 ## 277 0.279215998 0.214894964 4.088018e-01 -0.344480743 R187512 A2202 ## 278 0.004889074 -0.406819566 9.762541e-03 0.401946099 R187343 A22B02 ## 279 -0.630766231 0.079167406 -1.149872e-01 -0.594946483 R187562 A2302 ## 280 -0.017696671 -0.134111951 3.439330e-01 -0.227517761 R186911 A2502 ## 281 -0.145023843 0.361800106 -3.422724e-01 -0.164551533 R187528 A2602 ## 282 0.576364209 -0.233946327 7.635800e-01 0.046730550 R187563 A2702 ## 283 -1.772563948 0.376116263 -8.046107e-01 -1.344069547 R187571 C2602 ## 284 0.341615681 0.330987175 1.789974e-01 -0.168368941 R187553 C2402 ## 285 0.056820537 -0.173178282 -3.917243e-01 0.621723083 R187945 C2302 ## 286 0.413895092 -0.254349317 4.360524e-02 0.624639165 R187398 C2202 ## 287 -0.258345053 0.036229458 -3.471748e-02 -0.259857033 Fem3 C1902 ## 288 0.618762948 0.248413969 -5.256845e-02 0.422917433 R187030 C1302 ## 289 -0.652236143 -0.146184125 -7.226241e-02 -0.433789612 R187517 C602 ## 290 -1.381368862 -0.037475154 -1.203438e-01 -1.223549945 R046109 C402 ## 291 0.560483071 0.055995214 8.575211e-01 -0.353033216 R187920 C202 ## 292 0.209163596 0.225592756 -1.018603e+00 1.002173368 R187541 B2502 ## 293 -0.680463504 -0.039892840 -6.555561e-01 0.014985437 R187523 B2202 ## 294 -0.693692094 -0.493691357 3.004287e-01 -0.500429388 R187927 B2102 ## 295 0.052495450 -0.111398129 -1.521776e-01 0.316071224 R187942 B1902 ## 296 1.714260661 -0.334349430 6.143428e-01 1.434267265 R187937 B1802 ## 297 -2.174155321 -0.669975872 -8.278828e-01 -0.676296608 R187824 B1702 ## 298 -0.958887788 0.137175200 -8.455448e-01 -0.250518184 R186908 B1602 ## 299 0.314888600 -0.124938541 4.263142e-01 0.013512968 R186902 B1402 ## 300 -0.214642494 -0.363432761 1.240342e-01 0.024756065 R187958 B1302 ## 301 1.047592663 0.296251502 3.544193e-01 0.396921829 R187944 B1202 ## 302 0.308611173 -0.876060326 2.540586e-01 0.930612852 R187902 B1102 ## 303 -0.551591195 -0.175564335 -5.836288e-01 0.207601967 R187400 B1002 ## 304 -0.500276511 0.201981526 -9.498330e-01 0.247574948 R187953 B902 ## 305 0.694952706 0.065516733 1.842842e-01 0.445151795 R187932 B502 ## 306 0.202435659 0.149434231 -4.190192e-01 0.472020585 R187547 B202 ## 307 -0.379750981 -0.734358660 1.962683e-01 0.158339365 R187947 D1302 ## 308 0.324784663 1.415221654 -4.957488e-01 -0.594688168 R187582 D1202 ## 309 0.392422092 0.542002940 -4.820973e-01 0.332516427 R187964 D1102 ## 310 -0.256167337 -0.145919293 4.260833e-02 -0.152856378 R187545 D1002 ## 311 1.205699557 0.938121654 3.380675e-01 -0.070489550 R187546 D902 ## 312 -0.190244316 0.017471981 -2.561387e-01 0.048422409 R187239 D802 ## 313 0.182721083 -0.379178095 8.386089e-01 -0.276709719 R187940 D402 ## 314 -1.898217019 -0.151925666 -6.170898e-01 -1.129201515 R187590 D202 ## 315 -0.140273903 -0.309613254 1.407537e-01 0.028585698 R187524 D102 ## 316 1.326901163 -0.326022177 7.147631e-01 0.938160286 R187521 E2002 ## 317 -0.531682377 0.037134065 6.110632e-01 -1.179879691 R187931 E1902 ## 318 -0.388113806 -0.237309580 -3.344377e-01 0.183633457 R187577 E1802 ## 319 0.225069557 0.356110860 -1.518256e-01 0.020784324 R188000 E1702 ## 320 -1.703873323 -0.257246243 -5.394855e-01 -0.907141596 R187292 E1602 ## 321 -0.672101013 -0.350022472 9.163182e-02 -0.413710360 R187516 E1402 ## 322 0.178533513 1.072797611 -1.287072e-02 -0.881393374 R187999 E1302 ## 323 -0.436027890 -0.084123415 1.344880e-01 -0.486392487 R187166 E1202 ## 324 -0.907972616 0.400590810 -1.345142e-01 -1.174049180 R187579 E1102 ## 325 -1.416827153 -0.181501147 -6.246746e-01 -0.610651360 R187548 E902 ## 326 -1.180611522 -0.576615256 6.632146e-02 -0.670317730 R187961 E802 ## 327 -0.585390936 0.622141753 -1.363224e-01 -1.071210255 R187155 E702 ## 328 0.541858488 0.686098434 2.836684e-01 -0.427908383 R187594 E302 ## 329 0.338116648 -0.210478672 1.911573e+00 -1.362978009 R187948 F2702 ## 330 -0.362525408 0.425324012 2.033010e-01 -0.991150413 R187588 F2402 ## 331 -1.297248267 -0.982664335 -3.369690e-01 0.022385070 R187557 F2102 ## 332 0.523093782 0.022756979 5.412567e-01 -0.040919934 R187559 F1902 ## 333 -0.776946777 -0.334173152 -3.499673e-01 -0.092806297 R187531 F1702 ## 334 -2.495309540 -0.247280664 -8.681709e-02 -2.161211786 R187963 F1502 ## 335 -0.022337021 0.239392559 7.321282e-02 -0.334942404 R187592 F1102 ## 336 -2.192383920 -0.876682015 -1.914134e-01 -1.124288517 R187575 F902 ## 337 -0.173429527 -0.590733962 1.203352e-01 0.296969207 Fem5 F202 ## 338 0.918425260 0.304848134 -2.195240e-01 0.833101085 R186912 F102 ## 339 0.496034793 -0.004697426 4.617048e-01 0.039027384 R187930 G2202 ## 340 -1.001393399 -0.928240870 2.811892e-01 -0.354341764 R187513 G1902 ## 341 1.297735979 0.875401762 -2.371332e-01 0.659467400 R187000 G1802 ## 342 0.128448789 -0.423573302 -6.551589e-01 1.207180984 R187598 G1602 ## 343 -1.808492709 -0.108818088 -1.759891e-01 -1.523685478 R187918 G1302 ## 344 -0.536441239 -0.375169748 2.800177e-01 -0.441289204 R187914 G1202 ## 345 -0.607495687 -0.875575586 -3.104208e-01 0.578500653 R187957 G702 ## 346 -2.001821761 -0.020467939 -3.181055e-02 -1.949543276 R187955 G602 ## 347 1.019524333 -0.369995911 2.715435e-01 1.117976739 R187552 G502 ## 348 0.191631077 0.038522236 -2.907063e-01 0.443815095 R187535 G102 ## 349 -0.685869096 -0.449565527 -4.419478e-01 0.205644261 R187527 H3602 ## 350 3.009330873 0.397638724 8.962073e-01 1.715484803 R187595 H3202 ## 351 -0.829070225 0.575374376 -8.700445e-01 -0.534400120 R187925 H3102 ## 352 0.173141362 0.311978590 4.693473e-01 -0.608184576 R187001 H2602 ## 353 -0.401763339 -0.162437927 -2.714420e-01 0.032116588 R186918 H2502 ## 354 -1.379324324 -0.487332603 -9.592929e-02 -0.796062428 R187637 H1802 ## 355 -1.166364905 0.039776425 1.131053e-01 -1.319246633 K983388 H1302 ## 356 -0.039680757 0.085882416 5.906709e-01 -0.716234105 Fem20 H1102 ## 357 -0.159156578 -0.081413940 -3.681970e-01 0.290454393 R187086 H502 ## 358 1.420507904 0.073739494 4.519824e-01 0.894786009 R187009 H102 ## 359 -1.303288954 0.509818512 -7.659755e-01 -1.047131949 R187926 G402 ## 360 -0.262329557 0.509818512 -7.659755e-01 -0.006172552 R187926 G402 ## 361 -0.920581816 0.509818512 -7.659755e-01 -0.664424812 R187926 G402 ## 362 -0.780895885 0.509818512 -7.659755e-01 -0.524738880 R187926 G402 ## 363 -1.550645286 0.509818512 -7.659755e-01 -1.294488281 R187926 G402 ## 364 0.737123841 0.509818512 -7.659755e-01 0.993280846 R187926 G402 ## 365 1.329062598 0.721603999 -1.843861e-01 0.791844708 R187951 F2502 ## 366 -0.936650753 0.509818512 -7.659755e-01 -0.680493748 R187926 G402 ## 367 0.299371032 0.721603999 -1.843861e-01 -0.237846859 R187951 F2502 ## 368 0.116467153 0.509818512 -7.659755e-01 0.372624158 R187926 G402 ## 369 -1.023519781 -0.146184125 4.360524e-02 -0.920940900 R187517 C2202 ## 370 -0.072487150 0.083747423 -1.018603e+00 0.862367955 R187399 B2502 ## 371 -1.618963103 -0.493691357 8.386089e-01 -1.963880644 R187927 D402 ## 372 0.715164928 0.721603999 -1.843861e-01 0.177947038 R187951 F2502 ## 373 0.040179836 0.509818512 -7.659755e-01 0.296336841 R187926 G402 ## 374 -0.079015443 0.079167406 1.073317e-01 -0.265514542 R187562 A602 ## 375 -1.003562193 0.179908731 -9.962574e-01 -0.187213481 R186910 A1202 ## 376 -0.784261033 -0.423573302 6.175613e-02 -0.422443862 R187598 A1602 ## 377 -0.609870900 0.386024758 -3.422724e-01 -0.653623242 R187518 A2602 ## 378 -0.565907077 -0.146184125 4.360524e-02 -0.463328195 R187517 C2202 ## 379 0.432532413 0.083747423 -1.018603e+00 1.367387518 R187399 B2502 ## 380 0.015554563 0.017471981 -4.190192e-01 0.417101739 R187239 B202 ## 381 0.061749738 -0.493691357 8.386089e-01 -0.283167803 R187927 D402 ## 382 0.673803592 0.721603999 -1.843861e-01 0.136585701 R187951 F2502 ## 383 0.118554610 0.037134065 4.617048e-01 -0.380284290 R187931 G2202 ## 384 -1.278259108 0.509818512 -7.659755e-01 -1.022102103 R187926 G402 ## 385 1.677356979 0.311978590 4.519824e-01 0.913395987 R187001 H102 ## 386 -0.618936005 0.079167406 1.073317e-01 -0.805435104 R187562 A602 ## 387 -0.515998591 0.179908731 -9.962574e-01 0.300350122 R186910 A1202 ## 388 -0.451213454 -0.423573302 6.175613e-02 -0.089396283 R187598 A1602 ## 389 0.734746753 0.386024758 -3.422724e-01 0.690994410 R187518 A2602 ## 390 -0.435658147 -0.369995911 -8.046107e-01 0.738948429 R187552 C2602 ## 391 -0.599824649 -0.146184125 4.360524e-02 -0.497245767 R187517 C2202 ## 392 0.300253960 -0.254349317 -7.226241e-02 0.626865682 R187398 C602 ## 393 1.194324615 0.365151761 8.575211e-01 -0.028348220 R187936 C202 ## 394 -0.577854981 0.083747423 -1.018603e+00 0.357000124 R187399 B2502 ## 395 -1.285492969 0.017471981 -4.190192e-01 -0.883945793 R187239 B202 ## 396 1.290886334 -0.493691357 8.386089e-01 0.945968793 R187927 D402 ## 397 -0.088799220 0.065516733 -6.170898e-01 0.462773886 R187932 D202 ## 398 -0.883782641 -0.350022472 1.407537e-01 -0.674513822 R187516 D102 ## 399 -0.294241243 -0.210478672 -1.518256e-01 0.068063055 R187948 E1702 ## 400 -0.107510725 -0.576615256 -1.287072e-02 0.481975254 R187961 E1302 ## 401 -0.266132963 -0.084123415 -1.345142e-01 -0.047495302 R187166 E1102 ## 402 0.560469365 0.425324012 -1.363224e-01 0.271467787 R187588 E702 ## 403 1.593080429 0.721603999 -1.843861e-01 1.055862539 R187951 F2502 ## 404 -0.024107299 0.022756979 -3.369690e-01 0.290104724 R187559 F2102 ## 405 0.802973775 0.248413969 -3.499673e-01 0.904527134 R187030 F1702 ## 406 0.732550339 0.239392559 -1.914134e-01 0.684571168 R187592 F902 ## 407 -0.644632907 -0.197360465 1.203352e-01 -0.567607669 R187941 F202 ## 408 -0.712548644 0.037134065 4.617048e-01 -1.211387544 R187931 G2202 ## 409 -0.598302540 -0.124938541 -2.371332e-01 -0.236230816 R186902 G1802 ## 410 -1.121540846 -0.375169748 -3.181055e-02 -0.714560552 R187914 G602 ## 411 -0.316569566 0.509818512 -7.659755e-01 -0.060412561 R187926 G402 ## 412 -1.227094241 -0.081413940 -2.907063e-01 -0.854974046 R187086 G102 ## 413 1.837628443 0.330987175 8.962073e-01 0.610433921 R187553 H3202 ## 414 -0.358563103 -0.204979072 -2.714420e-01 0.117857969 R186917 H2502 ## 415 -0.469297778 0.085882416 1.131053e-01 -0.668285497 Fem20 H1302 ## 416 0.947827543 0.311978590 4.519824e-01 0.183866551 R187001 H102 ## 417 0.833387381 -0.538415732 -1.279603e-01 1.499763405 R187566 A102 ## 418 1.195952201 0.453441059 6.787530e-01 0.063758169 R187539 A302 ## 419 0.219939800 0.079167406 1.073317e-01 0.033440702 R187562 A602 ## 420 -0.700425056 -0.233946327 -6.186328e-01 0.152154111 R187563 A1002 ## 421 0.115449106 0.179908731 -9.962574e-01 0.931797819 R186910 A1202 ## 422 0.414005654 -0.423573302 6.175613e-02 0.775822825 R187598 A1602 ## 423 -2.390229839 -0.449565527 -1.454838e+00 -0.485826208 R187527 A1802 ## 424 -0.391584445 -0.316302672 4.088018e-01 -0.484083551 P322402 A2202 ## 425 0.212041722 -0.369207963 9.762541e-03 0.571487145 R187569 A22B02 ## 426 1.266823739 0.892728225 -1.149872e-01 0.489082667 R187568 A2302 ## 427 -1.259133134 0.386024758 -3.422724e-01 -1.302885477 R187518 A2602 ## 428 -1.577509188 -0.369995911 -8.046107e-01 -0.402902612 R187552 C2602 ## 429 0.175656097 0.397638724 1.789974e-01 -0.400980073 R187595 C2402 ## 430 1.166813609 0.686098434 -3.917243e-01 0.872439440 R187594 C2302 ## 431 0.066495475 -0.146184125 4.360524e-02 0.169074357 R187517 C2202 ## 432 -1.043743605 -0.334173152 -5.256845e-02 -0.657001999 R187531 C1302 ## 433 -2.043890716 -0.254349317 -7.226241e-02 -1.717278993 R187398 C602 ## 434 1.316934378 0.365151761 8.575211e-01 0.094261543 R187936 C202 ## 435 -1.248454538 0.137175200 -8.278828e-01 -0.557746896 R186908 B1702 ## 436 1.124948106 0.875401762 4.263142e-01 -0.176767829 R187000 B1402 ## 437 1.105354461 0.304848134 2.540586e-01 0.546447680 R186912 B1102 ## 438 0.101266501 0.036229458 -5.836288e-01 0.648665870 Fem3 B1002 ## 439 -0.291726361 0.017471981 -4.190192e-01 0.109820815 R187239 B202 ## 440 0.782711615 -0.145919293 3.380675e-01 0.590563455 R187545 D902 ## 441 -0.425547565 -0.039037275 2.393801e-01 -0.625890437 R187540 D602 ## 442 -0.317189899 0.065516733 -6.170898e-01 0.234383207 R187932 D202 ## 443 -0.595920259 -0.350022472 1.407537e-01 -0.386651441 R187516 D102 ## 444 -0.207555576 -0.210478672 -1.518256e-01 0.154748722 R187948 E1702 ## 445 -0.176160563 -0.309613254 9.163182e-02 0.041820871 R187524 E1402 ## 446 -0.144044797 -0.576615256 -1.287072e-02 0.445441182 R187961 E1302 ## 447 -0.785916749 0.400590810 1.344880e-01 -1.320995572 R187579 E1202 ## 448 -0.180357336 -0.084123415 -1.345142e-01 0.038280326 R187166 E1102 ## 449 -0.019552148 -0.516796877 4.654219e-01 0.031822830 R186907 E1002 ## 450 -0.463768134 0.425324012 -1.363224e-01 -0.752769712 R187588 E702 ## 451 0.305428889 -0.173178282 2.836684e-01 0.194938734 R187945 E302 ## 452 0.804070258 0.721603999 -1.843861e-01 0.266852368 R187951 F2502 ## 453 1.394529731 0.622141753 2.033010e-01 0.569086986 R187155 F2402 ## 454 0.243930929 0.022756979 -3.369690e-01 0.558142952 R187559 F2102 ## 455 -1.288635787 -0.982664335 5.412567e-01 -0.847228189 R187557 F1902 ## 456 0.232801692 0.248413969 -3.499673e-01 0.334355051 R187030 F1702 ## 457 0.166966412 0.542002940 -8.681709e-02 -0.288219439 R187964 F1502 ## 458 -0.620266009 0.239392559 -1.914134e-01 -0.668245180 R187592 F902 ## 459 0.234667680 -0.197360465 1.203352e-01 0.311692917 R187941 F202 ## 460 0.367510089 0.037134065 4.617048e-01 -0.131328811 R187931 G2202 ## 461 -0.269826417 -0.124938541 -2.371332e-01 0.092245308 R186902 G1802 ## 462 0.123418521 0.425198918 -6.551589e-01 0.353378496 R187916 G1602 ## 463 1.927707430 -0.020467939 2.800177e-01 1.668157656 R187955 G1202 ## 464 -0.093822262 -0.375169748 -3.181055e-02 0.313158032 R187914 G602 ## 465 -1.122072958 0.509818512 -7.659755e-01 -0.865915953 R187926 G402 ## 466 -1.091269434 -0.081413940 -2.907063e-01 -0.719149239 R187086 G102 ## 467 0.443046227 0.212233413 -4.419478e-01 0.672760645 R187515 H3602 ## 468 1.327736982 0.330987175 8.962073e-01 0.100542461 R187553 H3202 ## 469 -0.243327070 -0.204979072 -2.714420e-01 0.233094002 R186917 H2502 ## 470 -0.052641008 0.085882416 1.131053e-01 -0.251628727 Fem20 H1302 ## 471 0.724990347 0.039776425 5.906709e-01 0.094542991 K983388 H1102 ## 472 0.026458713 0.038522236 -3.681970e-01 0.356133508 R187535 H502 ## 473 1.384275301 0.311978590 4.519824e-01 0.620314309 R187001 H102 ## 474 -0.008053465 -0.538415732 -1.279603e-01 0.658322559 R187566 A102 ## 475 1.721724054 0.453441059 6.787530e-01 0.589530022 R187539 A302 ## 476 -0.571254559 -0.406819566 -2.520280e-01 0.087593004 R187343 A502 ## 477 1.082654499 0.079167406 1.073317e-01 0.896155400 R187562 A602 ## 478 -0.220281048 -0.233946327 -6.186328e-01 0.632298119 R187563 A1002 ## 479 -1.098069732 0.179908731 -9.962574e-01 -0.281721020 R186910 A1202 ## 480 0.720995604 -0.423573302 6.175613e-02 1.082812775 R187598 A1602 ## 481 -1.664911516 -0.449565527 -1.454838e+00 0.239492116 R187527 A1802 ## 482 -1.206692365 -0.316302672 4.088018e-01 -1.299191470 P322402 A2202 ## 483 -0.064674649 -0.369207963 9.762541e-03 0.294770774 R187569 A22B02 ## 484 0.478811139 0.892728225 -1.149872e-01 -0.298929933 R187568 A2302 ## 485 -0.091684619 0.386024758 -3.422724e-01 -0.135436961 R187518 A2602 ## 486 -0.570133357 -0.369995911 -8.046107e-01 0.604473219 R187552 C2602 ## 487 -1.105537990 0.686098434 -3.917243e-01 -1.399912160 R187594 C2302 ## 488 0.707312676 -0.146184125 4.360524e-02 0.809891558 R187517 C2202 ## 489 -1.024291440 -0.175564335 -3.471748e-02 -0.814009627 R187400 C1902 ## 490 -1.216910916 -0.334173152 -5.256845e-02 -0.830169310 R187531 C1302 ## 491 -0.822138169 -0.254349317 -7.226241e-02 -0.495526447 R187398 C602 ## 492 1.187778535 0.365151761 8.575211e-01 -0.034894300 R187936 C202 ## 493 -0.573122141 0.083747423 -1.018603e+00 0.361732964 R187399 B2502 ## 494 -1.428428645 -0.326022177 -6.555561e-01 -0.446850367 R187521 B2202 ## 495 0.349961718 0.137175200 -8.278828e-01 1.040669360 R186908 B1702 ## 496 -1.413044960 -0.669975872 -8.455448e-01 0.102475715 R187824 B1602 ## 497 0.814598604 0.875401762 4.263142e-01 -0.487117331 R187000 B1402 ## 498 -0.164460368 -0.734358660 3.544193e-01 0.215478960 R187947 B1202 ## 499 1.007631972 0.304848134 2.540586e-01 0.448725190 R186912 B1102 ## 500 -0.947731480 0.036229458 -5.836288e-01 -0.400332111 Fem3 B1002 ## 501 -1.717097720 -0.363432761 -9.498330e-01 -0.403831973 R187958 B902 ## 502 0.697194978 -0.162437927 -9.087227e-01 1.768355579 R186918 B702 ## 503 -0.651879507 -0.151925666 1.842842e-01 -0.684238020 R187590 B502 ## 504 -0.159108247 0.017471981 -4.190192e-01 0.242438929 R187239 B202 ## 505 -0.990602942 -0.181501147 -4.957488e-01 -0.313352972 R187548 D1202 ## 506 1.138242918 0.938121654 4.260833e-02 0.157512930 R187546 D1002 ## 507 0.484360224 -0.145919293 3.380675e-01 0.292212063 R187545 D902 ## 508 -0.190752171 -0.039037275 2.393801e-01 -0.391095043 R187540 D602 ## 509 -1.743761971 -0.493691357 8.386089e-01 -2.088679512 R187927 D402 ## 510 -1.102743470 0.065516733 -6.170898e-01 -0.551170364 R187932 D202 ## 511 0.101592528 -0.350022472 1.407537e-01 0.310861346 R187516 D102 ## 512 -0.181401328 -0.210478672 -1.518256e-01 0.180902971 R187948 E1702 ## 513 -0.856422071 -0.309613254 9.163182e-02 -0.638440637 R187524 E1402 ## 514 -0.138691330 -0.576615256 -1.287072e-02 0.450794649 R187961 E1302 ## 515 0.597414227 0.400590810 1.344880e-01 0.062335404 R187579 E1202 ## 516 -0.923031723 -0.084123415 -1.345142e-01 -0.704394062 R187166 E1102 ## 517 -0.036113354 -0.516796877 4.654219e-01 0.015261624 R186907 E1002 ## 518 0.711541442 1.415221654 -6.246746e-01 -0.079005566 R187582 E902 ## 519 2.423660842 1.072797611 6.632146e-02 1.284541768 R187999 E802 ## 520 0.187710281 0.425324012 -1.363224e-01 -0.101291297 R187588 E702 ## 521 0.462760110 -0.173178282 2.836684e-01 0.352269954 R187945 E302 ## 522 0.079995020 0.721603999 -1.843861e-01 -0.457222870 R187951 F2502 ## 523 0.879861322 0.622141753 2.033010e-01 0.054418577 R187155 F2402 ## 524 -0.222660245 0.022756979 -3.369690e-01 0.091551778 R187559 F2102 ## 525 0.876744433 -0.982664335 5.412567e-01 1.318152031 R187557 F1902 ## 526 -1.015189538 0.248413969 -3.499673e-01 -0.913636180 R187030 F1702 ## 527 0.912614340 0.542002940 -8.681709e-02 0.457428489 R187964 F1502 ## 528 -0.708324340 -0.876682015 7.321282e-02 0.095144852 R187575 F1102 ## 529 -0.381210431 0.239392559 -1.914134e-01 -0.429189602 R187592 F902 ## 530 -0.599669877 -0.197360465 1.203352e-01 -0.522644640 R187941 F202 ## 531 2.638024273 0.037134065 4.617048e-01 2.139185373 R187931 G2202 ## 532 0.067210016 0.292313976 2.811892e-01 -0.506293195 R187573 G1902 ## 533 -0.424742660 0.425198918 -6.551589e-01 -0.194782685 R187916 G1602 ## 534 0.109656525 0.575374376 -1.759891e-01 -0.289728707 R187925 G1302 ## 535 -0.205224649 -0.020467939 2.800177e-01 -0.464774424 R187955 G1202 ## 536 0.958422084 -0.375169748 -3.181055e-02 1.365402378 R187914 G602 ## 537 -0.774833016 0.509818512 -7.659755e-01 -0.518676011 R187926 G402 ## 538 0.236725927 -0.081413940 -2.907063e-01 0.608846122 R187086 G102 ## 539 -1.754728523 0.212233413 -4.419478e-01 -1.525014105 R187515 H3602 ## 540 0.251952783 0.330987175 8.962073e-01 -0.975241739 R187553 H3202 ## 541 -1.085787068 -0.204979072 -2.714420e-01 -0.609365996 R186917 H2502 ## 542 -2.309988396 -0.875575586 -9.592929e-02 -1.338483518 R187957 H1802 ## 543 0.596259830 0.085882416 1.131053e-01 0.397272110 Fem20 H1302 ## 544 0.680381861 0.039776425 5.906709e-01 0.049934505 K983388 H1102 ## 545 -1.300356547 0.248542607 -1.448539e-01 -1.404045278 R186903 H702 ## 546 -0.408097648 0.038522236 -3.681970e-01 -0.078422853 R187535 H502 ## 547 0.208732924 -0.134111951 1.363722e-01 0.206472686 R186911 H302 ## 548 1.087627357 0.311978590 4.519824e-01 0.323666365 R187001 H102 ## 549 0.588069500 -0.538415732 -1.279603e-01 1.254445524 R187566 A102 ## 550 1.580870040 0.453441059 6.787530e-01 0.448676008 R187539 A302 ## 551 -0.780376181 -0.406819566 -2.520280e-01 -0.121528618 R187343 A502 ## 552 2.185371862 0.079167406 1.073317e-01 1.998872764 R187562 A602 ## 553 -0.687098005 -0.233946327 -6.186328e-01 0.165481162 R187563 A1002 ## 554 -1.074709659 0.179908731 -9.962574e-01 -0.258360946 R186910 A1202 ## 555 1.412464469 0.361800106 1.541644e-01 0.896499949 R187528 A1302 ## 556 0.516701397 -0.423573302 6.175613e-02 0.878518568 R187598 A1602 ## 557 -1.816012903 -0.449565527 -1.454838e+00 0.088390729 R187527 A1802 ## 558 1.878662249 0.864567730 5.423939e-05 1.014040280 Fem2 A18B02 ## 559 0.490123637 -0.316302672 4.088018e-01 0.397624531 P322402 A2202 ## 560 -0.965470901 -0.369207963 9.762541e-03 -0.606025478 R187569 A22B02 ## 561 1.666313051 0.892728225 -1.149872e-01 0.888571979 R187568 A2302 ## 562 -0.487904845 0.386024758 -3.422724e-01 -0.531657187 R187518 A2602 ## 563 0.394123239 0.440057320 7.635800e-01 -0.809514069 R187537 A2702 ## 564 -1.251564730 -0.369995911 -8.046107e-01 -0.076958154 R187552 C2602 ## 565 0.712747737 0.397638724 1.789974e-01 0.136111567 R187595 C2402 ## 566 0.375681117 0.686098434 -3.917243e-01 0.081306948 R187594 C2302 ## 567 -0.537329328 -0.146184125 4.360524e-02 -0.434750446 R187517 C2202 ## 568 -0.544690463 -0.175564335 -3.471748e-02 -0.334408650 R187400 C1902 ## 569 0.599496724 -0.334173152 -5.256845e-02 0.986238330 R187531 C1302 ## 570 -0.304848199 0.001849956 -1.203438e-01 -0.186354392 R046108 C402 ## 571 1.469565958 0.365151761 8.575211e-01 0.246893123 R187936 C202 ## 572 -1.296572362 0.083747423 -1.018603e+00 -0.361717257 R187399 B2502 ## 573 0.033581665 -0.326022177 -6.555561e-01 1.015159944 R187521 B2202 ## 574 -0.241511309 -0.379178095 3.004287e-01 -0.162761865 R187940 B2102 ## 575 -0.329319587 0.137175200 -8.278828e-01 0.361388055 R186908 B1702 ## 576 -0.637280697 -0.669975872 -8.455448e-01 0.878239978 R187824 B1602 ## 577 -0.155896958 0.201981526 1.240342e-01 -0.481912686 R187953 B1302 ## 578 -0.286970584 -0.734358660 3.544193e-01 0.092968744 R187947 B1202 ## 579 -1.107947878 0.304848134 2.540586e-01 -1.666854660 R186912 B1102 ## 580 -0.969257397 0.036229458 -5.836288e-01 -0.421858028 Fem3 B1002 ## 581 -0.344788942 -0.363432761 -9.498330e-01 0.968476804 R187958 B902 ## 582 -0.298406363 -0.151925666 1.842842e-01 -0.330764876 R187590 B502 ## 583 -0.324243338 0.017471981 -4.190192e-01 0.077303838 R187239 B202 ## 584 0.700377411 0.296251502 1.962683e-01 0.207857595 R187944 D1302 ## 585 -0.988348797 -0.181501147 -4.957488e-01 -0.311098827 R187548 D1202 ## 586 0.504285712 -0.247280664 -4.820973e-01 1.233663653 R187963 D1102 ## 587 0.315931247 0.938121654 4.260833e-02 -0.664798742 R187546 D1002 ## 588 -0.089931030 -0.145919293 3.380675e-01 -0.282079191 R187545 D902 ## 589 -0.303642623 0.149434231 -2.561387e-01 -0.196938148 R187547 D802 ## 590 0.772285207 -0.039037275 2.393801e-01 0.571942335 R187540 D602 ## 591 0.781477274 -0.493691357 8.386089e-01 0.436559733 R187927 D402 ## 592 -1.140708072 0.065516733 -6.170898e-01 -0.589134966 R187932 D202 ## 593 -0.113145845 -0.350022472 1.407537e-01 0.096122973 R187516 D102 ## 594 1.478595363 -0.039892840 7.147631e-01 0.803725149 R187523 E2002 ## 595 -0.824322179 -0.210478672 -1.518256e-01 -0.462017881 R187948 E1702 ## 596 -0.264930028 -0.237309580 -5.394855e-01 0.511865036 R187577 E1602 ## 597 -0.711498263 -0.309613254 9.163182e-02 -0.493516828 R187524 E1402 ## 598 -0.858567028 -0.576615256 -1.287072e-02 -0.269081049 R187961 E1302 ## 599 0.406536486 0.400590810 1.344880e-01 -0.128542336 R187579 E1202 ## 600 0.845014657 -0.084123415 -1.345142e-01 1.063652318 R187166 E1102 ## 601 0.417360502 1.415221654 -6.246746e-01 -0.373186506 R187582 E902 ## 602 2.198616027 1.072797611 6.632146e-02 1.059496953 R187999 E802 ## 603 0.046192261 0.425324012 -1.363224e-01 -0.242809318 R187588 E702 ## 604 -0.450565617 -0.173178282 2.836684e-01 -0.561055772 R187945 E302 ## 605 2.697953631 0.356110860 1.911573e+00 0.430269443 R188000 F2702 ## 606 2.364142814 0.721603999 -1.843861e-01 1.826924924 R187951 F2502 ## 607 0.422637479 0.622141753 2.033010e-01 -0.402805266 R187155 F2402 ## 608 -1.703209619 0.022756979 -3.369690e-01 -1.388997596 R187559 F2102 ## 609 -0.981522083 -0.982664335 5.412567e-01 -0.540114485 R187557 F1902 ## 610 1.051870855 0.248413969 -3.499673e-01 1.153424213 R187030 F1702 ## 611 2.035231182 0.542002940 -8.681709e-02 1.580045332 R187964 F1502 ## 612 -0.544182176 -0.876682015 7.321282e-02 0.259287016 R187575 F1102 ## 613 0.126156028 0.239392559 -1.914134e-01 0.078176856 R187592 F902 ## 614 -1.134601495 -0.197360465 1.203352e-01 -1.057576258 R187941 F202 ## 615 -1.446907572 -0.876060326 -2.195240e-01 -0.351323287 R187902 F102 ## 616 -0.007999660 0.037134065 4.617048e-01 -0.506838560 R187931 G2202 ## 617 -1.201809721 0.292313976 2.811892e-01 -1.775312931 R187573 G1902 ## 618 -2.049055977 -0.124938541 -2.371332e-01 -1.686984252 R186902 G1802 ## 619 1.113149841 0.425198918 -6.551589e-01 1.343109816 R187916 G1602 ## 620 0.580169047 0.575374376 -1.759891e-01 0.180783815 R187925 G1302 ## 621 -0.307974502 -0.020467939 2.800177e-01 -0.567524276 R187955 G1202 ## 622 -0.133187557 -0.375169748 -3.181055e-02 0.273792738 R187914 G602 ## 623 -0.601777524 -0.081413940 -2.907063e-01 -0.229657328 R187086 G102 ## 624 -0.310729641 0.212233413 -4.419478e-01 -0.081015224 R187515 H3602 ## 625 1.300360726 0.330987175 8.962073e-01 0.073166205 R187553 H3202 ## 626 0.995732618 0.055995214 -7.693727e-03 0.947431132 R187920 H3002 ## 627 1.095077239 0.214894964 6.816448e-01 0.198537454 R187512 H2802 ## 628 -1.367437767 -0.204979072 -2.714420e-01 -0.891016695 R186917 H2502 ## 629 -1.062299215 -0.875575586 -9.592929e-02 -0.090794336 R187957 H1802 ## 630 1.028566421 0.085882416 1.131053e-01 0.829578702 Fem20 H1302 ## 631 0.296481374 0.039776425 5.906709e-01 -0.333965983 K983388 H1102 ## 632 0.371441084 0.038522236 -3.681970e-01 0.701115879 R187535 H502 ## 633 0.937077025 -0.134111951 1.363722e-01 0.934816788 R186911 H302 ## 634 0.231806634 0.311978590 4.519824e-01 -0.532154358 R187001 H102 ## 635 -1.209535511 -0.538415732 -1.279603e-01 -0.543159487 R187566 A102 ## 636 0.685984819 0.453441059 6.787530e-01 -0.446209213 R187539 A302 ## 637 -0.038413879 -0.406819566 -2.520280e-01 0.620433684 R187343 A502 ## 638 0.402946875 0.079167406 1.073317e-01 0.216447777 R187562 A602 ## 639 0.241456480 -0.233946327 -6.186328e-01 1.094035647 R187563 A1002 ## 640 -1.466719816 0.179908731 -9.962574e-01 -0.650371103 R186910 A1202 ## 641 0.715431350 0.361800106 1.541644e-01 0.199466830 R187528 A1302 ## 642 -0.483611126 -0.423573302 6.175613e-02 -0.121793956 R187598 A1602 ## 643 -1.438075700 -0.449565527 -1.454838e+00 0.466327932 R187527 A1802 ## 644 0.787867567 0.864567730 5.423939e-05 -0.076754402 Fem2 A18B02 ## 645 -0.196071600 -0.316302672 4.088018e-01 -0.288570705 P322402 A2202 ## 646 -0.517734535 -0.369207963 9.762541e-03 -0.158289112 R187569 A22B02 ## 647 0.525461793 0.892728225 -1.149872e-01 -0.252279278 R187568 A2302 ## 648 -0.305390060 0.386024758 -3.422724e-01 -0.349142402 R187518 A2602 ## 649 0.327880419 0.440057320 7.635800e-01 -0.875756888 R187537 A2702 ## 650 -1.558095101 -0.369995911 -8.046107e-01 -0.383488525 R187552 C2602 ## 651 -0.122625415 0.397638724 1.789974e-01 -0.699261585 R187595 C2402 ## 652 0.854647035 0.686098434 -3.917243e-01 0.560272866 R187594 C2302 ## 653 -0.809545516 -0.146184125 4.360524e-02 -0.706966635 R187517 C2202 ## 654 -1.185002901 -0.175564335 -3.471748e-02 -0.974721089 R187400 C1902 ## 655 0.206064291 -0.334173152 -5.256845e-02 0.592805897 R187531 C1302 ## 656 -1.910606409 -0.254349317 -7.226241e-02 -1.583994686 R187398 C602 ## 657 0.376314713 0.001849956 -1.203438e-01 0.494808521 R046108 C402 ## 658 1.001930066 0.365151761 8.575211e-01 -0.220742769 R187936 C202 ## 659 -0.855563573 0.083747423 -1.018603e+00 0.079291532 R187399 B2502 ## 660 -0.821646824 -0.326022177 -6.555561e-01 0.159931455 R187521 B2202 ## 661 -0.511193865 -0.379178095 3.004287e-01 -0.432444421 R187940 B2102 ## 662 -1.552153457 -0.334349430 -1.521776e-01 -1.065626382 R187937 B1902 ## 663 0.552956447 0.137175200 -8.278828e-01 1.243664089 R186908 B1702 ## 664 -2.178767304 -0.669975872 -8.455448e-01 -0.663246629 R187824 B1602 ## 665 1.663410707 0.875401762 4.263142e-01 0.361694772 R187000 B1402 ## 666 0.954221115 0.201981526 1.240342e-01 0.628205387 R187953 B1302 ## 667 -1.028429430 -0.734358660 3.544193e-01 -0.648490102 R187947 B1202 ## 668 0.757788308 0.304848134 2.540586e-01 0.198881526 R186912 B1102 ## 669 0.619293279 0.036229458 -5.836288e-01 1.166692648 Fem3 B1002 ## 670 -1.370374967 -0.363432761 -9.498330e-01 -0.057109221 R187958 B902 ## 671 -1.064675296 -0.151925666 1.842842e-01 -1.097033808 R187590 B502 ## 672 0.612749738 0.017471981 -4.190192e-01 1.014296915 R187239 B202 ## 673 0.668878420 0.296251502 1.962683e-01 0.176358605 R187944 D1302 ## 674 -0.747268416 -0.181501147 -4.957488e-01 -0.070018446 R187548 D1202 ## 675 -0.321321865 0.938121654 4.260833e-02 -1.302051853 R187546 D1002 ## 676 0.302732443 -0.145919293 3.380675e-01 0.110584283 R187545 D902 ## 677 0.127556238 0.149434231 -2.561387e-01 0.234260713 R187547 D802 ## 678 -0.097238833 -0.039037275 2.393801e-01 -0.297581704 R187540 D602 ## 679 0.142783910 -0.493691357 8.386089e-01 -0.202133631 R187927 D402 ## 680 -2.087545196 0.065516733 -6.170898e-01 -1.535972090 R187932 D202 ## 681 -0.356370434 -0.350022472 1.407537e-01 -0.147101615 R187516 D102 ## 682 1.023442253 -0.039892840 7.147631e-01 0.348572039 R187523 E2002 ## 683 1.074518818 -0.004697426 6.110632e-01 0.468152994 R187930 E1902 ## 684 0.014700980 -0.257246243 -3.344377e-01 0.606384906 R187292 E1802 ## 685 -0.828850915 -0.210478672 -1.518256e-01 -0.466546616 R187948 E1702 ## 686 -1.552873350 -0.237309580 -5.394855e-01 -0.776078286 R187577 E1602 ## 687 -0.240646549 -0.309613254 9.163182e-02 -0.022665114 R187524 E1402 ## 688 -1.215254082 -0.576615256 -1.287072e-02 -0.625768103 R187961 E1302 ## 689 0.866776638 0.400590810 1.344880e-01 0.331697815 R187579 E1202 ## 690 -0.953576937 -0.084123415 -1.345142e-01 -0.734939276 R187166 E1102 ## 691 -0.543840079 1.415221654 -6.246746e-01 -1.334387087 R187582 E902 ## 692 0.245540858 1.072797611 6.632146e-02 -0.893578217 R187999 E802 ## 693 0.649626890 0.425324012 -1.363224e-01 0.360625312 R187588 E702 ## 694 0.191455287 0.225592756 -3.856264e-01 0.351488921 R187541 E402 ## 695 -0.421335530 -0.173178282 2.836684e-01 -0.531825685 R187945 E302 ## 696 1.983669961 0.356110860 1.911573e+00 -0.284014228 R188000 F2702 ## 697 -1.046841423 0.721603999 -1.843861e-01 -1.584059314 R187951 F2502 ## 698 -0.275402610 0.022756979 -3.369690e-01 0.038809413 R187559 F2102 ## 699 -0.150991290 -0.982664335 5.412567e-01 0.290416308 R187557 F1902 ## 700 -0.573871422 0.248413969 -3.499673e-01 -0.472318063 R187030 F1702 ## 701 0.779824422 0.542002940 -8.681709e-02 0.324638571 R187964 F1502 ## 702 -0.961208884 -0.876682015 7.321282e-02 -0.157739692 R187575 F1102 ## 703 -0.491746423 0.239392559 -1.914134e-01 -0.539725594 R187592 F902 ## 704 -0.246641994 -0.197360465 1.203352e-01 -0.169616757 R187941 F202 ## 705 -1.392928142 -0.876060326 -2.195240e-01 -0.297343857 R187902 F102 ## 706 0.002678480 0.037134065 4.617048e-01 -0.496160420 R187931 G2202 ## 707 0.305180416 0.292313976 2.811892e-01 -0.268322795 R187573 G1902 ## 708 -0.224973265 -0.124938541 -2.371332e-01 0.137098459 R186902 G1802 ## 709 0.736141775 0.132566366 9.865656e-02 0.504918847 R186901 G1702 ## 710 0.406195339 0.425198918 -6.551589e-01 0.636155314 R187916 G1602 ## 711 1.229412618 0.575374376 -1.759891e-01 0.830027385 R187925 G1302 ## 712 0.660815951 -0.020467939 2.800177e-01 0.401266176 R187955 G1202 ## 713 -0.091962976 -0.375169748 -3.181055e-02 0.315017319 R187914 G602 ## 714 0.962178885 0.376116263 2.715435e-01 0.314519116 R187571 G502 ## 715 -0.473561911 0.509818512 -7.659755e-01 -0.217404906 R187926 G402 ## 716 -0.947023215 -0.081413940 -2.907063e-01 -0.574903020 R187086 G102 ## 717 -0.110610178 0.212233413 -4.419478e-01 0.119104240 R187515 H3602 ## 718 0.766236515 0.330987175 8.962073e-01 -0.460958006 R187553 H3202 ## 719 0.120632490 -0.108818088 -8.700445e-01 1.099495058 R187918 H3102 ## 720 0.472943917 0.055995214 -7.693727e-03 0.424642431 R187920 H3002 ## 721 0.010795344 0.214894964 6.816448e-01 -0.885744441 R187512 H2802 ## 722 -0.406182743 -0.204979072 -2.714420e-01 0.070238329 R186917 H2502 ## 723 -1.164375061 -0.875575586 -9.592929e-02 -0.192870182 R187957 H1802 ## 724 0.245138438 0.085882416 1.131053e-01 0.046150719 Fem20 H1302 ## 725 2.098437636 0.039776425 5.906709e-01 1.467990279 K983388 H1102 ## 726 -0.260410960 0.248542607 -1.448539e-01 -0.364099691 R186903 H702 ## 727 -0.087626646 0.038522236 -3.681970e-01 0.242048149 R187535 H502 ## 728 0.469908469 -0.134111951 1.363722e-01 0.467648232 R186911 H302 ## 729 0.778630360 0.311978590 4.519824e-01 0.014669368 R187001 H102 ## 730 -0.455646583 -0.538415732 -1.279603e-01 0.210729441 R187566 A102 ## 731 -0.050577544 0.453441059 6.787530e-01 -1.182771576 R187539 A302 ## 732 -1.650828133 -0.406819566 -2.520280e-01 -0.991980570 R187343 A502 ## 733 0.689344043 0.079167406 1.073317e-01 0.502844945 R187562 A602 ## 734 -0.934520690 -0.233946327 -6.186328e-01 -0.081941524 R187563 A1002 ## 735 -0.656012495 0.179908731 -9.962574e-01 0.160336217 R186910 A1202 ## 736 0.447773997 0.361800106 1.541644e-01 -0.068190523 R187528 A1302 ## 737 -0.354643351 -0.423573302 6.175613e-02 0.007173820 R187598 A1602 ## 738 -1.642135049 -0.449565527 -1.454838e+00 0.262268582 R187527 A1802 ## 739 0.575778695 0.864567730 5.423939e-05 -0.288843274 Fem2 A18B02 ## 740 -0.343043444 -0.316302672 4.088018e-01 -0.435542550 P322402 A2202 ## 741 -0.697393014 -0.369207963 9.762541e-03 -0.337947591 R187569 A22B02 ## 742 1.722931102 0.892728225 -1.149872e-01 0.945190031 R187568 A2302 ## 743 1.243575790 0.555487463 3.439330e-01 0.344155286 R186909 A2502 ## 744 -0.096283305 0.386024758 -3.422724e-01 -0.140035648 R187518 A2602 ## 745 1.056661753 0.440057320 7.635800e-01 -0.146975554 R187537 A2702 ## 746 -1.886412043 -0.369995911 -8.046107e-01 -0.711805467 R187552 C2602 ## 747 1.138154233 0.397638724 1.789974e-01 0.561518062 R187595 C2402 ## 748 0.064252112 0.686098434 -3.917243e-01 -0.230122058 R187594 C2302 ## 749 0.824823333 -0.146184125 4.360524e-02 0.927402215 R187517 C2202 ## 750 0.366461709 -0.175564335 -3.471748e-02 0.576743522 R187400 C1902 ## 751 -1.688600870 -0.334173152 -5.256845e-02 -1.301859264 R187531 C1302 ## 752 -1.154431400 0.001849956 -1.203438e-01 -1.035937593 R046108 C402 ## 753 -0.700549279 0.083747423 -1.018603e+00 0.234305826 R187399 B2502 ## 754 -1.381862740 -0.326022177 -6.555561e-01 -0.400284462 R187521 B2202 ## 755 -0.418874842 -0.379178095 3.004287e-01 -0.340125398 R187940 B2102 ## 756 -0.458979230 -0.334349430 -1.521776e-01 0.027547845 R187937 B1902 ## 757 0.110523005 -0.111398129 6.143428e-01 -0.392421692 R187942 B1802 ## 758 -1.134166452 0.137175200 -8.278828e-01 -0.443458810 R186908 B1702 ## 759 -2.178740541 -0.669975872 -8.455448e-01 -0.663219866 R187824 B1602 ## 760 0.781516936 0.875401762 4.263142e-01 -0.520198999 R187000 B1402 ## 761 0.931220958 0.201981526 1.240342e-01 0.605205230 R187953 B1302 ## 762 -0.516731967 -0.734358660 3.544193e-01 -0.136792639 R187947 B1202 ## 763 -0.292921403 0.036229458 -5.836288e-01 0.254477967 Fem3 B1002 ## 764 -1.034402853 -0.363432761 -9.498330e-01 0.278862893 R187958 B902 ## 765 1.215090760 -0.151925666 1.842842e-01 1.182732247 R187590 B502 ## 766 -1.447158398 0.017471981 -4.190192e-01 -1.045611222 R187239 B202 ## 767 -0.111145324 0.296251502 1.962683e-01 -0.603665140 R187944 D1302 ## 768 -0.102180093 -0.181501147 -4.957488e-01 0.575069878 R187548 D1202 ## 769 -1.763069597 -0.247280664 -4.820973e-01 -1.033691657 R187963 D1102 ## 770 0.305602711 0.938121654 4.260833e-02 -0.675127277 R187546 D1002 ## 771 0.055635771 -0.145919293 3.380675e-01 -0.136512390 R187545 D902 ## 772 -0.113837839 0.149434231 -2.561387e-01 -0.007133364 R187547 D802 ## 773 0.820331746 -0.039037275 2.393801e-01 0.619988874 R187540 D602 ## 774 -0.170080316 -0.493691357 8.386089e-01 -0.514997857 R187927 D402 ## 775 -0.408051083 0.065516733 -6.170898e-01 0.143522023 R187932 D202 ## 776 1.511510613 -0.350022472 1.407537e-01 1.720779431 R187516 D102 ## 777 0.717880207 -0.039892840 7.147631e-01 0.043009993 R187523 E2002 ## 778 0.565715992 -0.004697426 6.110632e-01 -0.040649831 R187930 E1902 ## 779 -1.945277271 -0.257246243 -3.344377e-01 -1.353593345 R187292 E1802 ## 780 -0.542356171 -0.210478672 -1.518256e-01 -0.180051872 R187948 E1702 ## 781 -1.009478466 -0.237309580 -5.394855e-01 -0.232683403 R187577 E1602 ## 782 -0.062972654 -0.309613254 9.163182e-02 0.155008780 R187524 E1402 ## 783 -1.068006737 -0.576615256 -1.287072e-02 -0.478520758 R187961 E1302 ## 784 1.291087213 0.400590810 1.344880e-01 0.756008390 R187579 E1202 ## 785 0.219339941 -0.084123415 -1.345142e-01 0.437977602 R187166 E1102 ## 786 -0.771723593 -0.516796877 4.654219e-01 -0.720348616 R186907 E1002 ## 787 -0.307974582 1.415221654 -6.246746e-01 -1.098521590 R187582 E902 ## 788 1.350723230 1.072797611 6.632146e-02 0.211604155 R187999 E802 ## 789 0.917025005 0.425324012 -1.363224e-01 0.628023427 R187588 E702 ## 790 -0.044687486 0.225592756 -3.856264e-01 0.115346148 R187541 E402 ## 791 0.031844555 -0.173178282 2.836684e-01 -0.078645600 R187945 E302 ## 792 2.583194514 0.356110860 1.911573e+00 0.315510325 R188000 F2702 ## 793 0.179791307 0.721603999 -1.843861e-01 -0.357426584 R187951 F2502 ## 794 1.074056381 0.622141753 2.033010e-01 0.248613636 R187155 F2402 ## 795 -0.050551588 0.022756979 -3.369690e-01 0.263660435 R187559 F2102 ## 796 0.236018730 -0.982664335 5.412567e-01 0.677426328 R187557 F1902 ## 797 0.126456353 0.248413969 -3.499673e-01 0.228009711 R187030 F1702 ## 798 0.627099173 0.542002940 -8.681709e-02 0.171913322 R187964 F1502 ## 799 -1.847430526 -0.876682015 7.321282e-02 -1.043961335 R187575 F1102 ## 800 1.624668934 0.239392559 -1.914134e-01 1.576689763 R187592 F902 ## 801 0.020050057 -0.197360465 1.203352e-01 0.097075294 R187941 F202 ## 802 -1.710253888 -0.876060326 -2.195240e-01 -0.614669603 R187902 F102 ## 803 0.482337227 0.037134065 4.617048e-01 -0.016501673 R187931 G2202 ## 804 -0.414665810 0.292313976 2.811892e-01 -0.988169021 R187573 G1902 ## 805 -0.734915316 -0.124938541 -2.371332e-01 -0.372843592 R186902 G1802 ## 806 -0.734873597 0.132566366 9.865656e-02 -0.966096524 R186901 G1702 ## 807 0.042953186 0.425198918 -6.551589e-01 0.272913161 R187916 G1602 ## 808 -0.134813877 0.575374376 -1.759891e-01 -0.534199110 R187925 G1302 ## 809 -0.266774334 -0.020467939 2.800177e-01 -0.526324109 R187955 G1202 ## 810 -0.238034614 -0.487332603 -3.104208e-01 0.559718744 R187637 G702 ## 811 -0.311604245 -0.375169748 -3.181055e-02 0.095376049 R187914 G602 ## 812 -0.307960256 0.376116263 2.715435e-01 -0.955620024 R187571 G502 ## 813 0.759427261 0.509818512 -7.659755e-01 1.015584266 R187926 G402 ## 814 -0.719709567 -0.081413940 -2.907063e-01 -0.347589372 R187086 G102 ## 815 -0.560064244 0.212233413 -4.419478e-01 -0.330349826 R187515 H3602 ## 816 1.636169566 0.330987175 8.962073e-01 0.408975045 R187553 H3202 ## 817 -0.664809896 -0.108818088 -8.700445e-01 0.314052672 R187918 H3102 ## 818 0.449952074 0.055995214 -7.693727e-03 0.401650587 R187920 H3002 ## 819 0.303299728 0.214894964 6.816448e-01 -0.593240057 R187512 H2802 ## 820 1.944116950 0.073739494 4.693473e-01 1.401030108 R187009 H2602 ## 821 -0.400289062 -0.204979072 -2.714420e-01 0.076132010 R186917 H2502 ## 822 -1.830356342 -0.875575586 -9.592929e-02 -0.858851463 R187957 H1802 ## 823 0.675356529 0.085882416 1.131053e-01 0.476368810 Fem20 H1302 ## 824 -0.278110898 0.039776425 5.906709e-01 -0.908558254 K983388 H1102 ## 825 -0.749927004 0.248542607 -1.448539e-01 -0.853615735 R186903 H702 ## 826 -0.944936961 0.038522236 -3.681970e-01 -0.615262166 R187535 H502 ## 827 -0.447671040 -0.134111951 1.363722e-01 -0.449931278 R186911 H302 ## 828 0.450911022 0.311978590 4.519824e-01 -0.313049970 R187001 H102 ## squid_pop ## 1 1 ## 2 1 ## 3 1 ## 4 1 ## 5 1 ## 6 1 ## 7 1 ## 8 1 ## 9 1 ## 10 1 ## 11 1 ## 12 1 ## 13 1 ## 14 1 ## 15 1 ## 16 1 ## 17 1 ## 18 1 ## 19 1 ## 20 1 ## 21 1 ## 22 1 ## 23 1 ## 24 1 ## 25 1 ## 26 1 ## 27 1 ## 28 1 ## 29 1 ## 30 1 ## 31 1 ## 32 1 ## 33 1 ## 34 1 ## 35 1 ## 36 1 ## 37 1 ## 38 1 ## 39 1 ## 40 1 ## 41 1 ## 42 1 ## 43 1 ## 44 1 ## 45 1 ## 46 1 ## 47 1 ## 48 1 ## 49 1 ## 50 1 ## 51 1 ## 52 1 ## 53 1 ## 54 1 ## 55 1 ## 56 1 ## 57 1 ## 58 1 ## 59 1 ## 60 1 ## 61 1 ## 62 1 ## 63 1 ## 64 1 ## 65 1 ## 66 1 ## 67 1 ## 68 1 ## 69 1 ## 70 1 ## 71 1 ## 72 1 ## 73 1 ## 74 1 ## 75 1 ## 76 1 ## 77 1 ## 78 1 ## 79 1 ## 80 1 ## 81 1 ## 82 1 ## 83 1 ## 84 1 ## 85 1 ## 86 1 ## 87 1 ## 88 1 ## 89 1 ## 90 1 ## 91 1 ## 92 1 ## 93 1 ## 94 1 ## 95 1 ## 96 1 ## 97 1 ## 98 1 ## 99 1 ## 100 1 ## 101 1 ## 102 1 ## 103 1 ## 104 1 ## 105 1 ## 106 1 ## 107 1 ## 108 1 ## 109 1 ## 110 1 ## 111 1 ## 112 1 ## 113 1 ## 114 1 ## 115 1 ## 116 1 ## 117 1 ## 118 1 ## 119 1 ## 120 1 ## 121 1 ## 122 1 ## 123 1 ## 124 1 ## 125 1 ## 126 1 ## 127 1 ## 128 1 ## 129 1 ## 130 1 ## 131 1 ## 132 1 ## 133 1 ## 134 1 ## 135 1 ## 136 1 ## 137 1 ## 138 1 ## 139 1 ## 140 1 ## 141 1 ## 142 1 ## 143 1 ## 144 1 ## 145 1 ## 146 1 ## 147 1 ## 148 1 ## 149 1 ## 150 1 ## 151 1 ## 152 1 ## 153 1 ## 154 1 ## 155 1 ## 156 1 ## 157 1 ## 158 1 ## 159 1 ## 160 1 ## 161 1 ## 162 1 ## 163 1 ## 164 1 ## 165 1 ## 166 1 ## 167 1 ## 168 1 ## 169 1 ## 170 1 ## 171 1 ## 172 1 ## 173 1 ## 174 1 ## 175 1 ## 176 1 ## 177 1 ## 178 1 ## 179 1 ## 180 1 ## 181 1 ## 182 1 ## 183 1 ## 184 1 ## 185 1 ## 186 1 ## 187 1 ## 188 1 ## 189 1 ## 190 1 ## 191 1 ## 192 1 ## 193 1 ## 194 1 ## 195 1 ## 196 1 ## 197 1 ## 198 1 ## 199 1 ## 200 1 ## 201 1 ## 202 1 ## 203 1 ## 204 1 ## 205 1 ## 206 1 ## 207 1 ## 208 1 ## 209 1 ## 210 1 ## 211 1 ## 212 1 ## 213 1 ## 214 1 ## 215 1 ## 216 1 ## 217 1 ## 218 1 ## 219 1 ## 220 1 ## 221 1 ## 222 1 ## 223 1 ## 224 1 ## 225 1 ## 226 1 ## 227 1 ## 228 1 ## 229 1 ## 230 1 ## 231 1 ## 232 1 ## 233 1 ## 234 1 ## 235 1 ## 236 1 ## 237 1 ## 238 1 ## 239 1 ## 240 1 ## 241 1 ## 242 1 ## 243 1 ## 244 1 ## 245 1 ## 246 1 ## 247 1 ## 248 1 ## 249 1 ## 250 1 ## 251 1 ## 252 1 ## 253 1 ## 254 1 ## 255 1 ## 256 1 ## 257 1 ## 258 1 ## 259 1 ## 260 1 ## 261 1 ## 262 1 ## 263 1 ## 264 1 ## 265 1 ## 266 1 ## 267 1 ## 268 1 ## 269 1 ## 270 1 ## 271 1 ## 272 1 ## 273 1 ## 274 1 ## 275 1 ## 276 1 ## 277 1 ## 278 1 ## 279 1 ## 280 1 ## 281 1 ## 282 1 ## 283 1 ## 284 1 ## 285 1 ## 286 1 ## 287 1 ## 288 1 ## 289 1 ## 290 1 ## 291 1 ## 292 1 ## 293 1 ## 294 1 ## 295 1 ## 296 1 ## 297 1 ## 298 1 ## 299 1 ## 300 1 ## 301 1 ## 302 1 ## 303 1 ## 304 1 ## 305 1 ## 306 1 ## 307 1 ## 308 1 ## 309 1 ## 310 1 ## 311 1 ## 312 1 ## 313 1 ## 314 1 ## 315 1 ## 316 1 ## 317 1 ## 318 1 ## 319 1 ## 320 1 ## 321 1 ## 322 1 ## 323 1 ## 324 1 ## 325 1 ## 326 1 ## 327 1 ## 328 1 ## 329 1 ## 330 1 ## 331 1 ## 332 1 ## 333 1 ## 334 1 ## 335 1 ## 336 1 ## 337 1 ## 338 1 ## 339 1 ## 340 1 ## 341 1 ## 342 1 ## 343 1 ## 344 1 ## 345 1 ## 346 1 ## 347 1 ## 348 1 ## 349 1 ## 350 1 ## 351 1 ## 352 1 ## 353 1 ## 354 1 ## 355 1 ## 356 1 ## 357 1 ## 358 1 ## 359 1 ## 360 1 ## 361 1 ## 362 1 ## 363 1 ## 364 1 ## 365 1 ## 366 1 ## 367 1 ## 368 1 ## 369 1 ## 370 1 ## 371 1 ## 372 1 ## 373 1 ## 374 1 ## 375 1 ## 376 1 ## 377 1 ## 378 1 ## 379 1 ## 380 1 ## 381 1 ## 382 1 ## 383 1 ## 384 1 ## 385 1 ## 386 1 ## 387 1 ## 388 1 ## 389 1 ## 390 1 ## 391 1 ## 392 1 ## 393 1 ## 394 1 ## 395 1 ## 396 1 ## 397 1 ## 398 1 ## 399 1 ## 400 1 ## 401 1 ## 402 1 ## 403 1 ## 404 1 ## 405 1 ## 406 1 ## 407 1 ## 408 1 ## 409 1 ## 410 1 ## 411 1 ## 412 1 ## 413 1 ## 414 1 ## 415 1 ## 416 1 ## 417 1 ## 418 1 ## 419 1 ## 420 1 ## 421 1 ## 422 1 ## 423 1 ## 424 1 ## 425 1 ## 426 1 ## 427 1 ## 428 1 ## 429 1 ## 430 1 ## 431 1 ## 432 1 ## 433 1 ## 434 1 ## 435 1 ## 436 1 ## 437 1 ## 438 1 ## 439 1 ## 440 1 ## 441 1 ## 442 1 ## 443 1 ## 444 1 ## 445 1 ## 446 1 ## 447 1 ## 448 1 ## 449 1 ## 450 1 ## 451 1 ## 452 1 ## 453 1 ## 454 1 ## 455 1 ## 456 1 ## 457 1 ## 458 1 ## 459 1 ## 460 1 ## 461 1 ## 462 1 ## 463 1 ## 464 1 ## 465 1 ## 466 1 ## 467 1 ## 468 1 ## 469 1 ## 470 1 ## 471 1 ## 472 1 ## 473 1 ## 474 1 ## 475 1 ## 476 1 ## 477 1 ## 478 1 ## 479 1 ## 480 1 ## 481 1 ## 482 1 ## 483 1 ## 484 1 ## 485 1 ## 486 1 ## 487 1 ## 488 1 ## 489 1 ## 490 1 ## 491 1 ## 492 1 ## 493 1 ## 494 1 ## 495 1 ## 496 1 ## 497 1 ## 498 1 ## 499 1 ## 500 1 ## 501 1 ## 502 1 ## 503 1 ## 504 1 ## 505 1 ## 506 1 ## 507 1 ## 508 1 ## 509 1 ## 510 1 ## 511 1 ## 512 1 ## 513 1 ## 514 1 ## 515 1 ## 516 1 ## 517 1 ## 518 1 ## 519 1 ## 520 1 ## 521 1 ## 522 1 ## 523 1 ## 524 1 ## 525 1 ## 526 1 ## 527 1 ## 528 1 ## 529 1 ## 530 1 ## 531 1 ## 532 1 ## 533 1 ## 534 1 ## 535 1 ## 536 1 ## 537 1 ## 538 1 ## 539 1 ## 540 1 ## 541 1 ## 542 1 ## 543 1 ## 544 1 ## 545 1 ## 546 1 ## 547 1 ## 548 1 ## 549 1 ## 550 1 ## 551 1 ## 552 1 ## 553 1 ## 554 1 ## 555 1 ## 556 1 ## 557 1 ## 558 1 ## 559 1 ## 560 1 ## 561 1 ## 562 1 ## 563 1 ## 564 1 ## 565 1 ## 566 1 ## 567 1 ## 568 1 ## 569 1 ## 570 1 ## 571 1 ## 572 1 ## 573 1 ## 574 1 ## 575 1 ## 576 1 ## 577 1 ## 578 1 ## 579 1 ## 580 1 ## 581 1 ## 582 1 ## 583 1 ## 584 1 ## 585 1 ## 586 1 ## 587 1 ## 588 1 ## 589 1 ## 590 1 ## 591 1 ## 592 1 ## 593 1 ## 594 1 ## 595 1 ## 596 1 ## 597 1 ## 598 1 ## 599 1 ## 600 1 ## 601 1 ## 602 1 ## 603 1 ## 604 1 ## 605 1 ## 606 1 ## 607 1 ## 608 1 ## 609 1 ## 610 1 ## 611 1 ## 612 1 ## 613 1 ## 614 1 ## 615 1 ## 616 1 ## 617 1 ## 618 1 ## 619 1 ## 620 1 ## 621 1 ## 622 1 ## 623 1 ## 624 1 ## 625 1 ## 626 1 ## 627 1 ## 628 1 ## 629 1 ## 630 1 ## 631 1 ## 632 1 ## 633 1 ## 634 1 ## 635 1 ## 636 1 ## 637 1 ## 638 1 ## 639 1 ## 640 1 ## 641 1 ## 642 1 ## 643 1 ## 644 1 ## 645 1 ## 646 1 ## 647 1 ## 648 1 ## 649 1 ## 650 1 ## 651 1 ## 652 1 ## 653 1 ## 654 1 ## 655 1 ## 656 1 ## 657 1 ## 658 1 ## 659 1 ## 660 1 ## 661 1 ## 662 1 ## 663 1 ## 664 1 ## 665 1 ## 666 1 ## 667 1 ## 668 1 ## 669 1 ## 670 1 ## 671 1 ## 672 1 ## 673 1 ## 674 1 ## 675 1 ## 676 1 ## 677 1 ## 678 1 ## 679 1 ## 680 1 ## 681 1 ## 682 1 ## 683 1 ## 684 1 ## 685 1 ## 686 1 ## 687 1 ## 688 1 ## 689 1 ## 690 1 ## 691 1 ## 692 1 ## 693 1 ## 694 1 ## 695 1 ## 696 1 ## 697 1 ## 698 1 ## 699 1 ## 700 1 ## 701 1 ## 702 1 ## 703 1 ## 704 1 ## 705 1 ## 706 1 ## 707 1 ## 708 1 ## 709 1 ## 710 1 ## 711 1 ## 712 1 ## 713 1 ## 714 1 ## 715 1 ## 716 1 ## 717 1 ## 718 1 ## 719 1 ## 720 1 ## 721 1 ## 722 1 ## 723 1 ## 724 1 ## 725 1 ## 726 1 ## 727 1 ## 728 1 ## 729 1 ## 730 1 ## 731 1 ## 732 1 ## 733 1 ## 734 1 ## 735 1 ## 736 1 ## 737 1 ## 738 1 ## 739 1 ## 740 1 ## 741 1 ## 742 1 ## 743 1 ## 744 1 ## 745 1 ## 746 1 ## 747 1 ## 748 1 ## 749 1 ## 750 1 ## 751 1 ## 752 1 ## 753 1 ## 754 1 ## 755 1 ## 756 1 ## 757 1 ## 758 1 ## 759 1 ## 760 1 ## 761 1 ## 762 1 ## 763 1 ## 764 1 ## 765 1 ## 766 1 ## 767 1 ## 768 1 ## 769 1 ## 770 1 ## 771 1 ## 772 1 ## 773 1 ## 774 1 ## 775 1 ## 776 1 ## 777 1 ## 778 1 ## 779 1 ## 780 1 ## 781 1 ## 782 1 ## 783 1 ## 784 1 ## 785 1 ## 786 1 ## 787 1 ## 788 1 ## 789 1 ## 790 1 ## 791 1 ## 792 1 ## 793 1 ## 794 1 ## 795 1 ## 796 1 ## 797 1 ## 798 1 ## 799 1 ## 800 1 ## 801 1 ## 802 1 ## 803 1 ## 804 1 ## 805 1 ## 806 1 ## 807 1 ## 808 1 ## 809 1 ## 810 1 ## 811 1 ## 812 1 ## 813 1 ## 814 1 ## 815 1 ## 816 1 ## 817 1 ## 818 1 ## 819 1 ## 820 1 ## 821 1 ## 822 1 ## 823 1 ## 824 1 ## 825 1 ## 826 1 ## 827 1 ## 828 1 "],["2.4-randomslopes.html", "2.4 Random slopes", " 2.4 Random slopes Random slopes are essentially an interaction between predictors at different levels, with the random slopes being an unobserved, latent variable. \\[ y_{i} = \\beta_0 + \\beta_1 x_{i} + z_{1,j} + z_{2,j}x_{i} + \\epsilon_{i} \\] \\[ x \\sim MVN(0,\\sigma^2_{x}) \\] \\[ Z \\sim MVN(0,\\Sigma_{Z}) \\] \\[ \\epsilon \\sim N(0,\\sigma^2_\\epsilon) \\] We can specify random slopes by simulating a slopes variable at the individual level (ind_slope - \\(z_{2,j}\\)). We can specify the mean environmental effect the slope of the environmental variable (\\(beta_1\\)). \\(z_{2,j}\\) then represents the deviations from the mean slope (this is typically how it is modelling in a linear mixed effect model). Importantly the beta parameter associated with ind_slope is specified as 0 (there is no ‘main effect’ of the slopes, just the interaction), and the beta parameter associated with interaction is 1. squid_data &lt;- simulate_population( data_structure=make_structure(&quot;individual(300)&quot;,repeat_obs=10), parameters = list( individual = list( names = c(&quot;ind_int&quot;,&quot;ind_slope&quot;), beta = c(1,0), vcov = c(1,0.5) ), observation= list( names = c(&quot;environment&quot;), beta = c(0.2) ), residual = list( vcov = c(0.5) ), interactions = list( names = c(&quot;ind_slope:environment&quot;), beta = c(1) ) ) ) data &lt;- get_population_data(squid_data) short_summary(lmer(y ~ environment + (1+environment|individual),data)) ## Linear mixed model fit by REML [&#39;lmerMod&#39;] ## Formula: y ~ environment + (1 + environment | individual) ## Data: data ## ## REML criterion at convergence: 8107.2 ## ## Random effects: ## Groups Name Variance Corr ## individual (Intercept) 1.0196 ## environment 0.5357 0.06 ## Residual 0.5153 ## Number of obs: 3000, groups: individual, 300 ## ## Fixed effects: ## Estimate Std. Error t value ## (Intercept) -0.01376 0.05994 -0.230 ## environment 0.17878 0.04499 3.973 Here we have specified no correlation between intercepts and slopes. To simulate a correlation between intercepts and slopes, we can simply give the vcov argument a covariance matrix, instead of two variances: squid_data &lt;- simulate_population( data_structure=make_structure(&quot;individual(300)&quot;,repeat_obs=10), parameters = list( individual = list( names = c(&quot;ind_int&quot;,&quot;ind_slope&quot;), beta = c(1,0), vcov = matrix(c(1,0.3,0.3,0.5),ncol=2,nrow=2,byrow=TRUE) ), observation= list( names = c(&quot;environment&quot;), beta = c(0.2) ), residual = list( vcov = c(0.5) ), interactions = list( names = c(&quot;ind_slope:environment&quot;), beta = c(1) ) ) ) data &lt;- get_population_data(squid_data) short_summary(lmer(y ~ environment + (1+environment|individual),data)) ## Linear mixed model fit by REML [&#39;lmerMod&#39;] ## Formula: y ~ environment + (1 + environment | individual) ## Data: data ## ## REML criterion at convergence: 7859.2 ## ## Random effects: ## Groups Name Variance Corr ## individual (Intercept) 0.8693 ## environment 0.5005 0.45 ## Residual 0.4895 ## Number of obs: 3000, groups: individual, 300 ## ## Fixed effects: ## Estimate Std. Error t value ## (Intercept) 0.06662 0.05551 1.200 ## environment 0.28651 0.04358 6.575 "],["2.5-BetweenWithin.html", "2.5 Between- and within-group effects", " 2.5 Between- and within-group effects We may want to simulate the case where a predictor variable varies both within and between groups - in other words it is repeatable at the group level. For example, if we are simulating body mass, we might expect that body mass is a function of an environmental variable, rainfall, and that differs systematically between individuals, as well as within, for example due to spatial variation in where individual lives. The simplest way of simulating this is as two rainfall variables, one at the level of the individual and one at the level of the observation, something like: squid_data &lt;- simulate_population( data_structure=make_structure(&quot;individual(100)&quot;, repeat_obs=5), parameters = list( individual=list( names=c(&quot;between_rainfall&quot;), ... ), observation=list( names=c(&quot;within_rainfall&quot;), ... ), residual=list( ... ) ) ) We can then specify the variation in rainfall within and between individuals, for example, if the repeatability of rainfall amongst individuals is 0.5, and the total variance in rainfall is 0.8, we would make the variance in rainfall 0.4 at each level: squid_data &lt;- simulate_population( data_structure=make_structure(&quot;individual(100)&quot;, repeat_obs=5), parameters = list( individual=list( names=c(&quot;between_rainfall&quot;), vcov=0.4, ... ), observation=list( names=c(&quot;within_rainfall&quot;), vcov=0.4, ... ), residual=list( 0.8 ) ) ) If we want the rainfall variable to have a mean that is not 0, we should specify this in only one place, as otherwise they will add up weirdly! squid_data &lt;- simulate_population( data_structure=make_structure(&quot;individual(100)&quot;, repeat_obs=5), parameters = list( individual=list( names=c(&quot;between_rainfall&quot;), vcov=0.4, ... ), observation=list( names=c(&quot;within_rainfall&quot;), vcov=0.4, mean=10 ), residual=list( 0.8 ) ) ) Now we want to add in some betas. If the effect of rainfall on body mass is causal, we would expect the beta to be the same at both levels - this results as a simple reorganisation of the model equation. We start with an effect of rainfall on body size \\[ y_i = beta_0 + beta_1 (x_{1i,j}) + \\epsilon_i \\] where \\(x_{1ij}\\) is rainfall varying at levels \\(i\\) (observation) and \\(j\\) (individual). We can split rainfall up into within (\\(x_{1i}\\)) and between (\\(z_{1i}\\)) individual components: \\[ y_i = beta_0 + beta_1 (z_1_j + x_1_i) + \\epsilon_i \\] \\[ y_i = beta_0 + beta_{1}z_1_j + beta_{1}*x_1_i + \\epsilon_i \\] you see that the coefficients should be the same. squid_data &lt;- simulate_population( data_structure=make_structure(&quot;individual(100)&quot;, repeat_obs=5), parameters = list( individual=list( names=c(&quot;between_env&quot;, &quot;ind_int&quot;), vcov=c(0.5,1), beta=c(-2,1) ), observation=list( names=c(&quot;within_env&quot;), vcov=c(0.5), beta=c(2) ), residual=list( vcov=1 ) ) ) data &lt;- get_population_data(squid_data) data$environment &lt;- data$between_env + data$within_env "],["3-multivariate.html", "3 Multi-response Models", " 3 Multi-response Models We can simulate multiple response variables, that covary at different hierarchical levels. In the case of a simple random effects model, we can have a covariance matrix at each level, \\[ \\boldsymbol{y}_{ij} = \\boldsymbol{\\beta}_0 + \\boldsymbol{u}_j + \\boldsymbol{\\epsilon}_{ij} \\] \\[ \\boldsymbol{u}_i \\sim \\mathcal{N}(0, \\Sigma_u) \\] \\[ \\boldsymbol{\\epsilon}_{i} \\sim \\mathcal{N}(0, \\Sigma_{\\epsilon}) \\] We can indicate that there are multiple phenotypes within the parameter list in two ways. First, we can use n_response in the parameter list, and specifying the covariance matrix (vcov) at each level. In this way we can simulate covariance at each level. squid_data &lt;- simulate_population( data_structure=make_structure(structure = &quot;individual(100)&quot;,repeat_obs=10), n_response = 2, parameters=list( individual = list( vcov = matrix(c(1,0.5,0.5,1),nrow=2,ncol=2,byrow=TRUE) ), residual = list( vcov = matrix(c(1,0.5,0.5,1),nrow = 2,ncol = 2,byrow=TRUE) ) ) ) data &lt;- get_population_data(squid_data) head(data) ## y1 y2 individual_effect1 individual_effect2 residual1 ## 1 1.7154548 -0.3400219 1.917971 0.7785752 -0.2025162 ## 2 0.5628202 0.3404365 1.917971 0.7785752 -1.3551508 ## 3 2.2598837 0.1039745 1.917971 0.7785752 0.3419127 ## 4 1.2400569 1.7172877 1.917971 0.7785752 -0.6779141 ## 5 0.8401039 0.2945199 1.917971 0.7785752 -1.0778671 ## 6 2.6972366 0.0814206 1.917971 0.7785752 0.7792656 ## residual2 individual squid_pop ## 1 -1.1185971 1 1 ## 2 -0.4381387 1 1 ## 3 -0.6746007 1 1 ## 4 0.9387125 1 1 ## 5 -0.4840553 1 1 ## 6 -0.6971546 1 1 The formulation above (just random effects), can be simulated in a similar way with beta as an identity matrix (i.e. a predictor for each trait). squid_data &lt;- simulate_population( data_structure= make_structure(structure = &quot;individual(100)&quot;,repeat_obs=10), n_response=2, parameters=list( individual = list( vcov =matrix(c(1,0.5,0.5,1),nrow=2,ncol=2,byrow=TRUE), beta= diag(2) ), residual = list( vcov =matrix(c(1,0.5,0.5,1),nrow=2,ncol=2,byrow=TRUE), beta= diag(2) ) ) ) data &lt;- get_population_data(squid_data) head(data) ## y1 y2 individual_effect1 individual_effect2 residual1 ## 1 -1.7790297 -2.1313181 -0.2306292 0.2132262 -1.5484005 ## 2 0.9989910 1.5914308 -0.2306292 0.2132262 1.2296201 ## 3 0.5519600 0.4977197 -0.2306292 0.2132262 0.7825892 ## 4 0.8959494 0.9204513 -0.2306292 0.2132262 1.1265785 ## 5 0.5997486 0.8608984 -0.2306292 0.2132262 0.8303778 ## 6 -1.4619544 -0.8689692 -0.2306292 0.2132262 -1.2313253 ## residual2 individual squid_pop ## 1 -2.3445443 1 1 ## 2 1.3782046 1 1 ## 3 0.2844935 1 1 ## 4 0.7072251 1 1 ## 5 0.6476722 1 1 ## 6 -1.0821955 1 1 # library(MCMCglmm) # mod &lt;- MCMCglmm(cbind(y1,y2)~1,random=~us(trait):individual, rcov=~us(trait):units,data=data,family=rep(&quot;gaussian&quot;,2),verbose=FALSE) # summary(mod) Second, we can build up predictors at each level that drive this covariance. Here we make beta into a matrix (\\(B\\)), with predictors as rows, and responses as columns. \\[\\boldsymbol{y}_{ij} = \\boldsymbol{\\beta}_0 + \\boldsymbol{x}_{i} B_x + \\boldsymbol{u}_j + \\boldsymbol{\\epsilon}_{ij}\\] \\[\\boldsymbol{x}_i \\sim \\mathcal{N}(\\boldsymbol{\\mu}_x, \\Sigma_x)\\] \\[\\boldsymbol{u}_i \\sim \\mathcal{N}(0, \\Sigma_u)\\] \\[\\boldsymbol{\\epsilon}_{i} \\sim \\mathcal{N}(0, \\Sigma_{\\epsilon})\\] Alternatively, you could also create multivariate phenotypes being affected by the same predictors. Here we have two phenotypes, affected by three predictors, and so we can create a 3x2 matrix of betas beta &lt;- matrix(c( 0.5, 0.1, 0.2, 0.2, 0.3, 0.1 ),nrow=3,ncol=2,byrow=TRUE) beta ## [,1] [,2] ## [1,] 0.5 0.1 ## [2,] 0.2 0.2 ## [3,] 0.3 0.1 squid_data &lt;- simulate_population( data_structure= make_structure(structure = &quot;individual(100)&quot;,repeat_obs=20), n_response=2, parameters= list( individual = list( vcov =matrix(c(1,0.5,0.5,1),nrow=2,ncol=2,byrow=TRUE) ), observation = list( names = c(&quot;temperature&quot;, &quot;rainfall&quot;, &quot;wind&quot;), beta= beta ), residual = list( vcov= matrix(c(1,0.5,0.5,1),nrow=2,ncol=2,byrow=TRUE) ) ) ) data &lt;- get_population_data(squid_data) head(data) ## y1 y2 individual_effect1 individual_effect2 temperature ## 1 1.22310660 0.5923479 0.3440492 0.579633 1.5166067 ## 2 1.41370650 -0.1014570 0.3440492 0.579633 1.4510438 ## 3 0.61015279 -0.4051245 0.3440492 0.579633 0.6377108 ## 4 0.52717455 1.4791758 0.3440492 0.579633 -0.4579670 ## 5 0.36549918 0.3292956 0.3440492 0.579633 0.3432748 ## 6 0.06027212 -0.4377444 0.3440492 0.579633 0.1036752 ## rainfall wind residual1 residual2 individual squid_pop ## 1 0.6364945 -0.00366005 -0.005446858 -0.2658786 1 1 ## 2 0.2034993 0.19014050 0.246393344 -0.8859082 1 1 ## 3 -2.3866566 0.05766300 0.407280601 -0.5769636 1 1 ## 4 0.1370347 1.41738837 -0.040514635 0.7761938 1 1 ## 5 0.5636609 -0.85833490 -0.005419163 -0.3115636 1 1 ## 6 -0.4653576 1.49089522 -0.689811760 -1.0837629 1 1 # library(MCMCglmm) # mod &lt;- MCMCglmm(cbind(y1,y2)~1,random=~us(trait):individual, rcov=~us(trait):units,data=data,family=rep(&quot;gaussian&quot;,2),verbose=FALSE) # summary(mod) squid_data &lt;- simulate_population( data_structure= make_structure(structure = &quot;individual(100)&quot;,repeat_obs=20), n_response=2, parameters= list( individual = list( vcov =matrix(c(1,0.5,0.5,1),nrow=2,ncol=2,byrow=TRUE) ), observation = list( names = c(&quot;temperature&quot;, &quot;rainfall&quot;, &quot;wind&quot;), beta= beta ), interactions = list( names = c(&quot;temperature:rainfall&quot;), beta=matrix(c(0.1,-0.3),ncol=2,byrow=TRUE) ), residual = list( vcov= matrix(c(1,0.5,0.5,1),nrow=2,ncol=2,byrow=TRUE) ) ) ) data &lt;- get_population_data(squid_data) head(data) ## y1 y2 individual_effect1 individual_effect2 temperature ## 1 2.21050134 1.294281304 0.3738621 0.3130563 0.2474442 ## 2 0.30671985 0.767288962 0.3738621 0.3130563 0.6267361 ## 3 -0.08741854 -0.675319438 0.3738621 0.3130563 1.4255186 ## 4 0.98283306 -0.002284301 0.3738621 0.3130563 0.8091150 ## 5 2.78888855 1.180712862 0.3738621 0.3130563 0.1566717 ## 6 1.59693774 0.290589001 0.3738621 0.3130563 1.0819382 ## rainfall wind residual1 residual2 temperature:rainfall individual ## 1 0.07576161 1.40470231 1.2744794 0.8064820 0.01874677 1 ## 2 0.49027116 -0.02155445 -0.5028253 0.3878414 0.30727064 1 ## 3 -0.68348827 -0.56325151 -0.7709343 -1.2302024 -0.97432525 1 ## 4 0.92104163 0.76022751 -0.2823860 -0.4329146 0.74522861 1 ## 5 -1.25575415 1.41897367 2.1818234 0.9022205 -0.19674116 1 ## 6 0.95321639 2.08038728 -0.2357851 -0.2199468 1.03132125 1 ## squid_pop ## 1 1 ## 2 1 ## 3 1 ## 4 1 ## 5 1 ## 6 1 # library(MCMCglmm) # mod &lt;- MCMCglmm(cbind(y1,y2)~1,random=~us(trait):individual, rcov=~us(trait):units,data=data,family=rep(&quot;gaussian&quot;,2),verbose=FALSE) # summary(mod) "],["3.1-one-response-repeatedly-measured-the-other-not.html", "3.1 One response repeatedly measured, the other not", " 3.1 One response repeatedly measured, the other not set the beta values for the trait that is unmeasured at a particular level to 0 The other way to do this is through sampling (link and example needed) individual &lt;- list( vcov = matrix(c( 1,0.5, 0.5,1 ),nrow=2,ncol=2,byrow=TRUE) ) residual &lt;- list( vcov = matrix(c( 1,0.5, 0.5,1 ),nrow = 2,ncol = 2,byrow=TRUE), beta = matrix(c( 1,0, 0,0 ),nrow = 2,ncol = 2,byrow=TRUE) ) squid_data &lt;- simulate_population( data_structure= make_structure(structure = &quot;individual(100)&quot;,repeat_obs=20), n_response = 2, parameters=list(individual = individual, residual = residual) ) data &lt;- get_population_data(squid_data) "],["3.2-different-distributions.html", "3.2 Different distributions", " 3.2 Different distributions individual &lt;- list( vcov = matrix(c( 1,0.5, 0.5,1 ),nrow=2,ncol=2,byrow=TRUE) ) residual &lt;- list( vcov = matrix(c( 1,0.5, 0.5,1 ),nrow = 2,ncol = 2,byrow=TRUE), beta = matrix(c( 1,0, 0,0 ),nrow = 2,ncol = 2,byrow=TRUE) ) squid_data &lt;- simulate_population( data_structure= make_structure(structure = &quot;individual(100)&quot;,repeat_obs=20), n_response = 2, parameters=list(individual = individual, residual = residual), family=c(&quot;gaussian&quot;,&quot;binomial&quot;), link=c(&quot;identity&quot;,&quot;logit&quot;) ) data &lt;- get_population_data(squid_data) head(data,20) ## y1 y2 individual_effect1 individual_effect2 residual1 residual2 ## 1 -1.6706436 0 -1.085769 -1.809539 -0.5848745 -1.10098411 ## 2 -1.4666490 0 -1.085769 -1.809539 -0.3808800 -1.10359510 ## 3 -0.7798335 0 -1.085769 -1.809539 0.3059355 0.89906527 ## 4 -0.6755392 0 -1.085769 -1.809539 0.4102298 1.27144736 ## 5 -1.4314630 0 -1.085769 -1.809539 -0.3456940 1.47579179 ## 6 -2.0038855 0 -1.085769 -1.809539 -0.9181164 -1.71020015 ## 7 0.3282533 0 -1.085769 -1.809539 1.4140223 -1.38338556 ## 8 -0.8040910 0 -1.085769 -1.809539 0.2816781 1.12610799 ## 9 -2.4921780 0 -1.085769 -1.809539 -1.4064089 -0.83539112 ## 10 0.5833605 0 -1.085769 -1.809539 1.6691295 2.18371514 ## 11 -1.6705681 0 -1.085769 -1.809539 -0.5847991 0.44656648 ## 12 -2.0109248 0 -1.085769 -1.809539 -0.9251558 -1.22703322 ## 13 0.1975017 0 -1.085769 -1.809539 1.2832708 1.63331381 ## 14 -4.1406047 0 -1.085769 -1.809539 -3.0548357 -1.46211542 ## 15 -0.7559031 0 -1.085769 -1.809539 0.3298660 -1.24415539 ## 16 -0.1440253 0 -1.085769 -1.809539 0.9417437 -1.04997775 ## 17 -0.1195880 0 -1.085769 -1.809539 0.9661811 1.52189122 ## 18 -1.6872446 0 -1.085769 -1.809539 -0.6014755 -0.86684664 ## 19 -0.7503544 0 -1.085769 -1.809539 0.3354147 0.02700792 ## 20 -0.4113180 0 -1.085769 -1.809539 0.6744510 0.15798303 ## individual squid_pop ## 1 1 1 ## 2 1 1 ## 3 1 1 ## 4 1 1 ## 5 1 1 ## 6 1 1 ## 7 1 1 ## 8 1 1 ## 9 1 1 ## 10 1 1 ## 11 1 1 ## 12 1 1 ## 13 1 1 ## 14 1 1 ## 15 1 1 ## 16 1 1 ## 17 1 1 ## 18 1 1 ## 19 1 1 ## 20 1 1 data &lt;- get_population_data(squid_data) "],["3.3-multivariate-random-slopes.html", "3.3 Multivariate Random Slopes", " 3.3 Multivariate Random Slopes Before reading this it is worth checking out how to simulate univariate random slopes in Section 2.4. Here we have to think about the beta matrix. As we saw in an example above, in multivariate models beta can be thought of as switching on and off predictor variables for the response variables. We we can simulate 4 variables, an intercept and slope for each variable, and then use the beta matrix to tell simulate_population which response variable they link to individual &lt;- list( names = c(&quot;ind_int1&quot;,&quot;ind_slope1&quot;,&quot;ind_int2&quot;,&quot;ind_slope2&quot;), vcov = matrix(c( 1, 0.5, 0, 0, 0.5, 1, 0, 0, 0, 0, 1, 0.2, 0, 0, 0.2, 1 ),nrow=4,ncol=4, byrow=TRUE), beta = matrix(c( 1, 0, 0, 0, 0, 1, 0, 0 ),nrow = 4,ncol = 2, byrow=TRUE) ) observation &lt;- list( names=&quot;environment&quot;, beta=matrix(c(0.5,-0.3), ncol=2,byrow=TRUE) ) residual &lt;- list( vcov = matrix(c( 1,0.5, 0.5,1 ),nrow = 2,ncol = 2,byrow=TRUE) ) interactions &lt;- list( names=c(&quot;ind_slope1:environment&quot;,&quot;ind_slope2:environment&quot;), beta= matrix(c( 1,0, 0,1 ), ncol=2,byrow=TRUE) ) squid_data &lt;- simulate_population( data_structure = make_structure(structure = &quot;individual(100)&quot;,repeat_obs=20), n_response = 2, parameters=list( individual = individual, observation = observation, residual = residual, interactions = interactions ) ) data &lt;- get_population_data(squid_data) head(data,20) ## y1 y2 ind_int1 ind_slope1 ind_int2 ind_slope2 environment ## 1 -2.8929785 -1.80978534 0.0588518 1.085178 0.1617523 0.5981975 -0.99200736 ## 2 -1.3637066 -0.91976972 0.0588518 1.085178 0.1617523 0.5981975 0.41084465 ## 3 2.9575947 -0.26204801 0.0588518 1.085178 0.1617523 0.5981975 1.24627785 ## 4 -0.4513149 -0.36115761 0.0588518 1.085178 0.1617523 0.5981975 -0.07999263 ## 5 1.4708316 1.54949605 0.0588518 1.085178 0.1617523 0.5981975 0.60692362 ## 6 1.8250487 -0.18599499 0.0588518 1.085178 0.1617523 0.5981975 0.98080842 ## 7 -1.0226457 -0.47901527 0.0588518 1.085178 0.1617523 0.5981975 -0.11309214 ## 8 0.5126517 1.07530623 0.0588518 1.085178 0.1617523 0.5981975 -0.45103722 ## 9 1.3306505 -1.36650396 0.0588518 1.085178 0.1617523 0.5981975 0.71480299 ## 10 -2.3825997 0.05147684 0.0588518 1.085178 0.1617523 0.5981975 -2.54734658 ## 11 2.5459297 0.34937111 0.0588518 1.085178 0.1617523 0.5981975 1.39594598 ## 12 1.0908831 -1.83828245 0.0588518 1.085178 0.1617523 0.5981975 0.54874017 ## 13 -0.1222957 -0.13303389 0.0588518 1.085178 0.1617523 0.5981975 -0.02931245 ## 14 2.7255433 0.90984488 0.0588518 1.085178 0.1617523 0.5981975 1.82736314 ## 15 0.4693991 -0.35557207 0.0588518 1.085178 0.1617523 0.5981975 0.03022781 ## 16 -1.6923948 1.45885249 0.0588518 1.085178 0.1617523 0.5981975 -1.28777736 ## 17 -2.3801511 -1.96969000 0.0588518 1.085178 0.1617523 0.5981975 -1.18116780 ## 18 0.9086790 0.45014096 0.0588518 1.085178 0.1617523 0.5981975 -0.04292380 ## 19 0.6281504 0.43513773 0.0588518 1.085178 0.1617523 0.5981975 -0.23437953 ## 20 0.5003277 1.47204209 0.0588518 1.085178 0.1617523 0.5981975 -0.57500082 ## residual1 residual2 ind_slope1:environment ind_slope2:environment ## 1 -1.3793220 -1.6757235 -1.07650459 -0.59341631 ## 2 -2.0738203 -1.2040348 0.44583958 0.24576623 ## 3 0.9231706 -0.7954372 1.35243333 0.74552027 ## 4 -0.3833642 -0.4990563 -0.08680624 -0.04785139 ## 5 0.4498978 1.2067607 0.65862018 0.36306018 ## 6 0.2114410 -0.6402219 1.06435175 0.58671713 ## 7 -0.9022263 -0.6070438 -0.12272511 -0.06765143 ## 8 1.1687742 1.0480521 -0.48945568 -0.26980933 ## 9 0.1387087 -1.7414087 0.77568850 0.42759335 ## 10 1.5965463 0.6493369 -2.76432453 -1.52381630 ## 11 0.2742550 -0.2286488 1.51484990 0.83505137 ## 12 0.1621804 -2.1636677 0.59548078 0.32825499 ## 13 -0.1346820 -0.2860453 -0.03180923 -0.01753464 ## 14 -0.2300044 0.2031775 1.98301433 1.09312403 ## 15 0.3626309 -0.5263382 0.03280255 0.01808220 ## 16 0.2901097 1.6811122 -1.39746770 -0.77034518 ## 17 -0.5666417 -1.7792210 -1.28177734 -0.70657160 ## 18 0.9178691 0.3011884 -0.04657996 -0.02567691 ## 19 0.9408319 0.3432768 -0.25434351 -0.14020524 ## 20 1.3529545 1.4817536 -0.62397825 -0.34396404 ## individual squid_pop ## 1 1 1 ## 2 1 1 ## 3 1 1 ## 4 1 1 ## 5 1 1 ## 6 1 1 ## 7 1 1 ## 8 1 1 ## 9 1 1 ## 10 1 1 ## 11 1 1 ## 12 1 1 ## 13 1 1 ## 14 1 1 ## 15 1 1 ## 16 1 1 ## 17 1 1 ## 18 1 1 ## 19 1 1 ## 20 1 1 "],["4-animal.html", "4 Genetic effects", " 4 Genetic effects This vignette assumes that you are generally happy with how the sim_population() function works. "],["4.1-va.html", "4.1 Additive genetics effects", " 4.1 Additive genetics effects In order to simulate breeding values (additive genetic effects), we can provide the simulate_population() function with the relatedness structure in the population. The simplest way to do this is providing a pedigree using the the pedigree argument (a genetic relatedness matrix could also be given to the cov_str argument). The input to this argument needs to be a list, and the name of the pedigree in the list links it with the item in the parameter list. NOTE the simulate_population function has very little error checking of pedigree structure at the moment When simulating breeding values, all individuals in pedigree need to be in the data_structure and vice versa. Having unsampled individuals (for example the base population) can be achieved in the sampling stage (not implemented yet). Lets start by importing a pedigree library(MCMCglmm) data(BTped) head(BTped) ## animal dam sire ## 1 R187557 &lt;NA&gt; &lt;NA&gt; ## 2 R187559 &lt;NA&gt; &lt;NA&gt; ## 3 R187568 &lt;NA&gt; &lt;NA&gt; ## 4 R187518 &lt;NA&gt; &lt;NA&gt; ## 5 R187528 &lt;NA&gt; &lt;NA&gt; ## 6 R187945 &lt;NA&gt; &lt;NA&gt; We can use this pedigree as a data_structure squid_data &lt;- simulate_population( data_structure = BTped, pedigree = list(animal=BTped), parameters =list( animal = list( vcov = 0.2 ), residual = list( vcov = 0.5 ) ) ) data &lt;- get_population_data(squid_data) head(data) ## y animal_effect residual animal dam sire squid_pop ## R187557 -0.7104031 -0.1749195 -0.5354836 R187557 &lt;NA&gt; &lt;NA&gt; 1 ## R187559 1.2892857 0.6665992 0.6226864 R187559 &lt;NA&gt; &lt;NA&gt; 1 ## R187568 1.6393384 0.6900526 0.9492857 R187568 &lt;NA&gt; &lt;NA&gt; 1 ## R187518 1.2545103 0.3999815 0.8545287 R187518 &lt;NA&gt; &lt;NA&gt; 1 ## R187528 -0.4945722 -0.3827869 -0.1117853 R187528 &lt;NA&gt; &lt;NA&gt; 1 ## R187945 0.1780773 -0.3703026 0.5483799 R187945 &lt;NA&gt; &lt;NA&gt; 1 # Ainv&lt;-inverseA(BTped)$Ainv # mod &lt;- MCMCglmm(y~1, random=~ animal,data=data,ginverse=list(animal=Ainv),verbose=FALSE) # summary(mod) We might want to simulate repeated measurements to allow estimation of permanent environment effects. This is where being able to have something in the parameter list with a different name to the grouping factor is useful. In this way permanent environmental and additive genetic effects can be simulated in different parts of the parameter list, and linked to the same part of the data_structure. ## make data structure with two observations per individual ds &lt;- data.frame(individual=rep(BTped[,1], 2)) squid_data &lt;- simulate_population( data_structure = ds, pedigree=list(animal=BTped), parameters = list( individual = list( vcov = 0.3 ), animal = list( group=&quot;individual&quot;, vcov = 0.2 ), residual = list( vcov = 0.5 ) ) ) data &lt;- get_population_data(squid_data) head(data) ## y individual_effect animal_effect residual individual ## R187888 -0.29800108 -0.3030617 -0.2605827 0.2656433 R187557 ## R187646 0.17464214 0.3344371 -0.5309132 0.3711182 R187559 ## R187330 1.17443051 0.7872808 0.9885985 -0.6014488 R187568 ## R187374 -0.88713844 -0.4727921 -0.1421482 -0.2721982 R187518 ## R187225 -0.06469935 -0.2399442 0.5130975 -0.3378527 R187528 ## R187133 1.72913172 0.5764696 0.7417825 0.4108797 R187945 ## squid_pop ## R187888 1 ## R187646 1 ## R187330 1 ## R187374 1 ## R187225 1 ## R187133 1 # Ainv&lt;-inverseA(BTped)$Ainv # data$animal_id &lt;- data$individual # mod &lt;- MCMCglmm(y~1, random=~ individual + animal_id,data=data,ginverse=list(animal_id=Ainv),verbose=FALSE) # summary(mod) "],["4.2-multivariate-genetic-effects.html", "4.2 Multivariate genetic effects", " 4.2 Multivariate genetic effects We can simulate genetic effects affecting multiple phenotypes and the covariance between them, by specifying the number of response variables, and a covariance matrix, instead of only a variance. squid_data &lt;- simulate_population( data_structure = BTped, pedigree = list(animal = BTped), n_response=2, parameters = list( animal = list( vcov = diag(2) ), residual = list( vcov = diag(2) ) ) ) data &lt;- get_population_data(squid_data) head(data) ## y1 y2 animal_effect1 animal_effect2 residual1 ## R187557 -0.8385548 0.1841058 0.6786441 -0.3935136 -1.5171990 ## R187559 -0.4701207 1.0400757 -1.4113157 1.0666325 0.9411949 ## R187568 -0.1846425 0.3584195 1.0712568 0.3008260 -1.2558993 ## R187518 -0.9746306 1.1945939 -2.3299460 0.7226137 1.3553154 ## R187528 -0.8318896 0.2290793 0.3754430 0.3256557 -1.2073326 ## R187945 1.8103155 -1.2127095 2.1203028 -1.2159118 -0.3099873 ## residual2 animal dam sire squid_pop ## R187557 0.577619380 R187557 &lt;NA&gt; &lt;NA&gt; 1 ## R187559 -0.026556865 R187559 &lt;NA&gt; &lt;NA&gt; 1 ## R187568 0.057593543 R187568 &lt;NA&gt; &lt;NA&gt; 1 ## R187518 0.471980260 R187518 &lt;NA&gt; &lt;NA&gt; 1 ## R187528 -0.096576413 R187528 &lt;NA&gt; &lt;NA&gt; 1 ## R187945 0.003202301 R187945 &lt;NA&gt; &lt;NA&gt; 1 # Ainv&lt;-inverseA(BTped)$Ainv # mod &lt;- MCMCglmm(cbind(y1,y2)~1,random=~us(trait):animal, rcov=~us(trait):units,data=data,family=rep(&quot;gaussian&quot;,2),verbose=FALSE,ginverse=list(animal=Ainv)) # summary(mod) "],["4.3-sex-specific-genetic-variance-and-inter-sexual-genetic-correlations.html", "4.3 Sex specific genetic variance and inter-sexual genetic correlations", " 4.3 Sex specific genetic variance and inter-sexual genetic correlations ds &lt;- data.frame(animal=BTped[,&quot;animal&quot;],sex=sample(c(&quot;Female&quot;,&quot;Male&quot;),nrow(BTped), replace=TRUE)) squid_data &lt;- simulate_population( parameters = list( sex=list( fixed=TRUE, names=c(&quot;female&quot;,&quot;male&quot;), beta=c(-0.5,0.5) ), animal= list( names = c(&quot;G_female&quot;,&quot;G_male&quot;), vcov =matrix(c(0.1,-0.1,-0.1,0.4), nrow=2, ncol=2 ,byrow=TRUE) ), residual = list( names=&quot;residual&quot;, vcov = 0.1 ) ), data_structure = ds, pedigree = list(animal=BTped), model = &quot;y = female + male + I(female)*G_female + I(male)*G_male + residual&quot; ) data &lt;- get_population_data(squid_data) head(data) ## y female male G_female G_male residual animal sex ## 1 0.2299693 0 1 0.37038919 0.002373921 -0.2724046 R187557 Male ## 2 -0.2823380 0 1 0.36135697 -0.883784973 0.1014469 R187559 Male ## 3 -0.9727263 1 0 -0.21717329 0.638474950 -0.2555530 R187568 Female ## 4 -0.8084307 1 0 0.07171387 -0.239679105 -0.3801446 R187518 Female ## 5 -0.2248901 0 1 0.35292528 -0.471803420 -0.2530867 R187528 Male ## 6 -0.5270464 1 0 0.16055916 -0.166979686 -0.1876056 R187945 Female ## squid_pop ## 1 1 ## 2 1 ## 3 1 ## 4 1 ## 5 1 ## 6 1 par(mfrow=c(1,2)) boxplot(y~factor(sex),data) plot(G_female~G_male,data) "],["4.4-gxe.html", "4.4 GxE", " 4.4 GxE squid_data &lt;- simulate_population( parameters = list( animal = list( names = c(&quot;G_int&quot;,&quot;G_slope&quot;), mean =c(0,0.2), vcov =matrix(c(1,0.3,0.3,0.5),ncol=2,nrow=2,byrow=TRUE) ), observation= list( names = c(&quot;environment&quot;), vcov =c(1) ), residual = list( names = c(&quot;residual&quot;), vcov =c(0.5) ) ), data_structure=rbind(BTped,BTped,BTped,BTped,BTped), pedigree = list(animal=BTped), model=&quot;y = G_int + G_slope * environment + residual&quot; ) data &lt;- get_population_data(squid_data) library(lme4) short_summary &lt;- function(x) print(summary(x), correlation=FALSE, show.resids=FALSE, ranef.comp = c(&quot;Variance&quot;)) short_summary(lmer(y ~ environment + (1+environment|animal),data)) ## Linear mixed model fit by REML [&#39;lmerMod&#39;] ## Formula: y ~ environment + (1 + environment | animal) ## Data: data ## ## REML criterion at convergence: 15088.6 ## ## Random effects: ## Groups Name Variance Corr ## animal (Intercept) 1.0188 ## environment 0.4827 0.45 ## Residual 0.5084 ## Number of obs: 5200, groups: animal, 1040 ## ## Fixed effects: ## Estimate Std. Error t value ## (Intercept) -0.00276 0.03317 -0.083 ## environment 0.26450 0.02517 10.510 "],["4.5-indirect-genetic-effects.html", "4.5 Indirect Genetic Effects", " 4.5 Indirect Genetic Effects Indirect genetic effects are a bit more difficult to code. Lets take the example of maternal genetic effects. The maternal genetic effect that affects an individual’s phenotype, is that of its mother, not itself. Here we can use [] to index the levels of the random effects within the formula. This means that we can simulate the direct genetic and maternal genetic effects that an individual has (and the covariance between them), as well as generating an individual’s phenotype from its own direct genetic effects, and its mother’s maternal genetic effect. squid_data &lt;- simulate_population( parameters=list( animal = list( names=c(&quot;direct&quot;,&quot;maternal&quot;), vcov = matrix(c(1,0.3,0.3,0.5),2,2) ), residual = list( names=&quot;residual&quot;, vcov = 0.5 ) ), data_structure=BTped, pedigree=list(animal=BTped), model = &quot;y = direct + maternal[dam] + residual&quot; ) data &lt;- get_population_data(squid_data) head(data) ## y direct maternal residual animal dam sire squid_pop ## R187557 NA 0.4438700 1.15175094 -0.44495274 R187557 &lt;NA&gt; &lt;NA&gt; 1 ## R187559 NA 2.2970019 -0.39471324 -0.18850357 R187559 &lt;NA&gt; &lt;NA&gt; 1 ## R187568 NA 2.1728927 0.54220433 -0.40754005 R187568 &lt;NA&gt; &lt;NA&gt; 1 ## R187518 NA 0.3898664 -0.05419618 0.56079375 R187518 &lt;NA&gt; &lt;NA&gt; 1 ## R187528 NA -0.4593114 -0.48486427 0.09109256 R187528 &lt;NA&gt; &lt;NA&gt; 1 ## R187945 NA -1.0554649 -1.35908176 -0.56942704 R187945 &lt;NA&gt; &lt;NA&gt; 1 "],["4.6-dominance.html", "4.6 Dominance", " 4.6 Dominance Coming soon… "],["4.7-inbreeding-depression.html", "4.7 Inbreeding depression", " 4.7 Inbreeding depression Coming soon… "],["4.8-genetic-groups.html", "4.8 Genetic Groups", " 4.8 Genetic Groups Coming soon… "],["5-phylogenetic.html", "5 Phylogenetic Effects ", " 5 Phylogenetic Effects "],["5.1-brownian-motion.html", "5.1 Brownian motion", " 5.1 Brownian motion library(ape) data(bird.families) squid_dat &lt;- simulate_population( data_structure=data.frame(taxon=bird.families$tip.label), parameters=list( taxon=list( vcov=1 ), residual=list( vcov=1 ) ), phylogeny=list(taxon=bird.families) ) pop_dat &lt;- get_population_data(squid_dat) var(pop_dat$taxon_effect) ## [1] 0.8017967 library(MCMCglmm) Ainv&lt;-inverseA(bird.families)$Ainv prior&lt;-list( R=list(V=1, nu=0.002), G=list(G1=list(V=1, nu=0.002))) model2&lt;-MCMCglmm(y~1, random=~taxon, ginverse=list(taxon=Ainv), data=pop_dat, prior=prior, verbose=FALSE, nitt=13000, burnin=3000, thin=10) summary(model2) ## ## Iterations = 3001:12991 ## Thinning interval = 10 ## Sample size = 1000 ## ## DIC: 168.1167 ## ## G-structure: ~taxon ## ## post.mean l-95% CI u-95% CI eff.samp ## taxon 1.643 0.1346 2.938 23.95 ## ## R-structure: ~units ## ## post.mean l-95% CI u-95% CI eff.samp ## units 0.5758 0.0007948 1.4 28.69 ## ## Location effects: y ~ 1 ## ## post.mean l-95% CI u-95% CI eff.samp pMCMC ## (Intercept) 0.2780 -0.5114 1.0552 1000 0.458 "],["5.2-ornsteinuhlenbeck-process.html", "5.2 Ornstein–Uhlenbeck Process", " 5.2 Ornstein–Uhlenbeck Process Coming Soon :D "],["6-temporal-and-spatial-effects.html", "6 Temporal and Spatial Effects ", " 6 Temporal and Spatial Effects "],["6.1-simple-temporal-effects.html", "6.1 Simple Temporal Effects", " 6.1 Simple Temporal Effects We might have measured a variable over the course of a certain time period (e.g. 20 years). We might expect that there is stochastic year-to-year variation, which we can simulate already. However we might also want to simulate patterns in that temporal data. We can treat the levels associated with a particular grouping factor (e.g. year) as both a factor and continuous. To treat a grouping factor as continuous, we use covariate=TRUE in the parameter list. In this way we can simulate a linear effect of year: squid_data &lt;- simulate_population( data_structure= make_structure(structure = &quot;year(20) + sex(2)/individual(50)&quot;,repeat_obs=20), parameters=list( year_cont = list( group=&quot;year&quot;, names= &quot;year_cont&quot;, covariate=TRUE, beta=0.3 ), year = list( vcov = 0.8 ), residual=list( vcov = 1 ) ) ) note we have specified group in the parameter list. This enables us to link a set of parameters to the grouping factor in the data structure. This doesn’t have to be specified and defaults to the name of the list item. data &lt;- get_population_data(squid_data) head(data) ## y year_cont year_effect residual year sex individual squid_pop ## 1 -0.4380439 1 0.9174177 -1.6554616 1 1 1 1 ## 2 0.2886714 1 0.9174177 -0.9287463 1 1 1 1 ## 3 0.9524955 1 0.9174177 -0.2649222 1 1 1 1 ## 4 0.3156380 1 0.9174177 -0.9017798 1 1 1 1 ## 5 -0.1408780 1 0.9174177 -1.3582957 1 1 1 1 ## 6 -0.2459247 1 0.9174177 -1.4633424 1 1 1 1 plot(y ~ year_cont, data) Here we can see there is within year variation, year to year variation, as well as a linear directional year effect. lmer(y ~ year_cont + (1|year), data) ## Linear mixed model fit by REML [&#39;lmerMod&#39;] ## Formula: y ~ year_cont + (1 | year) ## Data: data ## REML criterion at convergence: 113795.4 ## Random effects: ## Groups Name Std.Dev. ## year (Intercept) 1.017 ## Residual 1.002 ## Number of obs: 40000, groups: year, 20 ## Fixed Effects: ## (Intercept) year_cont ## -0.03554 0.31093 In a similar way we can also simulate a quadratic effect of time. squid_data &lt;- simulate_population( data_structure = make_structure(structure = &quot;year(20) + sex(2)/individual(50)&quot;,repeat_obs=20), parameters=list( year_cont = list( group=&quot;year&quot;, names= c(&quot;year_cont&quot;), covariate=TRUE, beta=c(0.3) ), interactions=list( names= c(&quot;year_cont:year_cont&quot;), beta=c(-0.05) ), year = list( vcov = 1 ), residual=list( vcov = 0.8 ) ) ) data &lt;- get_population_data(squid_data) plot(y~year_cont,data) "],["6.2-cyclical-temporal-effects.html", "6.2 Cyclical Temporal Effects", " 6.2 Cyclical Temporal Effects squidR uses the sinusoidal equation to implement cyclical temporal effects \\[ y = A sin(B(x - C)) + D \\] where A is the amplitude, \\(B/2\\pi\\) is the period \\(C/B\\) is the horizontal shift and D is the vertical shift. We can visualise this time &lt;- 1:20 amplitude &lt;- 10 # |A| = the amplitude period &lt;- 10 h_shift &lt;- 3 v_shift &lt;- 5 B &lt;- (2*pi) / abs(period) # 2pi/|B| = the period cyclic_effect &lt;- amplitude*sin(B*time - B^2*h_shift ) + v_shift plot(cyclic_effect~time) We can include this complexity into the model part of the simulate_population, adding the extra parameters for the cyclical effects into the year_cont part of the list. squid_data &lt;- simulate_population( data_structure= make_structure(structure = &quot;year(20) + sex(2)/individual(50)&quot;,repeat_obs=1), parameters=list( year_cont = list( group=&quot;year&quot;, names= &quot;linear_effect&quot;, covariate=TRUE, beta=0.3, amplitude = 2, # |A| = the amplitude period = 10, h_shift = 3, v_shift = 5 ), year = list( vcov = 1.2 ), residual=list( vcov = 1 ) ), model=&quot; B =(2*pi) / abs(period); cyclic_effect = amplitude*sin(B*I(linear_effect) - B^2*h_shift ) + v_shift; y = linear_effect + cyclic_effect + year_effect + residual&quot; ) data &lt;- get_population_data(squid_data) plot(y~year,data) "],["6.3-temporalauto.html", "6.3 Temporal Autocorrelation", " 6.3 Temporal Autocorrelation "],["6.4-spatialauto.html", "6.4 Spatial Autocorrelation", " 6.4 Spatial Autocorrelation "],["7-sampling.html", "7 Sampling", " 7 Sampling To create different sampling schemes, we can use the sample arguments in the simulate_population() function, for example: sample_type = &quot;nested&quot;, sample_param = cbind(individual=c(10, 15),observation=c(10, 5)), There are three different types of sampling ‘nested’, ‘missing’ and ‘temporal’, each of which are outlined below. The sample arguments create different datasets for each population that has been simulated, and you can then use the function get_sample_data() to extract the sampled data. "],["7.1-nested.html", "7.1 Nested", " 7.1 Nested Nested sampling assumes that you have a nested structure, and allows you to sample different numbers at each hierarchical level. The param input is a matrix with (named) columns. The rows of this matrix represent different sampling sets. This is most easily put together using the cbind() (column bind) function, specifying the names. The number of repeat observations for a higher level can be specified using name ‘observation’ (this doesn’t have to exist in the data structure). For example cbind(individual=c(10, 15),observation=c(10, 5)) ## individual observation ## [1,] 10 10 ## [2,] 15 5 would represent sampling the data structure above, the first set having 10 individuals each with 10 observations Note this sampling procedure only produces balanced sampling designs. For unbalanced designs see ‘missing data’ below. 7.1.1 Worked example 1 We want to see how the number of repeat measurements on individuals affects power. In order to vary the number of observations of an individual, we could specify: param &lt;- cbind(nest=10,individual=10,observation=c(20, 10, 5, 2)) pop_data &lt;- simulate_population( data_structure = make_structure(&quot;nest(10)/individual(20)&quot;,repeat_obs=20), parameters = list( individual = list( vcov = 0.1 ), observation= list( names = c(&quot;environment&quot;), beta =c(0.5) ), residual = list( vcov = 0.8 ) ), sample_type = &quot;nested&quot;, sample_param = param ) To extract the sampled data we can then use get_sample_data() specifying which sample set we want, for example the second set 10 nests, each with 10 individuals with 10 observations: sample_data &lt;- get_sample_data(pop_data, sample_set=2) length(unique(sample_data$nest)) ## [1] 10 length(unique(sample_data$individual)) ## [1] 100 nrow(sample_data) ## [1] 1000 "],["7.2-missing-data.html", "7.2 Missing data", " 7.2 Missing data The missing data methods allows generation of unbalanced data. Missing data is generated through creating probabilities of being sampled using logistic regression. Missingness can then either be random, or a function of any of the simulated variables. This methods allows the different classes of missing data to be generated: Missing Completely At Random (MCAR) All observations have an equal probability of being sampled Missing At Random (MAR) Probability of missingness is dependent on variables correlated with the response variable (i.e. a predictor variable) Missing Not At Random (MNAR) Probability of missingness is dependent on the response variable itself 7.2.1 MCAR Missing completely at random occurs when the probability of missingness is not dependent on anything. This can be implemented through a logistic regression, where only the intercept is specified: \\[ logit(p) = beta_0 \\] Note this intercept is on the logit scale, so 0 is equivalent to 0.5. pop_data &lt;- simulate_population( data_structure = make_structure(&quot;individual(100)&quot;,repeat_obs=5), parameters = list( individual = list( vcov = 0.1 ), observation= list( names = c(&quot;environment&quot;), beta =c(0.5) ), residual = list( vcov = 0.8 ) ), sample_type = &quot;missing&quot;, sample_param = &quot;0&quot; ) sample_data &lt;- get_sample_data(pop_data) nrow(sample_data) ## [1] 276 7.2.2 MAR Missing at random occurs when the probability of missingness is dependent on a predictor variable (or a variables correlated with y). This can be implemented through a logistic regression, where the predictor variable(s) is a predictor(s) of y: \\[ logit(p) = beta_0 + beta_1*environment \\] pop_data &lt;- simulate_population( data_structure = make_structure(&quot;individual(100)&quot;,repeat_obs=5), parameters = list( individual = list( vcov = 0.1 ), observation= list( names = c(&quot;environment&quot;), beta =c(0.5) ), residual = list( vcov = 0.8 ) ), sample_type = &quot;missing&quot;, sample_param = &quot;0.5*environment&quot; ) sample_data &lt;- get_sample_data(pop_data) nrow(sample_data) ## [1] 247 The predictor variables are scaled (mean 0, variance 1), so the slopes are directly comparable across traits, and intercept represents the mean (on the logit scale). 7.2.3 MNAR Missing not at random occurs when the probability of missingness is dependent on the response variable itself variable (i.e. y). This can be implemented through a logistic regression, where the predictor variable is y: \\[ logit(p) = beta_0 + beta_1*y \\] Again y is scaled. pop_data &lt;- simulate_population( data_structure = make_structure(&quot;individual(100)&quot;,repeat_obs=5), parameters = list( individual = list( vcov = 0.8 ), observation= list( names = c(&quot;environment&quot;), beta =c(0.1) ), residual = list( vcov = 0.5 ) ), sample_type = &quot;missing&quot;, sample_param = &quot;0.5*y&quot; ) sample_data &lt;- get_sample_data(pop_data) nrow(sample_data) ## [1] 274 Lets try and visualise this. We know there is lots f between individual variation, and we know sampling is based on phenotype, so we would expect an association between number of observations and phenotype: ind_data &lt;- data.frame( n=as.vector(table(sample_data$individual)), mean=tapply(sample_data$y,sample_data$individual,mean) ) boxplot(mean~n,ind_data) "],["7.3-temporal-sampling.html", "7.3 Temporal Sampling", " 7.3 Temporal Sampling In the parameters we specify a list, with the temporal variable time, the grouping variable with which the temporal sampling occurs group, the between group variance (as a proportion) in sampling times variance and the within group sample size n: pop_data &lt;- simulate_population( data_structure = make_structure(&quot;day(100) + individual(100)&quot;,repeat_obs=1), parameters = list( individual = list( vcov = 0.1 ), day=list( covariate=TRUE, beta=0.4 ), residual = list( vcov = 0.8 ) ), sample_type = &quot;temporal&quot;, sample_param = list( time = c(&quot;day&quot;), group = c(&quot;individual&quot;), variance = c(0.1,0.2), n=4), ) sample_data &lt;- get_sample_data(pop_data) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
